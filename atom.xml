<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DebugTalk</title>
  <subtitle>探索一个软件工程师的无限可能</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://debugtalk.com/"/>
  <updated>2017-08-09T05:34:52.000Z</updated>
  <id>http://debugtalk.com/</id>
  
  <author>
    <name>九毫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【大疆内推】岗位描述我只想这么写</title>
    <link href="http://debugtalk.com/post/dji-hire-info/"/>
    <id>http://debugtalk.com/post/dji-hire-info/</id>
    <published>2017-08-08T16:00:00.000Z</published>
    <updated>2017-08-09T05:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【大疆内推】岗位描述我只想这么写"><a href="#【大疆内推】岗位描述我只想这么写" class="headerlink" title="【大疆内推】岗位描述我只想这么写"></a>【大疆内推】岗位描述我只想这么写</h1><p>近期，大疆互联网事业部广招各路英豪，各类岗位都有大量的<code>Hire Count</code>。</p>
<p>在我们质量部，现急需招聘<code>软件测试工程师</code>、<code>测试开发工程师</code>和<code>QA</code>，名额无限制。</p>
<p>如果你对我们的岗位感兴趣，可能你还想了解如下信息。</p>
<h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>大疆这家公司我就不介绍了，大家有兴趣可以看下我们的<a href="http://www.dji.com/" target="_blank" rel="external">公司主页</a>，或者在网上自行搜索。</p>
<p>可能很多人都知道大疆是一家做无人机的公司，但却不知道我们一直在探索着与互联网各种跨界融合的方式，在移动互联网、云计算、大数据、物联网、电子商务等领域同样投入了大量的资源。而互联网事业部，作为公司的一级部门，则肩负着该重要使命。</p>
<p>我们质量部作为互联网事业部下面的二级部门，对接了整个部门的所有产品和项目，一直致力于提升整个部门的软件质量的研发效率。</p>
<h2 id="岗位职责及要求"><a href="#岗位职责及要求" class="headerlink" title="岗位职责及要求"></a>岗位职责及要求</h2><p>当前我们有<code>测试</code>、<code>测试开发</code>、<code>QA</code>这三类岗位。</p>
<p>关于这三类岗位的职责和差异，基本上跟各大互联网公司的岗位对应。之前我在内部新员工培训时有过一次分享，并且整理成了一篇文章，<a href="http://debugtalk.com/post/introduction-to-testing-engineer-daily-work/">《【科普】互联网测试岗位的工作日常》</a>，大家如有兴趣，可以进一步了解。</p>
<p>而对于岗位的要求，我不想复制粘贴招聘信息上千篇一律的描述，我就只谈下我对每个岗位需求的理解。</p>
<p>对于测试工程师，最重要的莫过于熟悉业务、善于发现问题、跟进并推动问题的解决。对于两年工作经验以内的，我们看重基础，对计算机软件、网络、软件测试理论等方面能有较好的掌握，如果在工作中还能积极地学习新技术并在项目中尝试使用，会是一个不错的亮点。对于两年工作经验以上的，我们期望能对业务流程、测试工作本身有更深的理解，并且在软件测试技术方面有一定的积累，最好能有一些成功的实践经验。</p>
<p>对于测试开发工程师，我们重点关注两个方面，一是对测试本身的理解，最好能有比较丰富的业务测试经验，毕竟开发出来的工具还是要为业务测试服务的；另一方面，作为带有<code>开发</code>的title，希望也能有较好的代码能力，并且最好有成功的实践案例或作品。</p>
<p>对于QA，业务、流程、管理，以及有较强的推动能力。</p>
<p>不管是什么岗位，善于学习，乐于总结，具有写笔记或博客的习惯，都会是很大的加分项。</p>
<p>关于硬性条件这块儿，希望能是本科及以上学历，计算机相关专业。公司并没有严格限制学历，但是当学历不达标时，对工作背景以及其它方面会有更高的期望。</p>
<h2 id="薪资福利"><a href="#薪资福利" class="headerlink" title="薪资福利"></a>薪资福利</h2><p>对于薪资福利，不同岗位和级别会有一定差异，但不管是什么岗位，处于行业领先的薪资水平还是可以保障的。</p>
<p>年底有机会获得奔驰宝马福利车这种奖励可能会觉得离自己太遥远，但年终奖还是不错的，具体看绩效。</p>
<p>另外比较可喜的是，从公司不断增加的福利可以看到，公司也在一直致力于提升员工的各项软福利和归属感，各项规章管理制度也在日益完善和更加人性化。</p>
<p>除了单纯的薪资福利，相信公司业务迅猛发展带来的个人能力成长空间，也是你所期待的。在大疆，公司的口号是探索未来无限可能（The future of possible），这对员工个人来说，也同样适用。</p>
<h2 id="其它岗位"><a href="#其它岗位" class="headerlink" title="其它岗位"></a>其它岗位</h2><p>除了测试相关的岗位，我们在前后端开发、业务运维、运维开发等各个岗位都有海量的招聘需求。</p>
<p>如果你们有兴趣，我同样可以帮忙对接到各个岗位的负责人。</p>
<h2 id="投递方式"><a href="#投递方式" class="headerlink" title="投递方式"></a>投递方式</h2><p>可以直接发到我的邮箱：leo.lee@dji.com<br>也可以发送到我的微信公众号：<code>DebugTalk</code></p>
<p>合适的简历我会积极内推，并全程跟进状态和进度。假如跟我们的岗位需求不匹配，我也会及时反馈结果及原因。</p>
<p>不管最后我们能否成为同事，希望我们都能成为朋友。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【大疆内推】岗位描述我只想这么写&quot;&gt;&lt;a href=&quot;#【大疆内推】岗位描述我只想这么写&quot; class=&quot;headerlink&quot; title=&quot;【大疆内推】岗位描述我只想这么写&quot;&gt;&lt;/a&gt;【大疆内推】岗位描述我只想这么写&lt;/h1&gt;&lt;p&gt;近期，大疆互联网事业部广招各
    
    </summary>
    
    
      <category term="招聘" scheme="http://debugtalk.com/tags/%E6%8B%9B%E8%81%98/"/>
    
      <category term="大疆" scheme="http://debugtalk.com/tags/%E5%A4%A7%E7%96%86/"/>
    
  </entry>
  
  <entry>
    <title>How to install a package from Github that has other github dependencies ?</title>
    <link href="http://debugtalk.com/post/How-to-install-a-package-from-Github-that-has-other-github-dependencies/"/>
    <id>http://debugtalk.com/post/How-to-install-a-package-from-Github-that-has-other-github-dependencies/</id>
    <published>2017-08-04T16:00:00.000Z</published>
    <updated>2017-08-06T03:21:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发<code>ApiTestEngine</code>时遇到一个安装包依赖的问题，耗费了不少时间寻找解决方案，考虑到还算比较有普遍性，因此总结形成这篇文章。</p>
<h2 id="从-pip-install-说起"><a href="#从-pip-install-说起" class="headerlink" title="从 pip install 说起"></a>从 pip install 说起</h2><p>先不那么简单地描述下背景。</p>
<p><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>作为一款接口测试工具，需要具有灵活的命令行调用方式，因此最好能在系统中进行安装并注册为一个<code>CLI</code>命令。</p>
<p>在Python中，安装依赖库的最佳方式是采用<a href="https://pip.pypa.io/en/stable/" target="_blank" rel="external"><code>pip</code></a>，例如安装<a href="http://locust.io/" target="_blank" rel="external"><code>Locust</code></a>时，就可以采用如下命令搞定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pip install locustio</div><div class="line">Collecting locustio</div><div class="line">  Using cached locustio-0.7.5.tar.gz</div><div class="line">[...]</div><div class="line">Successfully installed locustio-0.7.5</div></pre></td></tr></table></figure>
<p>但要想采用<code>pip install SomePackage</code>的方式，前提是<code>SomePackage</code>已经托管在<code>PyPI</code>。关于<code>PyPI</code>，可以理解为<code>Python</code>语言的第三方库的仓库索引，当前绝大多数流行的<code>Python</code>第三方库都托管在<code>PyPI</code>上。</p>
<p>但是，这里存在一个问题。在<code>PyPI</code>当中，所有的包都是由其作者自行上传的。如果作者比较懒，那么可能托管在<code>PyPI</code>上的最新版本相较于最新代码就会比较滞后。</p>
<p><code>Locust</code>就是一个典型的例子。从上面的安装过程可以看出，我们采用<code>pip install locustio</code>安装的<code>Locust</code>版本是<code>v0.7.5</code>，而在<code>Locust</code>的<code>Github</code>仓库中，<code>v0.7.5</code>已经是一年之前的版本了。也是因为这个原因，之前在我的博客里面介绍<code>Locust</code>的<a href="http://debugtalk.com/post/head-first-locust-user-guide/">图表展示功能</a>后，已经有不下5个人向我咨询为啥他们看不到这个图表模块。这是因为<code>Locust</code>的图表模块是在今年（2017）年初时添加的功能，master分支的代码版本也已经升级到<code>v0.8a2</code>了，但<code>PyPI</code>上的版本却一直没有更新。</p>
<p>而要想使用到项目最新的功能，就只能采用源码进行安装。</p>
<p>大多数编程语言在使用源码进行安装时，都需要先将源码下载到本地，然后通过命令进行编译，例如<code>Linux</code>中常见的<code>make &amp;&amp; make install</code>。对于<code>Python</code>项目来说，也可以采用类似的模式，先将项目<code>clone</code>到本地，然后进入到项目的根目录，执行<code>python setup.py install</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/locustio/locust.git</div><div class="line">$ cd locust</div><div class="line">$ python setup.py install</div><div class="line">[...]</div><div class="line">Finished processing dependencies for locustio==0.8a2</div></pre></td></tr></table></figure>
<p>不过，要想采用这种方式进行安装也是有前提的，那就是项目必须已经实现了基于<code>setuptools</code>的安装方式，并在项目的根目录下存在<code>setup.py</code>。</p>
<p>可以看出，这种安装方式还是比较繁琐的，需要好几步才能完成安装。而且，对于大多数使用者来说，他们并不需要阅读项目源码，因此<code>clone</code>操作也实属多余。</p>
<p>可喜的是，<code>pip</code>不仅支持安装<code>PyPI</code>上的包，也可以直接通过项目的<code>git</code>地址进行安装。还是以<code>Locust</code>项目为例，我们通过<code>pip</code>命令也可以实现一条命令安装<code>Github</code>项目源码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ pip install git+https://github.com/locustio/locust.git@master#egg=locustio</div><div class="line">Collecting locustio from git+https://github.com/locustio/locust.git@master#egg=locustio</div><div class="line">[...]</div><div class="line">Successfully installed locustio-0.8a2</div></pre></td></tr></table></figure>
<p>对于项目地址来说，完整的描述应该是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install vcs+protocol://repo_url/#egg=pkg&amp;subdirectory=pkg_dir</div></pre></td></tr></table></figure>
<p>这里的<code>vcs</code>也不仅限于<code>git</code>，<code>svn</code>和<code>hg</code>也是一样的，而<code>protocol</code>除了采用<code>SSH</code>形式的项目地址，也可以采用<code>HTTPS</code>的地址，在此不再展开。</p>
<p>通过这种方式，我们就总是可以使用到项目的最新功能特性了。当然，前提条件也是一样的，需要项目中已经实现了<code>setup.py</code>。</p>
<p>考虑到<code>ApiTestEngine</code>还处于频繁的新特性开发阶段，因此这种途径无疑是让用户安装使用最新代码的最佳方式。</p>
<h2 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h2><p>在<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>中，存在测试结果报告展示这一部分的功能，而这部分的功能是需要依赖于另外一个托管在GitHub上的项目，<a href="https://github.com/debugtalk/PyUnitReport" target="_blank" rel="external"><code>PyUnitReport</code></a>。</p>
<p>于是，问题就变为：如何构造<code>ApiTestEngine</code>项目的<code>setup.py</code>，可以实现用户在安装<code>ApiTestEngine</code>时自动安装<code>PyUnitReport</code>依赖。</p>
<p>对于这个需求，已经确定可行的办法：先通过<code>pip</code>安装依赖的库（<code>PyUnitReport</code>），然后再安装当前项目（<code>ApiTestEngine</code>）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pip install git+https://github.com/debugtalk/PyUnitReport.git#egg=PyUnitReport</div><div class="line">$ pip install git+https://github.com/debugtalk/ApiTestEngine.git#egg=ApiTestEngine</div></pre></td></tr></table></figure>
<p>这种方式虽然可行，但是需要执行两条命令，显然不是我们想要的效果。</p>
<p>经过搜索，发现针对该需求，可以在<code>setuptools.setup()</code>中通过<code>install_requires</code>和<code>dependency_links</code>这两个配置项组合实现。</p>
<p>具体地，配置方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">install_requires=[</div><div class="line">   &quot;requests&quot;,</div><div class="line">   &quot;flask&quot;,</div><div class="line">   &quot;PyYAML&quot;,</div><div class="line">   &quot;coveralls&quot;,</div><div class="line">   &quot;coverage&quot;,</div><div class="line">   &quot;PyUnitReport&quot;</div><div class="line">],</div><div class="line">dependency_links=[</div><div class="line">   &quot;git+https://github.com/debugtalk/PyUnitReport.git#egg=PyUnitReport&quot;</div><div class="line">],</div></pre></td></tr></table></figure>
<p>这里有一点需要格外注意，那就是指定的依赖包如果存在于<code>PyPI</code>，那么只需要在<code>install_requires</code>中指定包名和版本号即可（不指定版本号时，默认安装最新版本）；而对于以仓库URL地址存在的依赖包，那么不仅需要在<code>dependency_links</code>中指定，同时也要在<code>install_requires</code>中指定。</p>
<p>然后，就可以直接通过<code>ApiTestEngine</code>项目的git地址一键进行安装了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install git+https://github.com/debugtalk/ApiTestEngine.git#egg=ApiTestEngine</div></pre></td></tr></table></figure>
<p>虽然在寻找解决办法的过程中，看到大家都在说<code>dependency_links</code>由于安全性的问题，即将被弃用，而且在<code>setuptools</code>的官方文章中的确也没有看到<code>dependency_links</code>的描述。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEPRECATION: Dependency Links processing has been deprecated and will be removed in a future release.</div></pre></td></tr></table></figure>
<p>不过在我本地的<code>macOS</code>系统上尝试发现，该种方式的确是可行的，因此就采用这种方式进行发布了。</p>
<p>但是当我后续在<code>Linux</code>服务器上安装时，却无法成功，总是在安装<code>PyUnitReport</code>依赖库的时候报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pip install git+https://github.com/debugtalk/ApiTestEngine.git#egg=ApiTestEngine</div><div class="line">[...]</div><div class="line">Collecting PyUnitReport (from ApiTestEngine)</div><div class="line">  Could not find a version that satisfies the requirement PyUnitReport (from ApiTestEngine) (from versions: )</div><div class="line">No matching distribution found for PyUnitReport (from ApiTestEngine)</div></pre></td></tr></table></figure>
<p>另外，同时也有多个用户反馈了同样的问题，这才发现这种方式在<code>Linux</code>和<code>Windows</code>下是不行的。</p>
<p>然后，再次经过大量的搜索，却始终没有特别明确的答案，搞得我也在怀疑，<code>dependency_links</code>到底是不是真的已经弃用了，但是就算是弃用了，也应该有新的替代方案啊，但也并没有找到。</p>
<p>这个问题就这么放了差不多一个星期的样子。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>今天周末在家，想来想去，不解决始终不爽，虽然只是多执行一条命令的问题。</p>
<p>于是又是经过大量搜索，幸运的是终于从<code>pypa/pip</code>的<code>issues</code>中找到一条<a href="https://github.com/pypa/pip/issues/3610" target="_blank" rel="external"><code>issue</code></a>，作者是<a href="https://github.com/pypa/pip/issues/3610#issue-147115114" target="_blank" rel="external"><code>Dominik Neise</code></a>，他详细描述了他遇到的问题和尝试过的方法，看到他的描述我真是惊呆了，跟我的情况完全一模一样不说，连尝试的思路也完全一致。</p>
<p>然后，在下面的回复中，看到了<a href="https://github.com/pypa/pip/issues/3610#issuecomment-283578756" target="_blank" rel="external"><code>Gary Wu</code></a>和<a href="https://github.com/pypa/pip/issues/3610#issuecomment-317281367" target="_blank" rel="external"><code>kbuilds</code></a>的解答，总算是找到了问题的原因和解决方案。</p>
<p>问题在于，在<code>dependency_links</code>中指定仓库URL地址的时候，在指定<code>egg</code>信息时，<code>pip</code>还同时需要一个版本号（<code>version number</code>），并且以短横线<code>-</code>分隔，然后执行的时候再加上<code>--process-dependency-links</code>参数。</p>
<p>回到之前的<code>dependency_links</code>，我们应该写成如下形式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependency_links=[</div><div class="line">   &quot;git+https://github.com/debugtalk/PyUnitReport.git#egg=PyUnitReport-0&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>在这里，短横线<code>-</code>后面我并没有填写<code>PyUnitReport</code>实际的版本号，因为经过尝试发现，这里填写任意数值都是成功的，因此我就填写为<code>0</code>了，省得后续在升级<code>PyUnitReport</code>以后还要来修改这个地方。</p>
<p>然后，就可以通过如下命令进行安装了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install --process-dependency-links git+https://github.com/debugtalk/ApiTestEngine.git#egg=ApiTestEngine</div></pre></td></tr></table></figure>
<p>至此，问题总算解决了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>那么，<code>dependency_links</code>到底是不是要废弃了呢？</p>
<p>从<code>pip</code>的<code>GitHub</code>项目中看到这么一个<a href="https://github.com/pypa/pip/issues/4187" target="_blank" rel="external"><code>issue</code></a>，<code>--process-dependency-links</code>之前废弃了一段时间，但是又给加回来了，因为当前还没有更好的可替代的方案。因此，在出现替代方案之前，<code>dependency_links</code>应该是最好的方式了吧。</p>
<p>最后再感叹下，老外提问时描述问题的专业性和细致程度真是令人佩服，大家可以再仔细看下这个<a href="https://github.com/pypa/pip/issues/3610#issue-147115114" target="_blank" rel="external"><code>issue</code></a>好好感受下。</p>
<h2 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h2><ul>
<li><a href="http://setuptools.readthedocs.io/en/latest/setuptools.html#dependencies-that-aren-t-in-pypi" target="_blank" rel="external">http://setuptools.readthedocs.io/en/latest/setuptools.html#dependencies-that-aren-t-in-pypi</a></li>
<li><a href="https://pip.pypa.io/en/stable/reference/pip_install/" target="_blank" rel="external">https://pip.pypa.io/en/stable/reference/pip_install/</a></li>
<li><a href="https://github.com/pypa/pip/issues/3610" target="_blank" rel="external">https://github.com/pypa/pip/issues/3610</a></li>
<li><a href="https://github.com/pypa/pip/issues/4187" target="_blank" rel="external">https://github.com/pypa/pip/issues/4187</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在开发&lt;code&gt;ApiTestEngine&lt;/code&gt;时遇到一个安装包依赖的问题，耗费了不少时间寻找解决方案，考虑到还算比较有普遍性，因此总结形成这篇文章。&lt;/p&gt;
&lt;h2 id=&quot;从-pip-install-说起&quot;&gt;&lt;a href=&quot;#从-pip-install-
    
    </summary>
    
    
      <category term="Locust" scheme="http://debugtalk.com/tags/Locust/"/>
    
      <category term="ApiTestEngine" scheme="http://debugtalk.com/tags/ApiTestEngine/"/>
    
      <category term="setuptools" scheme="http://debugtalk.com/tags/setuptools/"/>
    
      <category term="pip" scheme="http://debugtalk.com/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>解决Jenkins中无法展示HTML样式的问题</title>
    <link href="http://debugtalk.com/post/solve-Jenkins-can-not-show-html-css/"/>
    <id>http://debugtalk.com/post/solve-Jenkins-can-not-show-html-css/</id>
    <published>2017-07-23T16:00:00.000Z</published>
    <updated>2017-07-24T10:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>对于测试报告来说，除了内容的简洁精炼，样式的美观也很重要。常用的做法是，采用<code>HTML</code>格式的文档，并搭配<code>CSS</code>和<code>JS</code>，实现自定义的样式和动画效果（例如展开、折叠等）。</p>
<p>在<code>Jenkins</code>中要展示<code>HTML</code>文档，通常采用的方式有两种：</p>
<ul>
<li>使用<a href="https://wiki.jenkins.io/display/JENKINS/HTML+Publisher+Plugin" target="_blank" rel="external"><code>HTML Publisher Plugin</code></a>；</li>
<li>使用<code>Files to archive</code>功能，在<code>Build Artifacts</code>中显示<code>HTML</code>文档链接。</li>
</ul>
<p>第一种方式配合插件，可以通过图形化操作实现简易配置，并且展示效果也不错；而第二种方式的优势在于使用<code>Jenkins</code>自带的功能，不依赖插件也能实现基本的需求。</p>
<p>然而，不管是采用哪种方式，都有可能会遇到一种情况，就是展示出来的<code>HTML</code>报告样式全无。在浏览器的<code>Network</code>中查看资源加载情况，会发现相关的<code>CSS</code>和<code>JS</code>都没法正常加载。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Refused to load the stylesheet &apos;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&apos; because it violates the following Content Security Policy directive: &quot;style-src &apos;self&apos;&quot;.</div><div class="line">Refused to apply inline style because it violates the following Content Security Policy directive: &quot;style-src &apos;self&apos;&quot;. Either the &apos;unsafe-inline&apos; keyword, a hash (&apos;sha256-0EZqoz+oBhx7gF4nvY2bSqoGyy4zLjNF+SDQXGp/ZrY=&apos;), or a nonce (&apos;nonce-...&apos;) is required to enable inline execution.</div><div class="line">Blocked script execution in &apos;http://10.13.0.146:8888/job/SkyPixel-SmokeTest/34/artifact/reports/SkyPixel-smoketest/34.html&apos; because the document&apos;s frame is sandboxed and the &apos;allow-scripts&apos; permission is not set.</div><div class="line">Refused to load the stylesheet &apos;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&apos; because it violates the following Content Security Policy directive: &quot;style-src &apos;self&apos;&quot;.</div></pre></td></tr></table></figure>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>出现该现象的原因在于<code>Jenkins</code>中配置的<code>CSP</code>（<code>Content Security Policy</code>）。</p>
<p>简单地说，这是<code>Jenkins</code>的一个安全策略，默认会设置为一个非常严格的权限集，以防止Jenkins用户在<code>workspace</code>、<code>/userContent</code>、<code>archived artifacts</code>中受到恶意<code>HTML/JS</code>文件的攻击。</p>
<p>默认地，该权限集会设置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sandbox; default-src &apos;none&apos;; img-src &apos;self&apos;; style-src &apos;self&apos;;</div></pre></td></tr></table></figure>
<p>在该配置下，只允许加载：</p>
<ul>
<li>Jenkins服务器上托管的<code>CSS</code>文件</li>
<li>Jenkins服务器上托管的图片文件</li>
</ul>
<p>而如下形式的内容都会被禁止：</p>
<ul>
<li>JavaScript</li>
<li>plugins (object/embed)</li>
<li>HTML中的内联样式表（<code>Inline style sheets</code>），以及引用的外站CSS文件</li>
<li>HTML中的内联图片（<code>Inline image definitions</code>），以及外站引用的图片文件</li>
<li>frames</li>
<li>web fonts</li>
<li>XHR/AJAX</li>
<li>etc.</li>
</ul>
<p>可以看出，这个限制非常严格，在此限制下也就不难理解为什么我们的<code>HTML</code>没法正常展示样式了。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h3><p>要解决该问题，方式也比较简单，就是修改<code>Content Security Policy</code>的默认配置。</p>
<p>修改方式为，进入<code>Manage Jenkins</code>-&gt;<code>Script console</code>，输入如下命令并进行执行。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.setProperty(<span class="string">"hudson.model.DirectoryBrowserSupport.CSP"</span>, <span class="string">""</span>)</div></pre></td></tr></table></figure>
<p>当看到如下结果后，则说明配置修改已经生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Result</div><div class="line">Result:</div></pre></td></tr></table></figure>
<p>再次进行构建，新生成的<code>HTML</code>就可以正常展示样式了。需要说明的是，该操作对之前构建生成的<code>HTML</code>报告无效。</p>
<h3 id="永久解决方案"><a href="#永久解决方案" class="headerlink" title="永久解决方案"></a>永久解决方案</h3><p>不过，该方法还存在一个问题：该配置只是临时生效，当重启<code>Jenkins</code>后，<code>Content Security Policy</code>又会恢复为默认值，从而<code>HTML</code>样式又没法展示了。</p>
<p>当前，<code>Jenkins</code>官方还没有相应的解决方法，我们只能在每次启动或重启<code>Jenkins</code>时，重新修改该安全策略。</p>
<p>如果手工地来重复这项工作，也是可行，但并不是一个好的解决方案。</p>
<p>回到刚才的<code>Script console</code>，会发现我们执行的命令其实就是一段<code>Groovy</code>代码；那么，如果我们可以实现在<code>Jenkins</code>每次启动时自动地执行该<code>Groovy</code>代码，那么也就同样能解决我们的问题了。</p>
<p>好在<code>Jenkins</code>已经有相应的插件：</p>
<ul>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Startup+Trigger" target="_blank" rel="external"><code>Startup Trigger</code></a>: 可实现在<code>Jenkins</code>节点(master/slave)启动时触发构建；</li>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Groovy+plugin" target="_blank" rel="external"><code>Groovy plugin</code></a>: 可实现直接执行<code>Groovy</code>代码。</li>
</ul>
<p>搜索安装<code>startup-trigger-plugin</code>和<code>Groovy</code>插件后，我们就可以进行配置了。</p>
<p>配置方式如下：</p>
<ul>
<li>新建一个job，该job专门用于<code>Jenkins</code>启动时执行的配置命令；</li>
<li>在<code>Build Triggers</code>模块下，勾选<code>Build when job nodes start</code>；</li>
<li>在<code>Build</code>模块下，<code>Add build step</code>-&gt;<code>Execute system Groovy script</code>，在<code>Groovy Script</code>中输入配置命令，<code>System.setProperty(&quot;hudson.model.DirectoryBrowserSupport.CSP&quot;, &quot;&quot;)</code>。</li>
</ul>
<p>需要注意的是，添加构建步骤的时候，应该选择<code>Execute system Groovy script</code>，而不是<code>Execute Groovy script</code>。关于这两者之间的差异，简单地说，<code>Groovy Script</code>相当于是运行在<code>master/slave</code>系统<code>JVM</code>环境中，而<code>system groovy script</code>，则是运行在<code>Jenkins master</code>的<code>JVM</code>环境中，与前面提到的<code>Jenkins Script Console</code>功能相同。如需了解更多信息，可查看<a href="https://wiki.jenkins.io/display/JENKINS/Groovy+plugin" target="_blank" rel="external"><code>Groovy plugin</code>的详细说明</a>。</p>
<p>至此，我们就彻底解决<code>HTML</code>样式展示异常的问题了。</p>
<p>但还有一点需要格外注意，在本文的演示中，我们修改<code>CSP</code>（<code>Content Security Policy</code>）配置时关闭了的所有安全保护策略，即将<code>hudson.model.DirectoryBrowserSupport.CSP</code>设置为空，其实这是存在很大的安全隐患的。</p>
<p>正确的做法，我们应该是结合项目的实际情况，选择对应的安全策略。例如，如果我们需要开启脚本文件加载，但是只限于Jenkins服务器上托管的<code>CSS</code>文件，那么就可以采用如下配置。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.setProperty(<span class="string">"hudson.model.DirectoryBrowserSupport.CSP"</span>, <span class="string">"sandbox; style-src 'self';"</span>)</div></pre></td></tr></table></figure>
<p>除此之外，<code>CSP</code>可以实现非常精细的权限配置，详细配置可参考<a href="https://content-security-policy.com/" target="_blank" rel="external"><code>Content Security Policy Reference</code></a>。</p>
<h2 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h2><ul>
<li><a href="https://wiki.jenkins.io/display/JENKINS/Configuring+Content+Security+Policy" target="_blank" rel="external">Configuring Content Security Policy</a></li>
<li><a href="https://content-security-policy.com/" target="_blank" rel="external">Content Security Policy Reference</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;对于测试报告来说，除了内容的简洁精炼，样式的美观也很重要。常用的做法是，采用&lt;code&gt;HTML&lt;/code&gt;格式的文档，并
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://debugtalk.com/tags/Jenkins/"/>
    
      <category term="Plugin" scheme="http://debugtalk.com/tags/Plugin/"/>
    
      <category term="测试报告" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    
      <category term="持续集成" scheme="http://debugtalk.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>ApiTestEngine 演进之路（4）测试用例中实现 Python 函数的调用</title>
    <link href="http://debugtalk.com/post/ApiTestEngine-4-call-functions-in-yaml-testcases/"/>
    <id>http://debugtalk.com/post/ApiTestEngine-4-call-functions-in-yaml-testcases/</id>
    <published>2017-07-16T16:00:00.000Z</published>
    <updated>2017-07-23T14:13:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://debugtalk.com/post/ApiTestEngine-3-define-functions-in-yaml-testcases/">《测试用例中实现<code>Python</code>函数的定义》</a>中，介绍了在<code>YAML/JSON</code>测试用例中实现<code>Python</code>函数定义的两种方法，以及它们各自适用的场景。</p>
<p>但是在<code>YAML/JSON</code>文本中要怎样实现函数的调用和传参呢？</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">variable_binds:</span></div><div class="line"><span class="attr">   - TOKEN:</span> debugtalk</div><div class="line"><span class="attr">   - json:</span> &#123;&#125;</div><div class="line"><span class="attr">   - random:</span> $&#123;gen_random_string(<span class="number">5</span>)&#125;</div><div class="line"><span class="attr">   - authorization:</span> $&#123;gen_md5($TOKEN, $json, $random)&#125;</div></pre></td></tr></table></figure>
<p>例如上面的例子（YAML格式），<code>gen_random_string</code>和<code>gen_md5</code>都是已经定义好的函数，但<code>${gen_random_string(5)}</code>和<code>${gen_md5($TOKEN, $json, $random)}</code>终究只是文本字符串，程序是如何将其解析为实际的函数和参数，并实现调用的呢？</p>
<p>本文将对此进行重点讲解。</p>
<h2 id="函数的调用形式"><a href="#函数的调用形式" class="headerlink" title="函数的调用形式"></a>函数的调用形式</h2><p>在<code>Python</code>语言中，函数的调用形式包含如下四种形式：</p>
<ul>
<li>无参数：func()</li>
<li>顺序参数：func(a, b)</li>
<li>字典参数：func(a=1, b=2)</li>
<li>混合类型参数：func(1, 2, a=3, b=4)</li>
</ul>
<p>之前在<a href="http://debugtalk.com/post/ApiTestEngine-2-best-testcase-description/">《探索优雅的测试用例描述方式》</a>中介绍过，我们选择使用<code>${}</code>作为函数转义符，在<code>YAML/JSON</code>用例描述中调用已经定义好的函数。</p>
<p>于是，以上四种类型的函数定义在<code>YAML/JSON</code>中就会写成如下样子。</p>
<ul>
<li>无参数：${func()}</li>
<li>顺序参数：${func(a, b)}</li>
<li>字典参数：${func(a=1, b=2)}</li>
<li>混合类型参数：${func(1, 2, a=3, b=4)}</li>
</ul>
<p>还是之前的例子：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- test:</span></div><div class="line"><span class="attr">    name:</span> create user which does not exist</div><div class="line"><span class="attr">    import_module_functions:</span></div><div class="line"><span class="bullet">        -</span> tests.data.custom_functions</div><div class="line"><span class="attr">    variable_binds:</span></div><div class="line"><span class="attr">        - TOKEN:</span> debugtalk</div><div class="line"><span class="attr">        - json:</span> &#123;<span class="string">"name"</span>: <span class="string">"user"</span>, <span class="string">"password"</span>: <span class="string">"123456"</span>&#125;</div><div class="line"><span class="attr">        - random:</span> $&#123;gen_random_string(<span class="number">5</span>)&#125;</div><div class="line"><span class="attr">        - authorization:</span> $&#123;gen_md5($TOKEN, $json, $random)&#125;</div><div class="line"><span class="attr">    request:</span></div><div class="line"><span class="attr">        url:</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/api/users/<span class="number">1000</span></div><div class="line"><span class="attr">        method:</span> POST</div><div class="line"><span class="attr">        headers:</span></div><div class="line"><span class="attr">            Content-Type:</span> application/json</div><div class="line"><span class="attr">            authorization:</span> $authorization</div><div class="line"><span class="attr">            random:</span> $random</div><div class="line"><span class="attr">        json:</span> $json</div><div class="line"><span class="attr">    validators:</span></div><div class="line"><span class="bullet">        -</span> &#123;<span class="string">"check"</span>: <span class="string">"status_code"</span>, <span class="string">"comparator"</span>: <span class="string">"eq"</span>, <span class="string">"expected"</span>: <span class="number">201</span>&#125;</div><div class="line"><span class="bullet">        -</span> &#123;<span class="string">"check"</span>: <span class="string">"content.success"</span>, <span class="string">"comparator"</span>: <span class="string">"eq"</span>, <span class="string">"expected"</span>: <span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<p>在这里面有一个<code>variable_binds</code>模块，之前已经出现过很多次，也一直都没有讲解。但是，本文也不打算进行讲解，该部分内容将在下一篇讲解参数的定义和引用时再详细展开。</p>
<p>当前我们只需要知道，在该用例描述中，<code>${gen_random_string(5)}</code>和<code>${gen_md5($TOKEN, $json, $random)}</code>均实现了函数的传参和调用，而调用的函数正式之前我们定义的<code>gen_random_string</code>和<code>gen_md5</code>。</p>
<p>这里应该比较好理解，因为函数调用形式与在<code>Python</code>脚本中完全相同。但难点在于，这些描述在<code>YAML/JSON</code>中都是文本字符串形式，<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>在加载测试用例的时候，是怎么识别出函数并完成调用的呢？</p>
<p>具体地，这里可以拆分为三个需求点：</p>
<ul>
<li>如何在<code>YAML/JSON</code>文本中识别函数？</li>
<li>如何将文本字符串的函数拆分为函数名称和参数？</li>
<li>如何使用函数名称和参数实现对应函数的调用？</li>
</ul>
<h2 id="正则表达式的妙用"><a href="#正则表达式的妙用" class="headerlink" title="正则表达式的妙用"></a>正则表达式的妙用</h2><p>对于第一个需求点，我们之前已经做好了铺垫，设计了<code>${}</code>作为函数的转义符；而当初之所以这么设计，也是为了在加载测试用例时便于解析识别，因为我们可以通过使用正则表达式，非常准确地将函数从文本格式的测试用例中提取出来。</p>
<p>既然<code>Python</code>函数的调用形式是确定的，都是<code>函数名(参数)</code>的形式，那么使用正则表达式的分组匹配功能，我们就可以很好地实现函数名称与参数的匹配，也就实现了第二个需求点。</p>
<p>例如，我们可以采用如下正则表达式，来对<code>YAML/JSON</code>中的每一个值（Value）进行匹配性检查。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r&quot;^\$\&#123;(\w+)\((.*)\)\&#125;$&quot;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import re</div><div class="line">&gt;&gt;&gt; regex = r<span class="string">"^\$\&#123;(\w+)\((.*)\)\&#125;$"</span></div><div class="line">&gt;&gt;&gt; string = <span class="string">"<span class="variable">$&#123;func(3, 5)&#125;</span>"</span></div><div class="line">&gt;&gt;&gt; matched = re.match(regex, string)</div><div class="line">&gt;&gt;&gt; matched.group(1)</div><div class="line"><span class="string">'func'</span></div><div class="line">&gt;&gt;&gt; matched.group(2)</div><div class="line"><span class="string">'3, 5'</span></div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; string = <span class="string">"<span class="variable">$&#123;func(a=1, b=2)&#125;</span>"</span></div><div class="line">&gt;&gt;&gt; matched = re.match(regex, string)</div><div class="line">&gt;&gt;&gt; matched.group(1)</div><div class="line"><span class="string">'func'</span></div><div class="line">&gt;&gt;&gt; matched.group(2)</div><div class="line"><span class="string">'a=1, b=2'</span></div></pre></td></tr></table></figure>
<p>可以看出，通过如上正则表达式，如果满足匹配条件，那么<code>matched.group(1)</code>就是函数的名称，<code>matched.group(2)</code>就是函数的参数。</p>
<p>思路是完全可行的，不过我们在匹配参数部分的时候是采用<code>.*</code>的形式，也就是任意字符匹配，匹配的方式不是很严谨。考虑到正常的函数参数部分可能使用到的字符，我们可以采用如下更严谨的正则表达式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r&quot;^\$\&#123;(\w+)\(([\$\w =,]*)\)\&#125;$&quot;</div></pre></td></tr></table></figure>
<p>这里限定了五种可能用到的字符，<code>\w</code>代表任意字母或数字，<code>= ,</code>代表的是等号、空格和逗号，这些都是参数中可能用到的。而<code>\$</code>符号，大家应该还记得，这也是我们设计采用的变量转义符，<code>$var</code>将不再代表的是普遍的字符串，而是<code>var</code>变量的值。</p>
<p>有了这个基础，实现如下<code>is_functon</code>函数，就可以判断某个字符串是否为函数调用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function_regexp = re.compile(<span class="string">r"^\$\&#123;(\w+)\(([\$\w =,]*)\)\&#125;$"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_functon</span><span class="params">(content)</span>:</span></div><div class="line">    matched = function_regexp.match(content)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> matched <span class="keyword">else</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>不过这里还有一个问题。通过上面的正则表达式，是可以将函数名称和参数部分拆分开了，但是在参数部分，还没法区分具体的参数类型。</p>
<p>例如，在前面的例子中，从<code>${func(3, 5)}</code>解析出来的参数为<code>3, 5</code>，从<code>${func(a=1, b=2)}</code>解析出来的参数为<code>a=1, b=2</code>，我们通过肉眼可以识别出这分别对应着顺序参数和字典参数两种类型，但是程序就没法自动识别了，毕竟对于程序来说它们都只是字符串而已。</p>
<p>所以，这里还需要再做一步操作，就是将参数字符串解析为对程序友好的形式。</p>
<p>什么叫对程序友好的形式呢？这里就又要用到<a href="http://debugtalk.com/post/ApiTestEngine-3-define-functions-in-yaml-testcases/">上一篇文章</a>讲到的可变参数和关键字参数形式了，也就是<code>func(*args, **kwargs)</code>的形式。</p>
<p>试想，如果我们可以将所有顺序参数都转换为<code>args</code>列表，将所有字典参数都转换为<code>kwargs</code>字典，那么对于任意函数类型，我们都可以采用<code>func(*args, **kwargs)</code>的调用形式。</p>
<p>于是，问题就转换为，如何将参数部分转换为<code>args</code>和<code>kwargs</code>两部分。</p>
<p>这就比较简单了。因为在函数的参数部分，顺序参数必须位于字典参数前面，并且以逗号间隔；而字典参数呢，总是以<code>key=value</code>的形式出现，并且也以逗号间隔。</p>
<p>那么我们就可以利用参数部分的这个特征，来进行字符串的处理。处理算法如下：</p>
<ul>
<li>采用逗号作为分隔符将字符串进行拆分；</li>
<li>对每一部分进行判断，如果不包含等号，那么就是顺序参数，将其加入（<code>append</code>）到<code>args</code>列表；</li>
<li>如果包含等号，那么就是字典参数，采用等号作为分隔符进行进一步拆分得到<code>key-value</code>键值对，然后再加入到<code>kwargs</code>字典。</li>
</ul>
<p>对应的<code>Python</code>代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_function</span><span class="params">(content)</span>:</span></div><div class="line">    function_meta = &#123;</div><div class="line">        <span class="string">"args"</span>: [],</div><div class="line">        <span class="string">"kwargs"</span>: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    matched = function_regexp.match(content)</div><div class="line">    function_meta[<span class="string">"func_name"</span>] = matched.group(<span class="number">1</span>)</div><div class="line"></div><div class="line">    args_str = matched.group(<span class="number">2</span>).replace(<span class="string">" "</span>, <span class="string">""</span>)</div><div class="line">    <span class="keyword">if</span> args_str == <span class="string">""</span>:</div><div class="line">        <span class="keyword">return</span> function_meta</div><div class="line"></div><div class="line">    args_list = args_str.split(<span class="string">','</span>)</div><div class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args_list:</div><div class="line">        <span class="keyword">if</span> <span class="string">'='</span> <span class="keyword">in</span> arg:</div><div class="line">            key, value = arg.split(<span class="string">'='</span>)</div><div class="line">            function_meta[<span class="string">"kwargs"</span>][key] = parse_string_value(value)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            function_meta[<span class="string">"args"</span>].append(parse_string_value(arg))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> function_meta</div></pre></td></tr></table></figure>
<p>可以看出，通过<code>parse_function</code>函数，可以将一个函数调用的字符串转换为函数的结构体。</p>
<p>例如，<code>${func(1, 2, a=3, b=4)}</code>字符串，经过<code>parse_function</code>转换后，就可以得到该函数的名称和参数信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function_meta = &#123;</div><div class="line">    'func_name': 'func',</div><div class="line">    'args': [1, 2],</div><div class="line">    'kwargs': &#123;'a':3, 'b':4&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这也就彻底解决了第二个需求点。</p>
<h2 id="实现函数的调用"><a href="#实现函数的调用" class="headerlink" title="实现函数的调用"></a>实现函数的调用</h2><p>在此基础上，我们再看第三个需求点，如何使用函数名称和参数实现对应函数的调用，其实也就很简单了。</p>
<p>在<a href="http://debugtalk.com/post/ApiTestEngine-3-define-functions-in-yaml-testcases/">上一篇文章</a>中，我们实现了对函数的定义，并且将所有定义好的函数都添加到了一个字典当中，假如字典名称为<code>custom_functions_dict</code>，那么根据以上的函数信息（<code>function_meta</code>），就可以采用如下方式进行调用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">func_name = function_meta[<span class="string">'func_name'</span>]</div><div class="line">args = function_meta[<span class="string">'args'</span>]</div><div class="line">kwargs = function_meta[<span class="string">'kwargs'</span>]</div><div class="line">custom_functions_dict[func_name]](*args, **kwargs)</div></pre></td></tr></table></figure>
<p>具体的，在<code>ApiTestEngine</code>中对应的<code>Python</code>代码片段如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_eval_value</span><span class="params">(self, data)</span>:</span></div><div class="line">   <span class="string">""" evaluate data recursively, each variable in data will be evaluated.</span></div><div class="line">   """</div><div class="line">   <span class="keyword">if</span> isinstance(data, (list, tuple)):</div><div class="line">       <span class="keyword">return</span> [self.get_eval_value(item) <span class="keyword">for</span> item <span class="keyword">in</span> data]</div><div class="line"></div><div class="line">   <span class="keyword">if</span> isinstance(data, dict):</div><div class="line">       evaluated_data = &#123;&#125;</div><div class="line">       <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</div><div class="line">           evaluated_data[key] = self.get_eval_value(value)</div><div class="line"></div><div class="line">       <span class="keyword">return</span> evaluated_data</div><div class="line"></div><div class="line">   <span class="keyword">if</span> isinstance(data, (int, float)):</div><div class="line">       <span class="keyword">return</span> data</div><div class="line"></div><div class="line">   <span class="comment"># data is in string format here</span></div><div class="line">   data = <span class="string">""</span> <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> data.strip()</div><div class="line">   <span class="keyword">if</span> utils.is_variable(data):</div><div class="line">       <span class="comment"># variable marker: $var</span></div><div class="line">       variable_name = utils.parse_variable(data)</div><div class="line">       value = self.testcase_variables_mapping.get(variable_name)</div><div class="line">       <span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">           <span class="keyword">raise</span> exception.ParamsError(</div><div class="line">               <span class="string">"%s is not defined in bind variables!"</span> % variable_name)</div><div class="line">       <span class="keyword">return</span> value</div><div class="line"></div><div class="line">   <span class="keyword">elif</span> utils.is_functon(data):</div><div class="line">       <span class="comment"># function marker: $&#123;func(1, 2, a=3, b=4)&#125;</span></div><div class="line">       fuction_meta = utils.parse_function(data)</div><div class="line">       func_name = fuction_meta[<span class="string">'func_name'</span>]</div><div class="line">       args = fuction_meta.get(<span class="string">'args'</span>, [])</div><div class="line">       kwargs = fuction_meta.get(<span class="string">'kwargs'</span>, &#123;&#125;)</div><div class="line">       args = self.get_eval_value(args)</div><div class="line">       kwargs = self.get_eval_value(kwargs)</div><div class="line">       <span class="keyword">return</span> self.testcase_config[<span class="string">"functions"</span>][func_name](*args, **kwargs)</div><div class="line">   <span class="keyword">else</span>:</div><div class="line">       <span class="keyword">return</span> data</div></pre></td></tr></table></figure>
<p>这里还用到了递归的概念，当参数是变量（例如<code>gen_md5($TOKEN, $json, $random)</code>），或者为列表、字典等嵌套类型时，也可以实现正常的解析。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此为止，我们就解决了测试用例（<code>YAML/JSON</code>）中实现<code>Python</code>函数定义和调用的问题。</p>
<p>还记得<a href="http://debugtalk.com/post/ApiTestEngine-2-best-testcase-description/">《探索优雅的测试用例描述方式》</a>末尾提到的用例模板引擎技术实现的三大块内容么？</p>
<ul>
<li>如何在用例描述（<code>YAML/JSON</code>）中实现函数的定义和调用</li>
<li>如何在用例描述中实现参数的定义和引用，包括用例内部和用例集之间</li>
<li>如何在用例描述中实现预期结果的描述和测试结果的校验</li>
</ul>
<p>第一块总算是讲完了，下一篇文章将开始讲解如何在用例描述中实现参数的定义和引用的问题。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="http://debugtalk.com/post/ApiTestEngine-2-best-testcase-description/">《ApiTestEngine 演进之路（2）探索优雅的测试用例描述方式》</a></li>
<li><a href="http://debugtalk.com/post/ApiTestEngine-3-define-functions-in-yaml-testcases/">《ApiTestEngine 演进之路（3）测试用例中实现<code>Python</code>函数的定义》</a></li>
<li><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code> GitHub源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://debugtalk.com/post/ApiTestEngine-3-define-functions-in-yaml-testcases/&quot;&gt;《测试用例中实现&lt;code&gt;Python&lt;/code&gt;函数的定义》&lt;/a&gt;中，介绍了在&lt;code
    
    </summary>
    
    
      <category term="Python" scheme="http://debugtalk.com/tags/Python/"/>
    
      <category term="自动化测试" scheme="http://debugtalk.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试框架" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ApiTestEngine" scheme="http://debugtalk.com/tags/ApiTestEngine/"/>
    
  </entry>
  
  <entry>
    <title>ApiTestEngine 演进之路（3）测试用例中实现 Python 函数的定义</title>
    <link href="http://debugtalk.com/post/ApiTestEngine-3-define-functions-in-yaml-testcases/"/>
    <id>http://debugtalk.com/post/ApiTestEngine-3-define-functions-in-yaml-testcases/</id>
    <published>2017-07-10T16:00:00.000Z</published>
    <updated>2017-07-23T14:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://debugtalk.com/post/ApiTestEngine-2-best-testcase-description/">《ApiTestEngine 演进之路（2）探索优雅的测试用例描述方式》</a>中，我们臆想了一种简洁优雅的用例描述方式，接下来，我们就从技术实现的角度，逐项进行深入讲解，将臆想变成现实。</p>
<p>本文先解决第一个问题，“如何在用例描述（<code>YAML/JSON</code>）中实现函数的定义和调用”。</p>
<blockquote>
<p>在写作的过程中，发现要将其中的原理阐述清楚，要写的内容实在是太多，因此将问题再拆分为“函数定义”和“函数调用”两部分，本文只讲解“函数定义”部分的内容。</p>
</blockquote>
<h2 id="实现函数的定义"><a href="#实现函数的定义" class="headerlink" title="实现函数的定义"></a>实现函数的定义</h2><p>在之前，我们假设存在<code>gen_random_string</code>这样一个生成指定位数随机字符串的函数，以及<code>gen_md5</code>这样一个计算签名校验值的函数，我们不妨先尝试通过<code>Python</code>语言进行具体的实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_random_string</span><span class="params">(str_len)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(</div><div class="line">        random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(str_len))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_md5</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">return</span> hashlib.md5(<span class="string">""</span>.join(args).encode(<span class="string">'utf-8'</span>)).hexdigest()</div><div class="line"></div><div class="line">gen_random_string(<span class="number">5</span>) <span class="comment"># =&gt; A2dEx</span></div><div class="line"></div><div class="line">TOKEN = <span class="string">"debugtalk"</span></div><div class="line">data = <span class="string">'&#123;"name": "user", "password": "123456"&#125;'</span></div><div class="line">random = <span class="string">"A2dEx"</span></div><div class="line">gen_md5(TOKEN, data, random) <span class="comment"># =&gt; a83de0ff8d2e896dbd8efb81ba14e17d</span></div></pre></td></tr></table></figure>
<p>熟悉<code>Python</code>语言的人对以上代码应该都不会有理解上的难度。可能部分新接触<code>Python</code>的同学对<code>gen_md5</code>函数的<code>*args</code>传参方式会比较陌生，我也简单地补充下基础知识。</p>
<p>在<code>Python</code>中，函数参数共有四种，必选参数、默认参数、可变参数和关键字参数。</p>
<p>必选参数和默认参数大家应该都很熟悉，绝大多数编程语言里面都有类似的概念。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y, a=<span class="number">1</span>, b=<span class="number">2</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y + a + b</div><div class="line"></div><div class="line">func(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># =&gt; 6</span></div><div class="line">func(<span class="number">1</span>, <span class="number">2</span>, b=<span class="number">3</span>) <span class="comment"># =&gt; 7</span></div></pre></td></tr></table></figure>
<p>在上面例子中，<code>x</code>和<code>y</code>是必选参数，<code>a</code>和<code>b</code>是默认参数。除了显示地定义必选参数和默认参数，我们还可以通过使用可变参数和关键字参数的形式，实现更灵活的函数参数定义。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum(args) + sum(kwargs.values())</div><div class="line"></div><div class="line">args = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">kwargs = &#123;<span class="string">'a'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">4</span>&#125;</div><div class="line">func(*args, **kwargs) <span class="comment"># =&gt; 10</span></div><div class="line"></div><div class="line">args = []</div><div class="line">kwargs = &#123;<span class="string">'a'</span>:<span class="number">3</span>, <span class="string">'b'</span>:<span class="number">4</span>, <span class="string">'c'</span>: <span class="number">5</span>&#125;</div><div class="line">func(*args, **kwargs) <span class="comment"># =&gt; 12</span></div></pre></td></tr></table></figure>
<p>之所以说更灵活，是因为当使用可变参数和关键字参数时（<code>func(*args, **kwargs)</code>），我们在调用函数时就可以传入0个或任意多个必选参数和默认参数，所有必选参数将作为<code>tuple/list</code>的形式传给可变参数（<code>args</code>），并将所有默认参数作为<code>dict</code>的形式传给关键字参数（<code>kwargs</code>）。另外，可变参数和关键字参数也并不是要同时使用，只使用一种也是可以的。</p>
<p>在前面定义的<code>gen_md5(*args)</code>函数中，我们就可以将任意多个字符串传入，然后得到拼接字符串的<code>MD5</code>值。</p>
<p>现在再回到测试用例描述文件，由于是纯文本格式（<code>YAML/JSON</code>），我们没法直接写<code>Python</code>代码，那要怎样才能定义函数呢？</p>
<p>之前接触过一些函数式编程，所以我首先想到的是借助<code>lambda</code>实现匿名函数。如果对函数式编程不了解，可以看下我之前写过的一篇文章，<a href="http://debugtalk.com/post/python-functional-programming-getting-started/">《Python的函数式编程–从入门到⎡放弃⎦》</a>。</p>
<h2 id="方法一：通过lambda实现函数定义"><a href="#方法一：通过lambda实现函数定义" class="headerlink" title="方法一：通过lambda实现函数定义"></a>方法一：通过lambda实现函数定义</h2><p>使用<code>lambda</code>有什么好处呢？</p>
<p>最简单直接的一点，通过<code>lambda</code>关键字，我们可以将函数写到一行里面。例如，同样是前面提到的<code>gen_random_string</code>函数和<code>gen_md5</code>函数，通过<code>lambda</code>的实现方式就是如下的形式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gen_random_string = <span class="keyword">lambda</span> str_len: <span class="string">''</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(str_len))</div><div class="line">gen_md5 = <span class="keyword">lambda</span> *str_args: hashlib.md5(<span class="string">''</span>.join(str_args).encode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">gen_random_string(<span class="number">5</span>) <span class="comment"># =&gt; A2dEx</span></div><div class="line"></div><div class="line">TOKEN = <span class="string">"debugtalk"</span></div><div class="line">data = <span class="string">'&#123;"name": "user", "password": "123456"&#125;'</span></div><div class="line">random = <span class="string">"A2dEx"</span></div><div class="line">gen_md5(TOKEN, data, random) <span class="comment"># =&gt; a83de0ff8d2e896dbd8efb81ba14e17d</span></div></pre></td></tr></table></figure>
<p>可以看出，采用<code>lambda</code>定义的函数跟之前的函数功能完全一致，调用方式相同，运算结果也完全一样。</p>
<p>然后，我们在测试用例里面，通过新增一个<code>function_binds</code>模块，就可以将函数定义与函数名称绑定了。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- test:</span></div><div class="line"><span class="attr">    name:</span> create user which does not exist</div><div class="line"><span class="attr">    function_binds:</span></div><div class="line"><span class="attr">        gen_random_string:</span> <span class="string">"lambda str_len: ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(str_len))"</span></div><div class="line"><span class="attr">        gen_md5:</span> <span class="string">"lambda *str_args: hashlib.md5(''.join(str_args).encode('utf-8'))</span></div><div class="line">    variable_binds:</div><div class="line">        - TOKEN: debugtalk</div><div class="line">        - random: $&#123;gen_random_string(5)&#125;</div><div class="line">        - json: &#123;"name<span class="string">": "</span>user<span class="string">", "</span>password<span class="string">": "</span><span class="number">123456</span><span class="string">"&#125;</span></div><div class="line">        - authorization: $&#123;gen_md5($TOKEN, $json, $random)&#125;</div></pre></td></tr></table></figure>
<p>可能有些同学还是无法理解，在上面<code>YAML</code>文件中，即使将函数定义与函数名称绑定了，但是加载<code>YAML</code>文件后，函数名称对应的值也只是一个字符串而已，这还是没法运行啊。</p>
<p>这就又要用到<code>eval</code>黑科技了。通过<code>eval</code>函数，可以执行字符串表达式，并返回表达式的值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gen_random_string = <span class="string">"lambda str_len: ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(str_len))"</span></div><div class="line"></div><div class="line">func = eval(gen_random_string)</div><div class="line"></div><div class="line">func <span class="comment"># =&gt; &lt;function &lt;lambda&gt; at 0x10e19a398&gt;</span></div><div class="line">func(<span class="number">5</span>) <span class="comment"># =&gt; "A2dEx"</span></div></pre></td></tr></table></figure>
<p>在上面的代码中，<code>gen_random_string</code>为<code>lambda</code>字符串表达式，通过<code>eval</code>执行后，就转换为一个函数对象，然后就可以像正常定义的函数一样调用了。</p>
<p>如果你看到这里还没有疑问，那么说明你肯定没有亲自实践。事实上，上面执行<code>func(5)</code>的时候并不会返回预期结果，而是会抛出如下异常。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; func(5)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;lambda&gt;</div><div class="line">  File <span class="string">"&lt;string&gt;"</span>, line 1, <span class="keyword">in</span> &lt;genexpr&gt;</div><div class="line">NameError: global name <span class="string">'random'</span> is not defined</div></pre></td></tr></table></figure>
<p>这是因为，我们在定义的<code>lambda</code>函数中，用到了<code>random</code>库，而在<code>lambda</code>表达式中，我们并没有<code>import random</code>。</p>
<p>这下麻烦了，很多时候我们的函数都要用到标准库或者第三方库，而在调用这些库函数之前，我们必须得先<code>import</code>。想来想去，这个<code>import</code>的操作都没法塞到<code>lambda</code>表达式中。</p>
<p>为了解决这个依赖库的问题，我想到两种方式。</p>
<p>第一种方式，在加载<code>YAML/JSON</code>用例之前，先统一将测试用例依赖的所有库都<code>import</code>一遍。这个想法很快就被否决了，因为这必须要在<code>ApiTestEngine</code>框架里面去添加这部分代码，而且每个项目的依赖库不一样，需要<code>import</code>的库也不一样，总不能为了解决这个问题，在框架初始化部分将所有的库都<code>import</code>吧？而且为了适配不同项目来改动测试框架的代码，也不是通用测试框架应有的做法。</p>
<p>然后我想到了第二种方式，就是在测试用例里面，通过新增一个<code>requires</code>模块，罗列出当前测试用例所有需要引用的库，然后在加载用例的时候通过代码动态地进行导入依赖库。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- test:</span></div><div class="line"><span class="attr">    name:</span> create user which does not exist</div><div class="line"><span class="attr">    requires:</span></div><div class="line"><span class="bullet">        -</span> random</div><div class="line"><span class="bullet">        -</span> string</div><div class="line"><span class="bullet">        -</span> hashlib</div><div class="line"><span class="attr">    function_binds:</span></div><div class="line"><span class="attr">        gen_random_string:</span> <span class="string">"lambda str_len: ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(str_len))"</span></div><div class="line"><span class="attr">        gen_md5:</span> <span class="string">"lambda *str_args: hashlib.md5(''.join(str_args).encode('utf-8'))</span></div><div class="line">    variable_binds:</div><div class="line">        - TOKEN: debugtalk</div><div class="line">        - random: $&#123;gen_random_string(5)&#125;</div><div class="line">        - json: &#123;"name<span class="string">": "</span>user<span class="string">", "</span>password<span class="string">": "</span><span class="number">123456</span><span class="string">"&#125;</span></div><div class="line">        - authorization: $&#123;gen_md5($TOKEN, $json, $random)&#125;</div></pre></td></tr></table></figure>
<p>动态地导入依赖库？其实也没有多玄乎，<code>Python</code>本身也支持这种特性。如果你看到这里感觉无法理解，那么我再补充点基础知识。</p>
<p>在<code>Python</code>中执行<code>import</code>时，实际上等价于执行<code>__import__</code>函数。</p>
<p>例如，<code>import random</code>等价于如下语句：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">random = __import__(<span class="string">'random'</span>, globals(), locals(), [], <span class="number">-1</span>)</div></pre></td></tr></table></figure>
<p>其中，<code>__import__</code>的函数定义为<code>__import__(name[, globals[, locals[, fromlist[, level]]]])</code>，第一个参数为库的名称，后面的参数暂不用管（可直接查看<a href="https://docs.python.org/3/library/functions.html#__import__" target="_blank" rel="external">官方文档</a>）。</p>
<p>由于后面的参数都有默认值，通常情况下我们采用默认值即可，因此我们也可以简化为如下形式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">random = __import__(<span class="string">'random'</span>)</div></pre></td></tr></table></figure>
<p>执行这个语句的有什么效果呢？</p>
<p>可能这也是大多数<code>Python</code>初学者都忽略的一个知识点。在<code>Python</code>运行环境中，有一个全局的环境变量，当我们定义一个函数，或者引入一个依赖库时，实际上就是将其对象添加到了全局的环境变量中。</p>
<p>这个全局的环境变量就是<code>globals()</code>，它是一个字典类型的数据结构。要验证以上知识点，我们可以在<code>Python</code>的交互终端中进行如下实验。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; <span class="function"><span class="title">globals</span></span>()</div><div class="line">&#123;<span class="string">'__name__'</span>: <span class="string">'__main__'</span>, <span class="string">'__doc__'</span>: None, <span class="string">'__package__'</span>: None, <span class="string">'__loader__'</span>: &lt;class <span class="string">'_frozen_importlib.BuiltinImporter'</span>&gt;, <span class="string">'__spec__'</span>: None, <span class="string">'__annotations__'</span>: &#123;&#125;, <span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-in)&gt;&#125;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; import random</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; <span class="function"><span class="title">globals</span></span>()</div><div class="line">&#123;<span class="string">'__name__'</span>: <span class="string">'__main__'</span>, <span class="string">'__doc__'</span>: None, <span class="string">'__package__'</span>: None, <span class="string">'__loader__'</span>: &lt;class <span class="string">'_frozen_importlib.BuiltinImporter'</span>&gt;, <span class="string">'__spec__'</span>: None, <span class="string">'__annotations__'</span>: &#123;&#125;, <span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-in)&gt;, <span class="string">'random'</span>: &lt;module <span class="string">'random'</span> from <span class="string">'/Users/Leo/.pyenv/versions/3.6.0/lib/python3.6/random.py'</span>&gt;&#125;</div></pre></td></tr></table></figure>
<p>可以看出，在执行<code>import random</code>命令后，<code>globals()</code>中就新增了<code>random</code>函数的引用。</p>
<p>因此，导入<code>random</code>依赖库时，我们采用如下的写法也是等价的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">module_name = ”random“</div><div class="line">globals()[module_name] = __import__(module_name)</div></pre></td></tr></table></figure>
<p>更进一步，<code>__import__</code>作为<code>Python</code>的底层函数，其实是不推荐直接调用的。要实现同样的功能，推荐使用<code>importlib.import_module</code>。替换后就变成了如下形式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">module_name = ”random“</div><div class="line">globals()[module_name] = importlib.import_module(module_name)</div></pre></td></tr></table></figure>
<p>如果理解了以上的知识点，那么再给我们一个依赖库名称（字符串形式）的列表时，我们就可以实现动态的导入（<code>import</code>）了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_requires</span><span class="params">(modules)</span>:</span></div><div class="line">   <span class="string">""" import required modules dynamicly</span></div><div class="line">   """</div><div class="line">   <span class="keyword">for</span> module_name <span class="keyword">in</span> modules:</div><div class="line">       globals()[module_name] = importlib.import_module(module_name)</div></pre></td></tr></table></figure>
<p>在实现了定义<code>lambda</code>函数的<code>function_binds</code>和导入依赖库的<code>requires</code>模块之后，我们就可以在<code>YAML/JSON</code>中灵活地描述测试用例了。</p>
<p>还是之前的例子，完整的测试用例描述形式就为如下样子。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- test:</span></div><div class="line"><span class="attr">    name:</span> create user which does not exist</div><div class="line"><span class="attr">    requires:</span></div><div class="line"><span class="bullet">        -</span> random</div><div class="line"><span class="bullet">        -</span> string</div><div class="line"><span class="bullet">        -</span> hashlib</div><div class="line"><span class="attr">    function_binds:</span></div><div class="line"><span class="attr">        gen_random_string:</span> <span class="string">"lambda str_len: ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(str_len))"</span></div><div class="line"><span class="attr">        gen_md5:</span> <span class="string">"lambda *str_args: hashlib.md5(''.join(str_args).encode('utf-8')).hexdigest()"</span></div><div class="line"><span class="attr">    variable_binds:</span></div><div class="line"><span class="attr">        - TOKEN:</span> debugtalk</div><div class="line"><span class="attr">        - random:</span> $&#123;gen_random_string(<span class="number">5</span>)&#125;</div><div class="line"><span class="attr">        - data:</span> <span class="string">'&#123;"name": "user", "password": "123456"&#125;'</span></div><div class="line"><span class="attr">        - authorization:</span> $&#123;gen_md5($TOKEN, $data, $random)&#125;</div><div class="line"><span class="attr">    request:</span></div><div class="line"><span class="attr">        url:</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/api/users/<span class="number">1000</span></div><div class="line"><span class="attr">        method:</span> POST</div><div class="line"><span class="attr">        headers:</span></div><div class="line"><span class="attr">            Content-Type:</span> application/json</div><div class="line"><span class="attr">            authorization:</span> $authorization</div><div class="line"><span class="attr">            random:</span> $random</div><div class="line"><span class="attr">        data:</span> $data</div><div class="line"><span class="attr">    validators:</span></div><div class="line"><span class="bullet">        -</span> &#123;<span class="string">"check"</span>: <span class="string">"status_code"</span>, <span class="string">"comparator"</span>: <span class="string">"eq"</span>, <span class="string">"expected"</span>: <span class="number">201</span>&#125;</div><div class="line"><span class="bullet">        -</span> &#123;<span class="string">"check"</span>: <span class="string">"content.success"</span>, <span class="string">"comparator"</span>: <span class="string">"eq"</span>, <span class="string">"expected"</span>: <span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<p>现在我们可以在<code>YAML/JSON</code>文本中⎡灵活⎦地定义函数，实现各种功能了。</p>
<p>可是，这真的是我们期望的样子么？</p>
<p>开始的时候，我们想在自动化测试中将<code>测试数据</code>与<code>代码实现</code>进行分离，于是我们引入了<code>YAML/JSON</code>格式的用例形式；为了在<code>YAML/JSON</code>文本格式中实现签名校验等计算功能，我们又引入了<code>function_binds</code>模块，并通过<code>lambda</code>定义函数并与函数名进行绑定；再然后，为了解决定义函数中的依赖库问题，我们又引入了<code>requires</code>模块，动态地加载指定的依赖库。</p>
<p>而且即使是这样，这种方式也有一定的局限性，当函数较复杂的时候，我们很难将函数内容转换为<code>lambda</code>表达式；虽然理论上所有的函数都能转换为<code>lamda</code>表达式，但是实现的难度会非常高。</p>
<p>为了不写代码而人为引入了更多更复杂的概念和技术，这已经不再符合我们的初衷了。于是，我开始重新寻找新的实现方式。</p>
<h2 id="方法二：自定义函数模块并进行导入"><a href="#方法二：自定义函数模块并进行导入" class="headerlink" title="方法二：自定义函数模块并进行导入"></a>方法二：自定义函数模块并进行导入</h2><p>让我们再回归基础概念，当我们调用一个函数的时候，究竟发生了什么？</p>
<p>简单的说，不管是调用一个函数，还是引用一个变量，都会在当前的运行环境上下文（<code>context</code>）中寻找已经定义好的函数或变量。而在<code>Python</code>中，当我们加载一个模块（<code>module</code>）的时候，就会将该模块中的所有函数、变量、类等对象加载进当前的运行环境上下文。</p>
<p>如果单纯地看这个解释还不清楚，想必大家应该都见过如下案例的形式。假设<code>moduleA</code>模块包含如下定义：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># moduleA</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"hello, %s"</span> % name</div><div class="line"></div><div class="line">varA = <span class="string">"I am varA"</span></div></pre></td></tr></table></figure>
<p>那么，我们就可以通过如下方式导入<code>moduleA</code>模块中所有内容，并且直接调用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> moduleA <span class="keyword">import</span> *</div><div class="line"></div><div class="line">print(hello(<span class="string">"debugtalk"</span>)) <span class="comment"># =&gt; hello, debugtalk</span></div><div class="line">print(varA) <span class="comment"># =&gt; I am varA</span></div></pre></td></tr></table></figure>
<p>明确这一点后，既然我们之前都可以动态地导入（<code>import</code>）依赖库，那么我们不妨再进一步，我们同样也可以动态地导入已经定义好的函数啊。</p>
<p>只要我们先在一个<code>Python</code>模块文件中定义好测试用例所需的函数，然后在运行测试用例的时候设法将模块中的所有函数导入即可。</p>
<p>于是，问题就转换为，如何在<code>YAML/JSON</code>中实现<code>from moduleA import *</code>机制。</p>
<p>经过摸索，我发现了<code>Python</code>的<a href="https://docs.python.org/3/library/functions.html#vars" target="_blank" rel="external"><code>vars</code>函数</a>，这也是<code>Python</code>的<code>Built-in Functions</code>之一。</p>
<p>对于<code>vars</code>，官方的定义如下：</p>
<blockquote>
<p>Return the <code>__dict__</code> attribute for a module, class, instance, or any other object with a <code>__dict__</code> attribute.</p>
</blockquote>
<p>简言之，就是<code>vars()</code>可以将模块（<code>module</code>）、类（<code>class</code>）、实例（<code>instance</code>）或者任意对象的所有属性（包括但不限于定义的方法和变量），以字典的形式返回。</p>
<p>还是前面举例的<code>moduelA</code>，相信大家看完下面这个例子就清晰了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import moduleA</div><div class="line">&gt;&gt;&gt; vars(moduleA)</div><div class="line">&gt;&gt;&gt; &#123;<span class="string">'hello'</span>: &lt;<span class="keyword">function</span> hello at 0x1072fcd90&gt;, <span class="string">'varA'</span>: <span class="string">'I am varA'</span>&#125;</div></pre></td></tr></table></figure>
<p>掌握了这一层理论基础，我们就可以继续改造我们的测试框架了。</p>
<p>我采取的做法是，在测试用例中新增一个<code>import_module_functions</code>模块，里面可填写多个模块的路径。而测试用例中所有需要使用的函数，都定义在对应路径的模块中。</p>
<p>我们再回到之前的案例，在测试用例中需要用到<code>gen_random_string</code>和<code>gen_md5</code>这两个函数函数，那么就可以将其定义在一个模块中，假设模块名称为<code>custom_functions.py</code>，相对于项目根目录的路径为<code>tests/data/custom_functions.py</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_random_string</span><span class="params">(str_len)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(</div><div class="line">        random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(str_len))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_md5</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">return</span> hashlib.md5(<span class="string">""</span>.join(args).encode(<span class="string">'utf-8'</span>)).hexdigest()</div></pre></td></tr></table></figure>
<p>需要注意的是，这里的模块文件可以放置在系统的任意路径下，但是一定要保证它可作为<code>Python</code>的模块进行访问，也就是说在该文件的所有父目录中，都包含<code>__init__.py</code>文件。这是<code>Python</code>的语法要求，如不理解可查看官方文档。</p>
<p>然后，在<code>YAML/JSON</code>测试用例描述的<code>import_module_functions</code>栏目中，我们就可以写为<code>tests.data.custom_functions</code>。</p>
<p>新的用例描述形式就变成了如下样子。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- test:</span></div><div class="line"><span class="attr">    name:</span> create user which does not exist</div><div class="line"><span class="attr">    import_module_functions:</span></div><div class="line"><span class="bullet">        -</span> tests.data.custom_functions</div><div class="line"><span class="attr">    variable_binds:</span></div><div class="line"><span class="attr">        - TOKEN:</span> debugtalk</div><div class="line"><span class="attr">        - json:</span> &#123;<span class="string">"name"</span>: <span class="string">"user"</span>, <span class="string">"password"</span>: <span class="string">"123456"</span>&#125;</div><div class="line"><span class="attr">        - random:</span> $&#123;gen_random_string(<span class="number">5</span>)&#125;</div><div class="line"><span class="attr">        - authorization:</span> $&#123;gen_md5($TOKEN, $json, $random)&#125;</div><div class="line"><span class="attr">    request:</span></div><div class="line"><span class="attr">        url:</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/api/users/<span class="number">1000</span></div><div class="line"><span class="attr">        method:</span> POST</div><div class="line"><span class="attr">        headers:</span></div><div class="line"><span class="attr">            Content-Type:</span> application/json</div><div class="line"><span class="attr">            authorization:</span> $authorization</div><div class="line"><span class="attr">            random:</span> $random</div><div class="line"><span class="attr">        json:</span> $json</div><div class="line"><span class="attr">    validators:</span></div><div class="line"><span class="bullet">        -</span> &#123;<span class="string">"check"</span>: <span class="string">"status_code"</span>, <span class="string">"comparator"</span>: <span class="string">"eq"</span>, <span class="string">"expected"</span>: <span class="number">201</span>&#125;</div><div class="line"><span class="bullet">        -</span> &#123;<span class="string">"check"</span>: <span class="string">"content.success"</span>, <span class="string">"comparator"</span>: <span class="string">"eq"</span>, <span class="string">"expected"</span>: <span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<p>现在函数已经定义好了，那是怎样实现动态加载的呢？</p>
<p>首先，还是借助于<code>importlib.import_module</code>，实现模块的导入。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imported = importlib.import_module(module_name)</div></pre></td></tr></table></figure>
<p>然后，借助于<code>vars</code>函数，可以获取得到模块的所有属性，也就是其中定义的方法、变量等对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vars(imported)</div></pre></td></tr></table></figure>
<p>不过，由于我们只需要定义的函数，因此我们还可以通过进行过滤，只获取模块中的所有方法对象。当然，这一步不是必须的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imported_functions_dict = dict(filter(is_function, vars(imported).items()))</div></pre></td></tr></table></figure>
<p>其中，<code>is_function</code>是一个检测指定对象是否为方法的函数，实现形式如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> types</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_function</span><span class="params">(tup)</span>:</span></div><div class="line">    <span class="string">""" Takes (name, object) tuple, returns True if it is a function.</span></div><div class="line">    """</div><div class="line">    name, item = tup</div><div class="line">    <span class="keyword">return</span> isinstance(item, types.FunctionType)</div></pre></td></tr></table></figure>
<p>通过以上代码，就实现了从指定外部模块加载所有方法的功能。完整的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_module_functions</span><span class="params">(self, modules, level=<span class="string">"testcase"</span>)</span>:</span></div><div class="line">   <span class="string">""" import modules and bind all functions within the context</span></div><div class="line">   """</div><div class="line">   <span class="keyword">for</span> module_name <span class="keyword">in</span> modules:</div><div class="line">       imported = importlib.import_module(module_name)</div><div class="line">       imported_functions_dict = dict(filter(is_function, vars(imported).items()))</div><div class="line">       self.__update_context_config(level, <span class="string">"functions"</span>, imported_functions_dict)</div></pre></td></tr></table></figure>
<p>结合到实际项目，我们就可以采取这种协作模式：</p>
<ul>
<li>由测试开发或者开发人员将项目中所有依赖的逻辑实现为函数方法，统一放置到一个模块中；</li>
<li>在<code>YAML/JSON</code>测试用例中，对模块进行引用；（对于测试用例集的模式，只需要引用一次，以后再详细讲解）</li>
<li>业务测试人员只需要关注接口的业务数据字段，设计测试用例即可。</li>
</ul>
<p>可以看出，这也算是软件工程和实际项目中的一种权衡之计，但好处在于能充分发挥各岗位角色人员的职能，有助于接口测试自动化工作的顺利开展。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了在<code>YAML/JSON</code>测试用例中实现<code>Python</code>函数定义的两种方法：</p>
<ul>
<li>通过<code>lambda</code>实现函数的定义：该种方式适用于函数比较简单的情况，并且函数最好没有依赖库；虽然复杂的函数也能采用这种方式进行定义，但可能会存在一定的局限性，而且看上去也比较累赘。</li>
<li>自定义函数模块并进行导入：该种方式通用性更强，所有类型的函数都可以通过这种方式进行定义和引用；但由于需要编写额外的<code>Python</code>模块文件，在函数比较简单的情况下反而会显得较为繁琐，此时采用<code>lambda</code>形式会更简洁。</li>
</ul>
<p>到现在为止，我们已经清楚了如何在<code>YAML/JSON</code>测试用例中实现函数的定义，但是在<code>YAML/JSON</code>文本中要怎样实现函数的调用和传参呢？</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">variable_binds:</span></div><div class="line"><span class="attr">   - TOKEN:</span> debugtalk</div><div class="line"><span class="attr">   - json:</span> &#123;&#125;</div><div class="line"><span class="attr">   - random:</span> $&#123;gen_random_string(<span class="number">5</span>)&#125;</div><div class="line"><span class="attr">   - authorization:</span> $&#123;gen_md5($TOKEN, $json, $random)&#125;</div></pre></td></tr></table></figure>
<p>例如上面的例子（YAML格式），<code>gen_random_string</code>和<code>gen_md5</code>都是已经定义好的函数，但<code>${gen_random_string(5)}</code>和<code>${gen_md5($TOKEN, $json, $random)}</code>终究只是文本字符串，程序是如何将其解析为真实的函数和参数，并实现调用的呢？</p>
<p>下篇文章再详细讲解。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="http://debugtalk.com/post/python-functional-programming-getting-started/">《Python的函数式编程–从入门到⎡放弃⎦》</a></li>
<li><a href="http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/">《接口自动化测试的最佳工程实践（ApiTestEngine）》</a></li>
<li><a href="http://debugtalk.com/post/ApiTestEngine-2-best-testcase-description/">《ApiTestEngine 演进之路（2）探索优雅的测试用例描述方式》</a></li>
<li><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code> GitHub源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://debugtalk.com/post/ApiTestEngine-2-best-testcase-description/&quot;&gt;《ApiTestEngine 演进之路（2）探索优雅的测试用例描述方式》&lt;/a&gt;中，我们臆想了一种简洁优雅的用例描
    
    </summary>
    
    
      <category term="Python" scheme="http://debugtalk.com/tags/Python/"/>
    
      <category term="自动化测试" scheme="http://debugtalk.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试框架" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ApiTestEngine" scheme="http://debugtalk.com/tags/ApiTestEngine/"/>
    
      <category term="lambda" scheme="http://debugtalk.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>ApiTestEngine 演进之路（2）探索优雅的测试用例描述方式</title>
    <link href="http://debugtalk.com/post/ApiTestEngine-2-best-testcase-description/"/>
    <id>http://debugtalk.com/post/ApiTestEngine-2-best-testcase-description/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2017-07-08T02:38:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://debugtalk.com/post/ApiTestEngine-1-setup-basic-framework/">《ApiTestEngine 演进之路（1）搭建基础框架》</a>一文中，我们完成了<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>基础框架的搭建，并实现了简单接口的测试功能。</p>
<p>接下来，我们就针对复杂类型的接口（例如包含签名校验等机制），通过对接口的业务参数和技术细节进行分离，实现简洁优雅的接口测试用例描述。</p>
<h2 id="传统的测试用例编写方式"><a href="#传统的测试用例编写方式" class="headerlink" title="传统的测试用例编写方式"></a>传统的测试用例编写方式</h2><p>对于在自动化测试中将<code>测试数据</code>与<code>代码实现</code>进行分离的好处，我之前已经讲过多次，这里不再重复。</p>
<p>测试数据与代码实现分离后，简单的接口还好，测试用例编写不会有什么问题；但是当面对复杂一点的接口（例如包含签名校验等机制）时，我们编写自动化测试用例还是会比较繁琐。</p>
<p>我们从一个最常见的案例入手，看下编写自动化测试用例的过程，相信大家看完后就会对上面那段话有很深的感受。</p>
<p>以API接口服务（<code>Mock Server</code>）的创建新用户功能为例，该接口描述如下：</p>
<blockquote>
<p>请求数据：<br>Url: <a href="http://127.0.0.1:5000/api/users/1000" target="_blank" rel="external">http://127.0.0.1:5000/api/users/1000</a><br>Method: POST<br>Headers: {“content-type”: “application/json”, “Random”: “A2dEx”, “Authorization”: “47f135c33e858f2e3f55156ae9f78ee1”}<br>Body: {“name”: “user1”, “password”: “123456”}</p>
<p>预期的正常响应数据：<br>Status_Code: 201<br>Headers: {‘Date’: ‘Fri, 23 Jun 2017 07:05:41 GMT’, ‘Content-Length’: ‘54’, ‘Content-Type’: ‘application/json’, ‘Server’: ‘Werkzeug/0.12.2 Python/2.7.13’}<br>Body: {“msg”: “user created successfully.”, “success”: true, “uuid”: “JsdfwerL”}</p>
</blockquote>
<p>其中，请求<code>Headers</code>中的<code>Random</code>字段是一个5位长的随机字符串，<code>Authorization</code>字段是一个签名值，签名方式为<code>TOKEN+RequestBody+Random</code>拼接字符串的<code>MD5</code>值。更具体的，<code>RequestBody</code>要求字典的<code>Key</code>值按照由小到大的排序方式。接口请求成功后，返回的是一个<code>JSON</code>结构，里面的<code>success</code>字段标识请求成功与否的状态，如果成功，<code>uuid</code>字段标识新创建用户的唯一ID。</p>
<p>相信只要是接触过接口测试的同学对此应该都会很熟悉，这也是后台系统普遍采用的签名校验方式。在具体的系统中，可能字符串拼接方式或签名算法存在差异，但是模式基本上都是类似的。</p>
<p>那么面对这样一个接口，我们会怎样编写接口测试用例呢？</p>
<p>首先，请求的数据是要有的，我们会先准备一个可用的账号，例如<code>{&quot;password&quot;: &quot;123456&quot;, &quot;name&quot;: &quot;user1&quot;}</code>。</p>
<p>然后，由于接口存在签名校验机制，因此我们除了要知道服务器端使用的TOKEN（假设为<code>debugtalk</code>）外，还要准备好<code>Random</code>字段和<code>Authorization</code>字段。<code>Random</code>字段好说，我们随便生成一个，例如<code>A2dEx</code>；<code>Authorization</code>字段就会复杂不少，需要我们按照规定先将<code>RequestBody</code>根据字典的<code>Key</code>值进行排序，得到<code>{&quot;name&quot;: &quot;user1&quot;, &quot;password&quot;: &quot;123456&quot;}</code>，然后与<code>TOKEN</code>和<code>Random</code>字段拼接字符串得到<code>debugtalk{&quot;password&quot;: &quot;123456&quot;, &quot;name&quot;: &quot;user1&quot;}A2dEx</code>，接着再找一个<code>MD5</code>工具，计算得到签名值<code>a83de0ff8d2e896dbd8efb81ba14e17d</code>。</p>
<p>最后，我们才可以完成测试用例的编写。假如我们采用<code>YAML</code>编写测试用例，那么用例写好后应该就是如下样子。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-</span></div><div class="line"><span class="attr">    name:</span> create user which does not exist</div><div class="line"><span class="attr">    request:</span></div><div class="line"><span class="attr">        url:</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/api/users/<span class="number">1000</span></div><div class="line"><span class="attr">        method:</span> POST</div><div class="line"><span class="attr">        headers:</span></div><div class="line"><span class="attr">            Content-Type:</span> application/json</div><div class="line"><span class="attr">            authorization:</span> a83de0ff8d2e896dbd8efb81ba14e17d</div><div class="line"><span class="attr">            random:</span> A2dEx</div><div class="line"><span class="attr">    data:</span></div><div class="line"><span class="attr">        name:</span> user1</div><div class="line"><span class="attr">        password:</span> <span class="number">123456</span></div><div class="line"><span class="attr">    response:</span></div><div class="line"><span class="attr">        status_code:</span> <span class="number">201</span></div><div class="line"><span class="attr">        headers:</span></div><div class="line"><span class="attr">            Content-Type:</span> application/json</div><div class="line"><span class="attr">        body:</span></div><div class="line"><span class="attr">            success:</span> <span class="literal">true</span></div><div class="line"><span class="attr">            msg:</span> user created successfully.</div><div class="line"><span class="attr">            uuid:</span> JsdfwerL</div></pre></td></tr></table></figure>
<p>该测试用例可以在<code>ApiTestEngine</code>中正常运行，我们也可以采用同样的方式，对系统的所有接口编写测试用例，以此实现项目的接口自动化测试覆盖。</p>
<p>但问题在于，每个接口通常会对应多条测试用例，差异只是在于请求的数据会略有不同，而测试用例量越大，我们人工去准备测试数据的工作量也就越大。更令人抓狂的是，我们的系统接口不是一直不变的，有时候会根据业务需求的变化进行一些调整，相应地，我们的测试数据也需要进行同步更新，这样一来，所有相关的测试用例数据就又得重新计算一遍（任意字段数据产生变化，签名值就会大不相同）。</p>
<p>可以看出，如果是采用这种方式编写维护接口测试用例，人力和时间成本都会非常高，最终的结果必然是接口自动化测试难以在实际项目中得以开展。</p>
<h2 id="理想的用例描述方式"><a href="#理想的用例描述方式" class="headerlink" title="理想的用例描述方式"></a>理想的用例描述方式</h2><p>在上面案例中，编写接口测试用例时之所以会很繁琐，主要是因为接口存在签名校验机制，导致我们在准备测试数据时耗费了太多时间在这上面。</p>
<p>然而，对于测试人员来说，接口的业务功能才是需要关注的，至于接口采用什么签名校验机制这类技术细节，的确不应耗费过多时间和精力。所以，我们的接口测试框架应该设法将接口的技术细节实现和业务参数进行拆分，并能自动处理与技术细节相关的部分，从而让业务测试人员只需要关注业务参数部分。</p>
<p>那要怎么实现呢？</p>
<p>在开始实现之前，我们不妨借鉴<code>BDD</code>（行为驱动开发）的思想，先想下如何编写接口测试用例的体验最友好，换句话说，就是让业务测试人员写用例写得最爽。</p>
<p>还是上面案例的接口测试用例，可以看出，最耗时的地方主要是计算签名校验值部分。按理说，签名校验算法我们是已知的，要是可以在测试用例中直接调用签名算法函数就好了。</p>
<p>事实上，这也是各种模板语言普遍采用的方式，例如<code>Jinja2</code>模板语言，可以在<code>{% %}</code>中执行函数语句，在<code>{{ }}</code>中可以调用变量参数。之前我在设计[<code>AppiumBooster</code>][AppiumBooster]时也采用了类似的思想，可以通过<code>${config.TestEnvAccount.UserName}</code>的方式在测试用例中引用预定义的全局变量。</p>
<p>基于该思路，假设我们已经实现了<code>gen_random_string</code>这样一个生成指定位数的随机字符串的函数，以及<code>gen_md5</code>这样一个计算签名校验值的函数，那么我们就可以尝试采用如下方式来描述我们的测试用例：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- test:</span></div><div class="line"><span class="attr">    name:</span> create user which does not exist</div><div class="line"><span class="attr">    variable_binds:</span></div><div class="line"><span class="attr">        - TOKEN:</span> debugtalk</div><div class="line"><span class="attr">        - random:</span> $&#123;gen_random_string(<span class="number">5</span>)&#125;</div><div class="line"><span class="attr">        - json:</span> &#123;<span class="string">"name"</span>: <span class="string">"user"</span>, <span class="string">"password"</span>: <span class="string">"123456"</span>&#125;</div><div class="line"><span class="attr">        - authorization:</span> $&#123;gen_md5($TOKEN, $json, $random)&#125;</div><div class="line"><span class="attr">    request:</span></div><div class="line"><span class="attr">        url:</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/api/users/<span class="number">1000</span></div><div class="line"><span class="attr">        method:</span> POST</div><div class="line"><span class="attr">        headers:</span></div><div class="line"><span class="attr">            Content-Type:</span> application/json</div><div class="line"><span class="attr">            authorization:</span> $authorization</div><div class="line"><span class="attr">            random:</span> $random</div><div class="line"><span class="attr">        json:</span> $json</div><div class="line"><span class="attr">    extract_binds:</span></div><div class="line"><span class="attr">        user_uuid:</span> content.uuid</div><div class="line"><span class="attr">    validators:</span></div><div class="line"><span class="bullet">        -</span> &#123;<span class="string">"check"</span>: <span class="string">"status_code"</span>, <span class="string">"comparator"</span>: <span class="string">"eq"</span>, <span class="string">"expected"</span>: <span class="number">201</span>&#125;</div><div class="line"><span class="bullet">        -</span> &#123;<span class="string">"check"</span>: <span class="string">"content.success"</span>, <span class="string">"comparator"</span>: <span class="string">"eq"</span>, <span class="string">"expected"</span>: <span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<p>在如上用例中，用到了两种转义符：</p>
<ul>
<li><code>$</code>作为变量转义符，<code>$var</code>将不再代表的是普遍的字符串，而是<code>var</code>变量的值；</li>
<li><code>${}</code>作为函数的转义符，<code>${}</code>内可以直接填写函数名称及调用参数，甚至可以包含变量。</li>
</ul>
<p>为什么会选择采用这种描述方式？（<code>Why？</code>）</p>
<p>其实这也是我经过大量思考和实践之后，才最终确定的描述方式。如果真要讲述这个思路历程。。。还是不细说了，此处可省下一万字。（主要的思路无非就是要实现转义的效果，并且表达要简洁清晰，因此必然会用到特殊字符；而特殊字符在<code>YAML</code>中大多都已经有了特定的含义，排除掉不可用的之后，剩下的真没几个了，然后再借鉴其它框架常用的符号，所以说最终选择<code>$</code>和<code>${}</code>也算是必然。）</p>
<p>可以确定的是，这种描述方式的好处非常明显，不仅可以实现复杂计算逻辑的函数调用，还可以实现变量的定义和引用。</p>
<p>除了转义符，由于接口测试中经常需要对结果中的特定字段进行提取，作为后续接口请求的参数，因此我们实现了<code>extract_binds</code>这样一个结果提取器，只要返回结果是JSON类型，就可以将其中的任意字段进行提取，并保存到一个变量中，方便后续接口请求进行引用。</p>
<p>另外，为了更好地实现对接口响应结果的校验，我们废弃了先前的方式，实现了独立的结果校验器<code>validators</code>。这是因为，很多时候在比较响应结果时，并不能简单地按照字段值是否相等来进行校验，除此之外，我们可能还需要检查某个字段的长度是否为指定位数，元素列表个数是否大于某个数值，甚至某个字符串是否满足正则匹配等等。</p>
<p>相信你们肯定会想，以上这些描述方式的确是很简洁，但更多地感觉是在臆想，就像开始说的<code>gen_random_string</code>和<code>gen_md5</code>函数，我们只是假设已经定义好了。就算描述得再优雅再完美，终究也还只是<code>YAML/JSON</code>文本格式而已，要怎样才能转换为执行的代码呢？</p>
<p>这就要解决<code>How？</code>的问题了。</p>
<p>嗯，这就是用例模板引擎的核心了，也算是<code>ApiTestEngine</code>最核心的功能特性。</p>
<p>更具体的，从技术实现角度，主要分为三大块：</p>
<ul>
<li>如何在用例描述（<code>YAML/JSON</code>）中实现函数的定义和调用</li>
<li>如何在用例描述中实现参数的定义和引用，包括用例内部和用例集之间</li>
<li>如何在用例描述中实现预期结果的描述和测试结果的校验</li>
</ul>
<p>这三大块内容涉及到较多的技术实现细节，我们将在后续的文章中结合代码逐个深入进行讲解。</p>
<h2 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h2><ul>
<li><a href="http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/">《接口自动化测试的最佳工程实践（ApiTestEngine）》</a></li>
<li><a href="http://debugtalk.com/post/ApiTestEngine-0-setup-CI-test/">《ApiTestEngine 演化之路（0）开发未动，测试先行》</a></li>
<li><a href="http://debugtalk.com/post/ApiTestEngine-1-setup-basic-framework/">《ApiTestEngine 演进之路（1）搭建基础框架》</a></li>
<li><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code> GitHub源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://debugtalk.com/post/ApiTestEngine-1-setup-basic-framework/&quot;&gt;《ApiTestEngine 演进之路（1）搭建基础框架》&lt;/a&gt;一文中，我们完成了&lt;a href=&quot;https://gi
    
    </summary>
    
    
      <category term="自动化测试" scheme="http://debugtalk.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试框架" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ApiTestEngine" scheme="http://debugtalk.com/tags/ApiTestEngine/"/>
    
      <category term="测试用例" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>300行Python代码打造实用接口测试框架</title>
    <link href="http://debugtalk.com/post/300-lines-python-code-api-test-framework/"/>
    <id>http://debugtalk.com/post/300-lines-python-code-api-test-framework/</id>
    <published>2017-06-27T16:00:00.000Z</published>
    <updated>2017-06-28T06:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>在刚开始实现<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>的时候，<a href="https://testerhome.com/kasi" target="_blank" rel="external"><code>卡斯（kasi）</code></a>提议做一个Java版的。对于这样的建议，我当然是拒绝的，瞬即回复了他，“人生苦短，回头是岸啊”。</p>
<p>当然，我没好意思跟他说的是，我不会Java啊。不过最主要的原因嘛，还是因为Python的语法简洁，可以采用很少的代码量实现丰富的功能。</p>
<p>有多简洁呢？</p>
<p>刚在<code>coveralls</code>上看了下<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>框架的<a href="https://coveralls.io/github/debugtalk/ApiTestEngine?branch=master" target="_blank" rel="external">代码统计行数</a>，总行数只有268行，还不足300行。</p>
<p><img src="/images/ApiTestEngine-stat-ate.jpg" alt=""></p>
<p>当然，这个行数指的是框架本身的<code>Python</code>代码行数，不包括示例注释的行数。从上图可以看出来，<code>LINES</code>列是文件总行数，<code>RELEVANT</code>列是实际的<code>Python</code>代码行数。例如<code>ate/runner.py</code>文件，注释的行数是远多于实际代码行数的。</p>
<p>最极端的一个例子是，<code>ate/testcase.py</code>文件中的<a href="https://github.com/debugtalk/ApiTestEngine/blob/master/ate/testcase.py" target="_blank" rel="external"><code>parse</code>函数</a>，示例注释行数35行，<code>Python</code>代码只有2行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, testcase_template)</span>:</span></div><div class="line">   <span class="string">""" parse testcase_template, replace all variables with bind value.</span></div><div class="line">   variables marker: $&#123;variable&#125;.</div><div class="line">   @param (dict) testcase_template</div><div class="line">       &#123;</div><div class="line">           "request": &#123;</div><div class="line">               "url": "http://127.0.0.1:5000/api/users/$&#123;uid&#125;",</div><div class="line">               "method": "POST",</div><div class="line">               "headers": &#123;</div><div class="line">                   "Content-Type": "application/json",</div><div class="line">                   "authorization": "$&#123;authorization&#125;",</div><div class="line">                   "random": "$&#123;random&#125;"</div><div class="line">               &#125;,</div><div class="line">               "body": "$&#123;data&#125;"</div><div class="line">           &#125;,</div><div class="line">           "response": &#123;</div><div class="line">               "status_code": "$&#123;expected_status&#125;"</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   @return (dict) parsed testcase with bind values</div><div class="line">       &#123;</div><div class="line">           "request": &#123;</div><div class="line">               "url": "http://127.0.0.1:5000/api/users/1000",</div><div class="line">               "method": "POST",</div><div class="line">               "headers": &#123;</div><div class="line">                   "Content-Type": "application/json",</div><div class="line">                   "authorization": "a83de0ff8d2e896dbd8efb81ba14e17d",</div><div class="line">                   "random": "A2dEx"</div><div class="line">               &#125;,</div><div class="line">               "body": '&#123;"name": "user", "password": "123456"&#125;'</div><div class="line">           &#125;,</div><div class="line">           "response": &#123;</div><div class="line">               "status_code": 201</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   """</div><div class="line">   <span class="keyword">return</span> self.substitute(testcase_template)</div></pre></td></tr></table></figure>
<p>另外，如果算上单元测试用例的行数（731行），总的<code>Python</code>代码行数能达到1000行的样子。嗯，代码可以精简，但是单元测试覆盖率还是要保证的，不达到90%以上的单元测试覆盖率，真不好意思说自己做了开源项目啊。</p>
<p><img src="/images/ApiTestEngine-stat-all.jpg" alt=""></p>
<p>那这不足300行的Python代码，实际实现了哪些功能呢？</p>
<p>对比下<a href="http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/">《接口自动化测试的最佳工程实践（ApiTestEngine）》</a>中规划的特性，已经实现了大半（前六项），至少已经算是一个有模有样的接口测试框架了。</p>
<ul>
<li>支持API接口的多种请求方法，包括 GET/POST/HEAD/PUT/DELETE 等</li>
<li>测试用例与代码分离，测试用例维护方式简洁优雅，支持<code>YAML/JSON</code></li>
<li>测试用例描述方式具有表现力，可采用简洁的方式描述输入参数和预期输出结果</li>
<li>接口测试用例具有可复用性，便于创建复杂测试场景</li>
<li>测试执行方式简单灵活，支持单接口调用测试、批量接口调用测试、定时任务执行测试</li>
<li>具有可扩展性，便于扩展实现Web平台化</li>
<li>测试结果统计报告简洁清晰，附带详尽日志记录，包括接口请求耗时、请求响应数据等</li>
<li>身兼多职，同时实现接口管理、接口自动化测试、接口性能测试（结合Locust）</li>
</ul>
<p>后面剩下的特性还在实现的过程中，但是可以预见得到，最后框架本身总的<code>Python</code>代码行数也不会超过500行。</p>
<p>当然，单纯地比代码行数的确是没有什么意义，写得爽写得开心才是最重要的。</p>
<p>最后引用下<code>Guido van Rossum</code>的语录：</p>
<blockquote>
<p>Life is short, go Pythonic!</p>
</blockquote>
<h2 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h2><ul>
<li><a href="http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/">《接口自动化测试的最佳工程实践（ApiTestEngine）》</a></li>
<li><a href="http://debugtalk.com/post/ApiTestEngine-0-setup-CI-test/">《ApiTestEngine 演化之路（0）开发未动，测试先行》</a></li>
<li><a href="http://debugtalk.com/post/ApiTestEngine-1-setup-basic-framework/">《ApiTestEngine 演进之路（1）搭建基础框架》</a></li>
<li><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code> GitHub源码</a></li>
</ul>
<h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p><a href="http://debugtalk.com/tags/ApiTestEngine">《ApiTestEngine 演进之路》</a>系列文章还在继续写，只是前几天主要精力在编码实现上，博客方面没有同步更新，接下来我会整理好思路，继续完成余下的部分。</p>
<p>另外，如果大家对Python编程感兴趣，给大家推荐一个专注Python原创技术分享的公众号，⎡Python之禅⎦（VTtalk），里面关于Python的干货非常多，讲解也很通俗易懂，现在我如果有理解得不够透彻的概念，基本都会先到这个公众号里面去搜索下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在刚开始实现&lt;a href=&quot;https://github.com/debugtalk/ApiTestEngine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;ApiTestEngine&lt;/code&gt;&lt;/a&gt;的时候，&lt;a href=&quot;http
    
    </summary>
    
    
      <category term="Python" scheme="http://debugtalk.com/tags/Python/"/>
    
      <category term="测试框架" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ApiTestEngine" scheme="http://debugtalk.com/tags/ApiTestEngine/"/>
    
      <category term="接口测试" scheme="http://debugtalk.com/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ApiTestEngine 演进之路（1）搭建基础框架</title>
    <link href="http://debugtalk.com/post/ApiTestEngine-1-setup-basic-framework/"/>
    <id>http://debugtalk.com/post/ApiTestEngine-1-setup-basic-framework/</id>
    <published>2017-06-21T16:00:00.000Z</published>
    <updated>2017-07-23T14:12:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://debugtalk.com/post/ApiTestEngine-0-setup-CI-test/">《ApiTestEngine 演进之路（0）开发未动，测试先行》</a>一文中，我对<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>项目正式开始前的准备工作进行了介绍，包括构建API接口服务（<code>Mock Server</code>）、搭建项目单元测试框架、实现持续集成构建检查机制（<a href="https://travis-ci.org/" target="_blank" rel="external"><code>Travis CI</code></a>）等。</p>
<p>接下来，我们就开始构建<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>项目的基础框架，实现基本功能吧。</p>
<h2 id="接口测试的核心要素"><a href="#接口测试的核心要素" class="headerlink" title="接口测试的核心要素"></a>接口测试的核心要素</h2><p>既然是从零开始，那我们不妨先想下，对于接口测试来说，最基本最核心的要素有哪些？</p>
<p>事实上，不管是手工进行接口测试，还是自动化测试平台执行接口测试，接口测试的核心要素都可以概括为如下三点：</p>
<ul>
<li>发起接口请求（Request）</li>
<li>解析接口响应（Response）</li>
<li>检查接口测试结果</li>
</ul>
<p>这对于任意类型的接口测试也都是适用的。</p>
<p>在本系列文章中，我们关注的是API接口的测试，更具体地，是基于HTTP协议的API接口的测试。所以我们的问题就进一步简化了，只需要关注<code>HTTP</code>协议层面的请求和响应即可。</p>
<p>好在对于绝大多数接口系统，都有明确的API接口文档，里面会定义好接口请求的参数（包括Headers和Body），并同时描述好接口响应的内容（包括Headers和Body）。而我们需要做的，就是根据接口文档的描述，在<code>HTTP</code>请求中按照接口规范填写请求的参数，然后读取接口的<code>HTTP</code>响应内容，将接口的实际响应内容与我们的预期结果进行对比，以此判断接口功能是否正常。这里的预期结果，应该是包含在接口测试用例里面的。</p>
<p>由此可知，实现接口测试框架的第一步是完成对<code>HTTP</code>请求响应处理的支持。</p>
<h2 id="HTTP客户端的最佳选择"><a href="#HTTP客户端的最佳选择" class="headerlink" title="HTTP客户端的最佳选择"></a>HTTP客户端的最佳选择</h2><p><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>项目选择<code>Python</code>作为编程语言，而在<code>Python</code>中实现<code>HTTP</code>请求，毫无疑问，<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>库是最佳选择，简洁优雅，功能强大，可轻松支持<code>API</code>接口的多种请求方法，包括<code>GET/POST/HEAD/PUT/DELETE</code>等。</p>
<p>并且，更赞的地方在于，<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>库针对所有的<code>HTTP</code>请求方法，都可以采用一套统一的接口。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requests.request(method, url, **kwargs)</div></pre></td></tr></table></figure>
<p>其中，<code>kwargs</code>中可以包含<code>HTTP</code>请求的所有可能需要用到的信息，例如<code>headers</code>、<code>cookies</code>、<code>params</code>、<code>data</code>、<code>auth</code>等。</p>
<p>这有什么好处呢？</p>
<p>好处在于，这可以帮助我们轻松实现测试数据与框架代码的分离。我们只需要遵循<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>库的参数规范，在接口测试用例中复用<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>参数的概念即可。而对于框架的测试用例执行引擎来说，处理逻辑就异常简单了，直接读取测试用例中的参数，传参给<code>Requests</code>发起请求即可。</p>
<p>如果还感觉不好理解，没关系，直接看案例。</p>
<h2 id="测试用例描述"><a href="#测试用例描述" class="headerlink" title="测试用例描述"></a>测试用例描述</h2><p>在我们搭建的API接口服务（<code>Mock Server</code>）中，我们想测试“创建一个用户，该用户之前不存在”的场景</p>
<p>在上一篇文章中，我们也在<code>unittest</code>中对该测试场景实现了测试脚本。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_create_user_not_existed</span><span class="params">(self)</span>:</span></div><div class="line">   self.clear_users()</div><div class="line"></div><div class="line">   url = <span class="string">"%s/api/users/%d"</span> % (self.host, <span class="number">1000</span>)</div><div class="line">   data = &#123;</div><div class="line">       <span class="string">"name"</span>: <span class="string">"user1"</span>,</div><div class="line">       <span class="string">"password"</span>: <span class="string">"123456"</span></div><div class="line">   &#125;</div><div class="line">   resp = self.api_client.post(url, json=data)</div><div class="line"></div><div class="line">   self.assertEqual(<span class="number">201</span>, resp.status_code)</div><div class="line">   self.assertEqual(<span class="keyword">True</span>, resp.json()[<span class="string">"success"</span>])</div></pre></td></tr></table></figure>
<p>在该用例中，我们实现了<code>HTTP POST</code>请求，<code>api_client.post(url, json=data)</code>，然后对响应结果进行解析，并检查<code>resp.status_code</code>、<code>resp.json()[&quot;success&quot;]</code>是否满足预期。</p>
<p>可以看出，采用代码编写测试用例时会用到许多编程语言的语法，对于不会编程的人来说上手难度较大。更大的问题在于，当我们编写大量测试用例之后，因为模式基本都是固定的，所以会发现存在大量相似或重复的脚本，这给脚本的维护带来了很大的问题。</p>
<p>那如何将测试用例与脚本代码进行分离呢？</p>
<p>考虑到<code>JSON</code>格式在编程语言中处理是最方便的，分离后的测试用例可采用<code>JSON</code>描述如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"name"</span>: <span class="string">"create user which does not exist"</span>,</div><div class="line">   <span class="attr">"request"</span>: &#123;</div><div class="line">       <span class="attr">"url"</span>: <span class="string">"http://127.0.0.1:5000/api/users/1000"</span>,</div><div class="line">       <span class="attr">"method"</span>: <span class="string">"POST"</span>,</div><div class="line">       <span class="attr">"headers"</span>: &#123;</div><div class="line">           <span class="attr">"content-type"</span>: <span class="string">"application/json"</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">"json"</span>: &#123;</div><div class="line">           <span class="attr">"name"</span>: <span class="string">"user1"</span>,</div><div class="line">           <span class="attr">"password"</span>: <span class="string">"123456"</span></div><div class="line">       &#125;</div><div class="line">   &#125;,</div><div class="line">   <span class="attr">"response"</span>: &#123;</div><div class="line">       <span class="attr">"status_code"</span>: <span class="number">201</span>,</div><div class="line">       <span class="attr">"headers"</span>: &#123;</div><div class="line">           <span class="attr">"Content-Type"</span>: <span class="string">"application/json"</span></div><div class="line">       &#125;,</div><div class="line">       <span class="attr">"body"</span>: &#123;</div><div class="line">           <span class="attr">"success"</span>: <span class="literal">true</span>,</div><div class="line">           <span class="attr">"msg"</span>: <span class="string">"user created successfully."</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不难看出，如上<code>JSON</code>结构体包含了测试用例的完整描述信息。</p>
<p>需要特别注意的是，这里使用了一个讨巧的方式，就是在请求的参数中充分复用了<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>的参数规范。例如，我们要<code>POST</code>一个<code>JSON</code>的结构体，那么我们就直接将<code>json</code>作为<code>request</code>的参数名，这和前面写脚本时用的<code>api_client.post(url, json=data)</code>是一致的。</p>
<h2 id="测试用例执行引擎"><a href="#测试用例执行引擎" class="headerlink" title="测试用例执行引擎"></a>测试用例执行引擎</h2><p>在如上测试用例描述的基础上，测试用例执行引擎就很简单了，以下几行代码就足够了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_single_testcase</span><span class="params">(testcase)</span>:</span></div><div class="line">   req_kwargs = testcase[<span class="string">'request'</span>]</div><div class="line"></div><div class="line">   <span class="keyword">try</span>:</div><div class="line">       url = req_kwargs.pop(<span class="string">'url'</span>)</div><div class="line">       method = req_kwargs.pop(<span class="string">'method'</span>)</div><div class="line">   <span class="keyword">except</span> KeyError:</div><div class="line">       <span class="keyword">raise</span> exception.ParamsError(<span class="string">"Params Error"</span>)</div><div class="line"></div><div class="line">   resp_obj = requests.request(url=url, method=method, **req_kwargs)</div><div class="line">   diff_content = utils.diff_response(resp_obj, testcase[<span class="string">'response'</span>])</div><div class="line">   success = <span class="keyword">False</span> <span class="keyword">if</span> diff_content <span class="keyword">else</span> <span class="keyword">True</span></div><div class="line">   <span class="keyword">return</span> success, diff_content</div></pre></td></tr></table></figure>
<p>可以看出，不管是什么<code>HTTP</code>请求方法的用例，该执行引擎都是适用的。</p>
<p>只需要先从测试用例中获取到HTTP接口请求参数，<code>testcase[&#39;request&#39;]</code>：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"url"</span>: <span class="string">"http://127.0.0.1:5000/api/users/1000"</span>,</div><div class="line">  <span class="attr">"method"</span>: <span class="string">"POST"</span>,</div><div class="line">  <span class="attr">"headers"</span>: &#123;</div><div class="line">      <span class="attr">"content-type"</span>: <span class="string">"application/json"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"json"</span>: &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"user1"</span>,</div><div class="line">      <span class="attr">"password"</span>: <span class="string">"123456"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后发起<code>HTTP</code>请求：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requests.request(url=url, method=method, **req_kwargs)</div></pre></td></tr></table></figure>
<p>最后再检查测试结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">utils.diff_response(resp_obj, testcase[<span class="string">'response'</span>])</div></pre></td></tr></table></figure>
<p>在测试用例执行引擎完成后，执行测试用例的方式也很简单。同样是在<code>unittest</code>中调用执行测试用例，就可以写成如下形式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_run_single_testcase_success</span><span class="params">(self)</span>:</span></div><div class="line">   testcase_file_path = os.path.join(os.getcwd(), <span class="string">'tests/data/demo.json'</span>)</div><div class="line">   testcases = utils.load_testcases(testcase_file_path)</div><div class="line">   success, _ = self.test_runner.run_single_testcase(testcases[<span class="number">0</span>])</div><div class="line">   self.assertTrue(success)</div></pre></td></tr></table></figure>
<p>可以看出，模式还是很固定：加载用例、执行用例、判断用例执行是否成功。如果每条测试用例都要在<code>unittest.TestCase</code>分别写一个单元测试进行调用，还是会存在大量重复工作。</p>
<p>所以比较好的做法是，再实现一个单元测试用例生成功能；这部分先不展开，后面再进行详细描述。</p>
<h2 id="结果判断处理逻辑"><a href="#结果判断处理逻辑" class="headerlink" title="结果判断处理逻辑"></a>结果判断处理逻辑</h2><p>这里再单独讲下对结果的判断逻辑处理，也就是<code>diff_response</code>函数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def diff_response(resp_obj, expected_resp_json)</div><div class="line">    diff_content = &#123;&#125;</div><div class="line">    resp_info = parse_response_object(resp_obj)</div><div class="line"></div><div class="line">    # 对比 status_code，将差异存入 diff_content</div><div class="line">    # 对比 Headers，将差异存入 diff_content</div><div class="line">    # 对比 Body，将差异存入 diff_content</div><div class="line"></div><div class="line">    return diff_content</div></pre></td></tr></table></figure>
<p>其中，<code>expected_resp_json</code>参数就是我们在测试用例中描述的<code>response</code>部分，作为测试用例的预期结果描述信息，是判断实际接口响应是否正常的参考标准。</p>
<p>而<code>resp_obj</code>参数，就是实际接口响应的<code>Response</code>实例，详细的定义可以参考<code>requests.Response</code><a href="http://docs.python-requests.org/en/master/api/#requests.Response" target="_blank" rel="external">描述文档</a>。</p>
<p>为了更好地实现结果对比，我们也将<code>resp_obj</code>解析为与<code>expected_resp_json</code>相同的数据结构。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_response_object</span><span class="params">(resp_obj)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        resp_body = resp_obj.json()</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        resp_body = resp_obj.text</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="string">'status_code'</span>: resp_obj.status_code,</div><div class="line">        <span class="string">'headers'</span>: resp_obj.headers,</div><div class="line">        <span class="string">'body'</span>: resp_body</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>那么最后再进行对比就很好实现了，只需要编写一个通用的<code>JSON</code>结构体比对函数即可。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_json</span><span class="params">(current_json, expected_json)</span>:</span></div><div class="line">    json_diff = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> key, expected_value <span class="keyword">in</span> expected_json.items():</div><div class="line">        value = current_json.get(key, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> str(value) != str(expected_value):</div><div class="line">            json_diff[key] = &#123;</div><div class="line">                <span class="string">'value'</span>: value,</div><div class="line">                <span class="string">'expected'</span>: expected_value</div><div class="line">            &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> json_diff</div></pre></td></tr></table></figure>
<p>这里只罗列了核心处理流程的代码实现，其它的辅助功能，例如加载<code>JSON/YAML</code>测试用例等功能，请直接阅读阅读<a href="https://github.com/debugtalk/ApiTestEngine/tree/master/ate" target="_blank" rel="external">项目源码</a>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过本文中的工作，我们已经完成了<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>基础框架的搭建，并实现了两项最基本的功能：</p>
<ul>
<li>支持API接口的多种请求方法，包括 GET/POST/HEAD/PUT/DELETE 等</li>
<li>测试用例与代码分离，测试用例维护方式简洁优雅，支持<code>YAML/JSON</code></li>
</ul>
<p>然而，在实际项目中的接口通常比较复杂，例如包含签名校验等机制，这使得我们在配置接口测试用例时还是会比较繁琐。</p>
<p>在下一篇文章中，我们将着手解决这个问题，通过对框架增加模板配置功能，实现接口业务参数和技术细节的分离。</p>
<h2 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h2><ul>
<li><a href="http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/">《接口自动化测试的最佳工程实践（ApiTestEngine）》</a></li>
<li><a href="http://debugtalk.com/post/ApiTestEngine-0-setup-CI-test/">《ApiTestEngine 演进之路（0）开发未动，测试先行》</a></li>
<li><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code> GitHub源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://debugtalk.com/post/ApiTestEngine-0-setup-CI-test/&quot;&gt;《ApiTestEngine 演进之路（0）开发未动，测试先行》&lt;/a&gt;一文中，我对&lt;a href=&quot;https://github.com
    
    </summary>
    
    
      <category term="HTTP" scheme="http://debugtalk.com/tags/HTTP/"/>
    
      <category term="自动化测试" scheme="http://debugtalk.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试框架" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ApiTestEngine" scheme="http://debugtalk.com/tags/ApiTestEngine/"/>
    
  </entry>
  
  <entry>
    <title>ApiTestEngine 演进之路（0）开发未动，测试先行</title>
    <link href="http://debugtalk.com/post/ApiTestEngine-0-setup-CI-test/"/>
    <id>http://debugtalk.com/post/ApiTestEngine-0-setup-CI-test/</id>
    <published>2017-06-19T16:00:00.000Z</published>
    <updated>2017-07-23T14:12:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/">《接口自动化测试的最佳工程实践（ApiTestEngine）》</a>一文中，我详细介绍了<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>诞生的背景，并对其核心特性进行了详尽的剖析。</p>
<p>接下来，我将在《ApiTestEngine演进之路》系列文章中讲解<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>是如何从第一行代码开始，逐步实现接口自动化测试框架的核心功能特性的。</p>
<p>相信大家都有听说过<code>TDD</code>（<code>测试驱动开发</code>）这种开发模式，虽然网络上对该种开发模式存在异议，但我个人是非常推荐使用该种开发方式的。关于<code>TDD</code>的优势，我就不在此赘述了，我就只说下自己受益最深的两个方面。</p>
<ul>
<li>测试驱动，其实也是需求驱动。在开发正式代码之前，可以先将需求转换为单元测试用例，然后再逐步实现正式代码，直至将所有单元测试用例跑通。这可以帮助我们总是聚焦在要实现的功能特性上，避免跑偏。特别是像我们做测试开发的，通常没有需求文档和设计文档，如果没有清晰的思路，很可能做着做着就不知道自己做到哪儿了。</li>
<li>高覆盖率的单元测试代码，对项目质量有充足的信心。因为是先写测试再写实现，所以正常情况下，所有的功能特性都应该能被单元测试覆盖到。再结合持续集成的手段，我们可以轻松保证每个版本都是高质量并且可用的。</li>
</ul>
<p>所以，<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>项目也将采用<code>TDD</code>的开发模式。本篇文章就重点介绍下采用<code>TDD</code>之前需要做的一些准备工作。</p>
<h2 id="搭建API接口服务（Mock-Server）"><a href="#搭建API接口服务（Mock-Server）" class="headerlink" title="搭建API接口服务（Mock Server）"></a>搭建API接口服务（Mock Server）</h2><p>接口测试框架要运行起来，必然需要有可用的API接口服务。因此，在开始构建我们的接口测试框架之前，最好先搭建一套简单的API接口服务，也就是<code>Mock Server</code>，然后我们在采用<code>TDD</code>开发模式的时候，就可以随时随地将框架代码跑起来，开发效率也会大幅提升。</p>
<p>为什么不直接采用已有的业务系统API接口服务呢？</p>
<p>这是因为通常业务系统的接口比较复杂，并且耦合了许多业务逻辑，甚至还可能涉及到和其它业务系统的交互，搭建或维护一套测试环境的成本可能会非常高。另一方面，接口测试框架需要具有一定的通用性，其功能特性很难在一个特定的业务系统中找到所有合适的接口。就拿最简单的接口请求方法来说，测试框架需要支持<code>GET/POST/HEAD/PUT/DELETE</code>方法，但是可能在我们已有的业务系统中只有<code>GET/POST</code>接口。</p>
<p>自行搭建API接口服务的另一个好处在于，我们可以随时调整接口的实现方式，来满足接口测试框架特定的功能特性，从而使我们总是能将注意力集中在测试框架本身。比较好的做法是，先搭建最简单的接口服务，在此基础上将接口测试框架搭建起来，实现最基本的功能；后面在实现框架的高级功能特性时，我们再对该接口服务进行拓展升级，例如增加签名校验机制等，来适配测试框架的高级功能特性。</p>
<p>幸运的是，使用<code>Python</code>搭建API接口服务十分简单，特别是在结合使用<a href="http://flask.pocoo.org/" target="_blank" rel="external"><code>Flask</code></a>框架的情况下。</p>
<p>例如，我们想实现一套可以对用户账号进行增删改查（<code>CRUD</code>）功能的接口服务，用户账号的存储结构大致如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">users_dict = &#123;</div><div class="line">   'uid1': &#123;</div><div class="line">       'name': 'name1',</div><div class="line">       'password': 'pwd1'</div><div class="line">   &#125;,</div><div class="line">   'uid2': &#123;</div><div class="line">       'name': 'name2',</div><div class="line">       'password': 'pwd2'</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么，新增（Create）和更新（Update）功能的接口就可以通过如下方式实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, make_response</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">users_dict = &#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@app.route('/api/users/&lt;int:uid&gt;', methods=['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(uid)</span>:</span></div><div class="line">    user = request.get_json()</div><div class="line">    <span class="keyword">if</span> uid <span class="keyword">not</span> <span class="keyword">in</span> users_dict:</div><div class="line">        result = &#123;</div><div class="line">            <span class="string">'success'</span>: <span class="keyword">True</span>,</div><div class="line">            <span class="string">'msg'</span>: <span class="string">"user created successfully."</span></div><div class="line">        &#125;</div><div class="line">        status_code = <span class="number">201</span></div><div class="line">        users_dict[uid] = user</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        result = &#123;</div><div class="line">            <span class="string">'success'</span>: <span class="keyword">False</span>,</div><div class="line">            <span class="string">'msg'</span>: <span class="string">"user already existed."</span></div><div class="line">        &#125;</div><div class="line">        status_code = <span class="number">500</span></div><div class="line"></div><div class="line">    response = make_response(json.dumps(result), status_code)</div><div class="line">    response.headers[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span></div><div class="line">    <span class="keyword">return</span> response</div><div class="line"></div><div class="line"><span class="meta">@app.route('/api/users/&lt;int:uid&gt;', methods=['PUT'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_user</span><span class="params">(uid)</span>:</span></div><div class="line">    user = users_dict.get(uid, &#123;&#125;)</div><div class="line">    <span class="keyword">if</span> user:</div><div class="line">        user = request.get_json()</div><div class="line">        success = <span class="keyword">True</span></div><div class="line">        status_code = <span class="number">200</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        success = <span class="keyword">False</span></div><div class="line">        status_code = <span class="number">404</span></div><div class="line"></div><div class="line">    result = &#123;</div><div class="line">        <span class="string">'success'</span>: success,</div><div class="line">        <span class="string">'data'</span>: user</div><div class="line">    &#125;</div><div class="line">    response = make_response(json.dumps(result), status_code)</div><div class="line">    response.headers[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span></div><div class="line">    <span class="keyword">return</span> response</div></pre></td></tr></table></figure>
<p>限于篇幅，其它类型的接口实现就不在此赘述，完整的接口实现可以参考<a href="https://github.com/debugtalk/ApiTestEngine/blob/master/tests/api_server.py" target="_blank" rel="external">项目源码</a>。</p>
<p>接口服务就绪后，按照<code>Flask</code>官方文档，可以通过如下方式进行启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ export FLASK_APP=tests/api_server.py</div><div class="line">$ flask run</div><div class="line"> * Serving Flask app &quot;tests.api_server&quot;</div><div class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</div></pre></td></tr></table></figure>
<p>启动后，我们就可以通过请求接口来调用已经实现的接口功能了。例如，先创建一个用户，然后查看所有用户的信息，在<code>Python</code>终端中的调用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line">Python 3.6.0 (default, Mar 24 2017, 16:58:25)</div><div class="line">&gt;&gt;&gt; import requests</div><div class="line">&gt;&gt;&gt; requests.post(&apos;http://127.0.0.1:5000/api/users/1000&apos;, json=&#123;&apos;name&apos;: &apos;user1&apos;, &apos;password&apos;: &apos;123456&apos;&#125;)</div><div class="line">&lt;Response [201]&gt;</div><div class="line">&gt;&gt;&gt; resp = requests.get(&apos;http://127.0.0.1:5000/api/users&apos;)</div><div class="line">&gt;&gt;&gt; resp.content</div><div class="line">b&apos;&#123;&quot;success&quot;: true, &quot;count&quot;: 1, &quot;items&quot;: [&#123;&quot;name&quot;: &quot;user1&quot;, &quot;password&quot;: &quot;123456&quot;&#125;]&#125;&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>通过接口请求结果可见，接口服务运行正常。</p>
<h2 id="在单元测试用例中使用-Mock-Server"><a href="#在单元测试用例中使用-Mock-Server" class="headerlink" title="在单元测试用例中使用 Mock Server"></a>在单元测试用例中使用 Mock Server</h2><p>API接口服务（<code>Mock Server</code>）已经有了，但是如果每次运行单元测试时都要先在外部手工启动API接口服务的话，做法实在是不够优雅。</p>
<p>推荐的做法是，制作一个<code>ApiServerUnittest</code>基类，在其中添加<code>setUpClass</code>类方法，用于启动API接口服务（<code>Mock Server</code>）；添加<code>tearDownClass</code>类方法，用于停止API接口服务。由于<code>setUpClass</code>会在单元测试用例集初始化的时候执行一次，所以可以保证单元测试用例在运行的时候API服务处于可用状态；而<code>tearDownClass</code>会在单元测试用例集执行完毕后运行一次，停止API接口服务，从而避免对下一次启动产生影响。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tests/base.py</span></div><div class="line"><span class="keyword">import</span> multiprocessing</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> unittest</div><div class="line"><span class="keyword">from</span> . <span class="keyword">import</span> api_server</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiServerUnittest</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Test case class that sets up an HTTP server which can be used within the tests</div><div class="line">    """</div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></div><div class="line">        cls.api_server_process = multiprocessing.Process(</div><div class="line">            target=api_server.app.run</div><div class="line">        )</div><div class="line">        cls.api_server_process.start()</div><div class="line">        time.sleep(<span class="number">0.1</span>)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></div><div class="line">        cls.api_server_process.terminate()</div></pre></td></tr></table></figure>
<p>这里采用的是多进程的方式（<code>multiprocessing</code>），所以我们的单元测试用例可以和API接口服务（<code>Mock Server</code>）同时运行。除了多进程的方式，我看到<code>locust</code>项目采用的是<a href="https://github.com/locustio/locust/blob/master/locust/test/test_web.py" target="_blank" rel="external"><code>gevent.pywsgi.WSGIServer</code></a>的方式，不过由于在<code>gevent</code>中要实现异步需要先<code>monkey.patch_all()</code>，感觉比较麻烦，而且还需要引入<code>gevent</code>这么一个第三方依赖库，所以还是决定采用<code>multiprocessing</code>的方式了。至于为什么没有选择多线程模型（<code>threading</code>），是因为线程至不支持显式终止的（<code>terminate</code>），要实现终止服务会比使用<code>multiprocessing</code>更为复杂。</p>
<p>不过需要注意的是，由于启动<code>Server</code>存在一定的耗时，因此在启动完毕后必须要等待一段时间（本例中<code>0.1秒</code>就足够了），否则在执行单元测试用例时，调用的API接口可能还处于不可用状态。</p>
<p><code>ApiServerUnittest</code>基类就绪后，对于需要用到<code>Mock Server</code>的单元测试用例集，只需要继承<code>ApiServerUnittest</code>即可；其它的写法跟普通的单元测试完全一致。</p>
<p>例如，下例包含一个单元测试用例，测试“创建一个用户，该用户之前不存在”的场景。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tests/test_apiserver.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> ApiServerUnittest</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApiServer</span><span class="params">(ApiServerUnittest)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        super(TestApiServer, self).setUp()</div><div class="line">        self.host = <span class="string">"http://127.0.0.1:5000"</span></div><div class="line">        self.api_client = requests.Session()</div><div class="line">        self.clear_users()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        super(TestApiServer, self).tearDown()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_create_user_not_existed</span><span class="params">(self)</span>:</span></div><div class="line">        self.clear_users()</div><div class="line"></div><div class="line">        url = <span class="string">"%s/api/users/%d"</span> % (self.host, <span class="number">1000</span>)</div><div class="line">        data = &#123;</div><div class="line">            <span class="string">"name"</span>: <span class="string">"user1"</span>,</div><div class="line">            <span class="string">"password"</span>: <span class="string">"123456"</span></div><div class="line">        &#125;</div><div class="line">        resp = self.api_client.post(url, json=data)</div><div class="line"></div><div class="line">        self.assertEqual(<span class="number">201</span>, resp.status_code)</div><div class="line">        self.assertEqual(<span class="keyword">True</span>, resp.json()[<span class="string">"success"</span>])</div></pre></td></tr></table></figure>
<h2 id="为项目添加持续集成构建检查（Travis-CI）"><a href="#为项目添加持续集成构建检查（Travis-CI）" class="headerlink" title="为项目添加持续集成构建检查（Travis CI）"></a>为项目添加持续集成构建检查（Travis CI）</h2><p>当我们的项目具有单元测试之后，我们就可以为项目添加持续集成构建检查，从而在每次提交代码至<code>GitHub</code>时都运行测试，确保我们每次提交的代码都是可正常部署及运行的。</p>
<p>要实现这个功能，推荐使用<a href="https://travis-ci.org/" target="_blank" rel="external"><code>Travis CI</code></a>提供的服务，该服务对于GitHub公有仓库是免费的。要完成配置，操作也很简单，基本上只有三步：</p>
<ul>
<li>在<a href="https://travis-ci.org/" target="_blank" rel="external"><code>Travis CI</code></a>使用GitHub账号授权登录；</li>
<li>在<a href="https://travis-ci.org/" target="_blank" rel="external"><code>Travis CI</code></a>的个人<code>profile</code>页面开启需要持续集成的项目；</li>
<li>在<code>Github</code>项目的根目录下添加<code>.travis.yml</code>配置文件。</li>
</ul>
<p>大多数情况下，<code>.travis.yml</code>配置文件可以很简单，例如<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>的配置就只有如下几行：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sudo:</span> <span class="literal">false</span></div><div class="line"><span class="attr">language:</span> python</div><div class="line"><span class="attr">python:</span></div><div class="line"><span class="bullet">  -</span> <span class="number">2.7</span></div><div class="line"><span class="bullet">  -</span> <span class="number">3.3</span></div><div class="line"><span class="bullet">  -</span> <span class="number">3.4</span></div><div class="line"><span class="bullet">  -</span> <span class="number">3.5</span></div><div class="line"><span class="bullet">  -</span> <span class="number">3.6</span></div><div class="line"><span class="attr">install:</span></div><div class="line"><span class="bullet">  -</span> pip install -r requirements.txt</div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">  -</span> python -m unittest discover</div></pre></td></tr></table></figure>
<p>具体含义不用解释也可以很容易看懂，其中<code>install</code>中包含我们项目的依赖库安装命令，<code>script</code>中包含执行构建测试的命令。</p>
<p>配置完毕后，后续每次提交代码时，<code>GitHub</code>就会调用<code>Travis CI</code>实现构建检查；并且更赞的在于，构建检查可以同时在多个指定的<code>Python</code>版本环境中进行。</p>
<p>下图是某次提交代码时的构建结果。</p>
<p><img src="/images/travis-check-result.jpg" alt=""></p>
<p>另外，我们还可以在<code>GitHub</code>项目的<code>README.md</code>中添加一个<code>Status Image</code>，实时显示项目的构建状态，就像下图显示的样子。</p>
<p><img src="/images/github-readme-travis-status-image.jpg" alt=""></p>
<p>配置方式也是很简单，只需要先在<code>Travis CI</code>中获取到项目<code>Status Image</code>的URL地址，然后添加到<code>README.md</code>即可。</p>
<p><img src="/images/travis-status-image-url.jpg" alt=""></p>
<h2 id="为项目添加单元测试覆盖率检查（coveralls）"><a href="#为项目添加单元测试覆盖率检查（coveralls）" class="headerlink" title="为项目添加单元测试覆盖率检查（coveralls）"></a>为项目添加单元测试覆盖率检查（coveralls）</h2><p>对项目添加持续集成构建检查以后，就能完全保证我们提交的代码运行没问题么？</p>
<p>答案是并不能。试想，假如我们整个项目中就只有一条单元测试用例，甚至这一条单元测试用例还是个假用例，即没有调用任何代码，那么可想而知，我们的持续集成构建检查总是成功的，并没有起到检查的作用。</p>
<p>因此，这里还涉及到一个单元测试覆盖率的问题。</p>
<p>怎么理解单元测试覆盖率呢？简单地说，就是我们在执行单元测试时运行代码的行数，与项目总代码数的比值。</p>
<p>对于主流的编程语言，都存在大量的覆盖率检查工具，可以帮助我们快速统计单元测试覆盖率。在Python中，用的最多的覆盖率检查工具是<a href="https://coverage.readthedocs.io" target="_blank" rel="external"><code>coverage</code></a>。</p>
<p>要使用<a href="https://coverage.readthedocs.io" target="_blank" rel="external"><code>coverage</code></a>，需要先进行安装，采用<code>pip</code>的安装方式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install coverage</div></pre></td></tr></table></figure>
<p>然后，我们就可以采用如下命令执行单元测试。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ coverage run --source=ate -m unittest discover</div></pre></td></tr></table></figure>
<p>这里需要说明的是，<code>--source</code>参数的作用是指定统计的目录，如果不指定该参数，则会将所有依赖库也计算进去，但由于很多依赖库在安装时是没有包含测试代码的，因此会造成统计得到的单元测试覆盖率远低于实际的情况。在上面的命令中，就只统计了<code>ate</code>目录下的单元测试覆盖率；如果要统计当前项目的覆盖率，那么可以指定<code>--source=.</code>（即当前目录下的所有子文夹）。</p>
<p>采用上述命令执行完单元测试后，会在当前目录下生成一个统计结果文件，<code>.coverage</code>，里面包含了详细的统计结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cat .coverage</div><div class="line">!coverage.py: This is a private format, don&apos;t read it directly!&#123;&quot;lines&quot;:&#123;&quot;/Users/Leo/MyProjects/ApiTestEngine/ate/__init__.py&quot;:[1],&quot;/Users/Leo/MyProjects/</div><div class="line">ApiTestEngine/ate/testcase.py&quot;:[1,2,4,6,9,15,42,7,12,40,46,64,67,68,69,70,48,49,62,72,74,13,65,51,52,53,56,60,58,54,55],&quot;/Users/Leo/MyProjects/ApiTestEngi</div><div class="line">ne/ate/exception.py&quot;:[2,4,5,9,12,15,16,6,7],&quot;/Users/Leo/MyProjects/ApiTestEngine/ate/utils.py&quot;:[1,2,3,4,5,7,9,11,12,14,15,18,22,25,47,51,55,65,77,90,129,1</div><div class="line">41,27,31,32,19,20,23,34,41,43,45,56,57,59,60,48,49,154,163,166,170,172,173,174,176,177,181,182,183,186,187,189,91,92,66,67,72,73,74,94,95,97,98,101,102,78</div><div class="line">,80,81,82,84,85,88,103,104,106,108,110,115,121,122,124,125,127,58,52,53,184,185,109,116,118,119,112,113,132,134,135,136,137,139,63,164,155,157,158,159,161</div><div class="line">,167,168,192,68,69],&quot;/Users/Leo/MyProjects/ApiTestEngine/ate/context.py&quot;:[1,3,5,6,10,16,30,45,7,8,25,26,28,41,42,43,49,55,58,59,63,64,56,74,65,68,69,72,66</div><div class="line">,27,13,14,50,53,52,70],&quot;/Users/Leo/MyProjects/ApiTestEngine/ate/main.py&quot;:[1,2,4,7,9,10,15,21,38,51,25,27,28,29,30,32,33,11,12,13,34,36,42,43,45,46,47,49],</div><div class="line">&quot;/Users/Leo/MyProjects/ApiTestEngine/ate/runner.py&quot;:[1,3,4,5,8,10,15,46,68,97,135,11,12,13,35,36,38,39,41,42,44,82,63,65,66,84,86,87,88,92,93,94,95,124,12</div><div class="line">6,127,128,129,130,131,133,154]&#125;&#125;%</div></pre></td></tr></table></figure>
<p>但是，这个结果就不是给人看的。要想直观地看到统计报告，需要再执行命令<code>coverage report -m</code>，执行完后，就可以看到详细的统计数据了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  ApiTestEngine git:(master) ✗ coverage report -m</div><div class="line">Name               Stmts   Miss  Cover   Missing</div><div class="line">------------------------------------------------</div><div class="line">ate/__init__.py        0      0   100%</div><div class="line">ate/context.py        35      0   100%</div><div class="line">ate/exception.py      11      2    82%   10, 13</div><div class="line">ate/main.py           34      7    79%   18-19, 54-62</div><div class="line">ate/runner.py         44      2    95%   89-90</div><div class="line">ate/testcase.py       30      0   100%</div><div class="line">ate/utils.py         112      8    93%   13, 29, 36-39, 178-179</div><div class="line">------------------------------------------------</div><div class="line">TOTAL                266     19    93%</div></pre></td></tr></table></figure>
<p>通过这个报告，可以看到项目整体的单元测试覆盖率为<code>93%</code>，并清晰地展示了每个源代码文件的具体覆盖率数据，以及没有覆盖到的代码行数。</p>
<p>那要怎么将覆盖率检查添加到我们的持续集成（Travis CI）中呢？</p>
<p>事实上，当前存在多个可选服务，可以与<code>Travis CI</code>配合使用。当前，使用得比较广泛的是<a href="https://coveralls.io" target="_blank" rel="external"><code>coveralls</code></a>，针对Public类型的GitHub仓库，这也是一个免费服务。</p>
<p><a href="https://coveralls.io" target="_blank" rel="external"><code>coveralls</code></a>的使用方式与<a href="https://travis-ci.org/" target="_blank" rel="external"><code>Travis CI</code></a>类似，也需要先在<a href="https://coveralls.io" target="_blank" rel="external"><code>coveralls</code></a>网站上采用GitHub账号授权登录，然后开启需要进行检查的GitHub仓库。而要执行的命令，也可以在<code>.travis.yml</code>配置文件中指定。</p>
<p>增加覆盖率检查后的<code>.travis.yml</code>配置文件内容如下。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sudo:</span> <span class="literal">false</span></div><div class="line"><span class="attr">language:</span> python</div><div class="line"><span class="attr">python:</span></div><div class="line"><span class="bullet">  -</span> <span class="number">2.7</span></div><div class="line"><span class="bullet">  -</span> <span class="number">3.3</span></div><div class="line"><span class="bullet">  -</span> <span class="number">3.4</span></div><div class="line"><span class="bullet">  -</span> <span class="number">3.5</span></div><div class="line"><span class="bullet">  -</span> <span class="number">3.6</span></div><div class="line"><span class="attr">install:</span></div><div class="line"><span class="bullet">  -</span> pip install -r requirements.txt</div><div class="line"><span class="bullet">  -</span> pip install coverage</div><div class="line"><span class="bullet">  -</span> pip install coveralls</div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">  -</span> coverage run --source=. -m unittest discover</div><div class="line"><span class="attr">after_success:</span></div><div class="line"><span class="bullet">  -</span> coveralls</div></pre></td></tr></table></figure>
<p>如上配置应该也很好理解，要使用<code>coveralls</code>的服务，需要先安装<code>coveralls</code>。在采用<code>coverage</code>执行完单元测试后，要将结果上报到<a href="https://coveralls.io" target="_blank" rel="external"><code>coveralls</code></a>网站，需要再执行<code>coveralls</code>命令。由于<code>coveralls</code>命令只有在测试覆盖率检查成功以后运行才有意义，因此可将其放在<code>after_success</code>部分。</p>
<p>配置完毕后，后续每次提交代码时，<code>GitHub</code>就会调用<code>Travis CI</code>实现构建检查，并同时统计得到单元测试覆盖率。</p>
<p>下图是某次提交代码时的覆盖率检查。</p>
<p><img src="/images/coveralls-result.jpg" alt=""></p>
<p>另外，我们在<code>GitHub</code>项目的<code>README.md</code>中也同样可以添加一个<code>Status Image</code>，实时显示项目的单元测试覆盖率。</p>
<p><img src="/images/github-coveralls-badge.jpg" alt=""></p>
<p>配置方式也跟之前类似，在<a href="https://coveralls.io" target="_blank" rel="external"><code>coveralls</code></a>中获取到项目<code>Status Image</code>的URL地址，然后添加到<code>README.md</code>即可。</p>
<p><img src="/images/coveralls-image-url.jpg" alt=""></p>
<p>最后需要说明的是，项目的单元测试覆盖率只能起到参考作用，没有被单元测试覆盖到的代码我们不能说它肯定有问题，100%覆盖率的代码也并不能保证它肯定没有问题。归根结底，这还是要依赖于单元测试的策略实现，因此我们在写单元测试的时候也要尽可能多地覆盖到各种逻辑路径，以及兼顾到各种异常情况。</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>通过本文中的工作，我们就对项目搭建好了测试框架，并实现了持续集成构建检查机制。从下一篇开始，我们就将开始逐步实现接口自动化测试框架的核心功能特性了。</p>
<h2 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h2><ul>
<li><a href="http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/">《接口自动化测试的最佳工程实践（ApiTestEngine）》</a></li>
<li><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code> GitHub源码</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/&quot;&gt;《接口自动化测试的最佳工程实践（ApiTestEngine）》&lt;/a&gt;一文中，我详细介绍了&lt;a href=&quot;https://
    
    </summary>
    
    
      <category term="自动化测试" scheme="http://debugtalk.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试框架" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Mock" scheme="http://debugtalk.com/tags/Mock/"/>
    
      <category term="ApiTestEngine" scheme="http://debugtalk.com/tags/ApiTestEngine/"/>
    
  </entry>
  
  <entry>
    <title>接口自动化测试的最佳工程实践（ApiTestEngine）</title>
    <link href="http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/"/>
    <id>http://debugtalk.com/post/ApiTestEngine-api-test-best-practice/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2017-06-28T06:23:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当前市面上存在的接口测试工具已经非常多，常见的如<code>Postman</code>、<code>JMeter</code>、<code>RobotFramework</code>等，相信大多数测试人员都有使用过，至少从接触到的大多数简历的描述上看是这样的。除了这些成熟的工具，也有很多有一定技术能力的测试（开发）人员自行开发了一些接口测试框架，质量也是参差不齐。</p>
<p>但是，当我打算在项目组中推行接口自动化测试时，搜罗了一圈，也没有找到一款特别满意的工具或框架，总是与理想中的构想存在一定的差距。</p>
<p>那么理想中的接口自动化测试框架应该是怎样的呢？</p>
<p>测试工具（框架）脱离业务使用场景都是耍流氓！所以我们不妨先来看下日常工作中的一些常见场景。</p>
<ul>
<li>测试或开发人员在定位问题的时候，想调用某个接口查看其是否响应正常；</li>
<li>测试人员在手工测试某个功能点的时候，需要一个订单号，而这个订单号可以通过顺序调用多个接口实现下单流程；</li>
<li>测试人员在开始版本功能测试之前，可以先检测下系统的所有接口是否工作正常，确保接口正常后再开始手工测试；</li>
<li>开发人员在提交代码前需要检测下新代码是否对系统的已有接口产生影响；</li>
<li>项目组需要每天定时检测下测试环境所有接口的工作情况，确保当天的提交代码没有对主干分支的代码造成破坏；</li>
<li>项目组需要定时（30分钟）检测下生产环境所有接口的工作情况，以便及时发现生产环境服务不可用的情况；</li>
<li>项目组需要不定期对核心业务场景进行性能测试，期望能减少人力投入，直接复用接口测试中的工作成果。</li>
</ul>
<p>可以看到，以上罗列的场景大家应该都很熟悉，这都是我们在日常工作中经常需要去做的事情。但是在没有一款合适工具的情况下，效率往往十分低下，或者就是某些重要工作压根就没有开展，例如接口回归测试、线上接口监控等。</p>
<p>先说下最简单的手工调用接口测试。可能有人会说，<code>Postman</code>就可以满足需求啊。的确，<code>Postman</code>作为一款通用的接口测试工具，它可以构造接口请求，查看接口响应，从这个层面上来说，它是满足了接口测试的功能需求。但是在具体的项目中，使用<code>Postman</code>并不是那么高效。</p>
<p>不妨举个最常见的例子。</p>
<blockquote>
<p>某个接口的请求参数非常多，并且接口请求要求有<code>MD5</code>签名校验；签名的方式为在Headers中包含一个<code>sign</code>参数，该参数值通过对<code>URL</code>、<code>Method</code>、<code>Body</code>的拼接字符串进行<code>MD5</code>计算后得到。</p>
</blockquote>
<p>回想下我们要对这个接口进行测试时是怎么做的。首先，我们需要先参照接口文档的描述，手工填写完所有接口参数；然后，按照签名校验方式，对所有参数值进行拼接得到一个字符串，在另一个MD5计算工具计算得到其MD5值，将签名值填入<code>sign</code>参数；最后，才是发起接口请求，查看接口响应，并人工检测响应是否正常。最坑爹的是，我们每次需要调用这个接口的时候，以上工作就得重新来一遍。这样的实际结果是，面对参数较多或者需要签名验证的接口时，测试人员可能会选择忽略不进行接口测试。</p>
<p>除了单个接口的调用，很多时候我们也需要组合多个接口进行调用。例如测试人员在测试物流系统时，经常需要一个特定组合条件下生成的订单号。而由于订单号关联的业务较多，很难直接在数据库中生成，因此当前业务测试人员普遍采取的做法，就是每次需要订单号时模拟下单流程，顺序调用多个相应的接口来生成需要的订单号。可以想象，在手工调用单个接口都如此麻烦的情况下，每次都要手工调用多个接口会有多么的费时费力。</p>
<p>再说下接口自动化调用测试。这一块儿大多接口测试框架都支持，普遍的做法就是通过代码编写接口测试用例，或者采用数据驱动的方式，然后在支持命令行（CLI）调用的情况下，就可以结合<code>Jenkins</code>或者<code>crontab</code>实现持续集成，或者定时接口监控的功能。</p>
<p>思路是没有问题的，问题在于实际项目中的推动落实情况。要说自动化测试用例最靠谱的维护方式，还是直接通过代码编写测试用例，可靠且不失灵活性，这也是很多经历过惨痛教训的老手的感悟，甚至网络上还出现了一些反测试框架的言论。但问题在于项目中的测试人员并不是都会写代码，也不是对其强制要求就能马上学会的。这种情况下，要想在具体项目中推动接口自动化测试就很难，就算我可以帮忙写一部分，但是很多时候接口测试用例也是要结合业务逻辑场景的，我也的确是没法在这方面投入太多时间，毕竟对接的项目实在太多。所以也是基于这类原因，很多测试框架提倡采用数据驱动的方式，将业务测试用例和执行代码分离。不过由于很多时候业务场景比较复杂，大多数框架测试用例模板引擎的表达能力不足，很难采用简洁的方式对测试场景进行描述，从而也没法很好地得到推广使用。</p>
<p>可以列举的问题还有很多，这些也的确都是在互联网企业的日常测试工作中真实存在的痛点。</p>
<p>基于以上背景，我产生了开发<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>的想法。</p>
<p>对于<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>的定位，与其说它是一个工具或框架，它更多的应该是一套接口自动化测试的最佳工程实践，而<code>简洁优雅实用</code>应该是它最核心的特点。</p>
<p>当然，每位工程师对<code>最佳工程实践</code>的理念或多或少都会存在一些差异，也希望大家能多多交流，在思维的碰撞中共同进步。</p>
<h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><p><a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>的核心特性概述如下：</p>
<ul>
<li>支持API接口的多种请求方法，包括 GET/POST/HEAD/PUT/DELETE 等</li>
<li>测试用例与代码分离，测试用例维护方式简洁优雅，支持<code>YAML</code></li>
<li>测试用例描述方式具有表现力，可采用简洁的方式描述输入参数和预期输出结果</li>
<li>接口测试用例具有可复用性，便于创建复杂测试场景</li>
<li>测试执行方式简单灵活，支持单接口调用测试、批量接口调用测试、定时任务执行测试</li>
<li>测试结果统计报告简洁清晰，附带详尽日志记录，包括接口请求耗时、请求响应数据等</li>
<li>身兼多职，同时实现接口管理、接口自动化测试、接口性能测试（结合Locust）</li>
<li>具有可扩展性，便于扩展实现Web平台化</li>
</ul>
<h2 id="特性拆解介绍"><a href="#特性拆解介绍" class="headerlink" title="特性拆解介绍"></a>特性拆解介绍</h2><blockquote>
<p>支持API接口的多种请求方法，包括 GET/POST/HEAD/PUT/DELETE 等</p>
</blockquote>
<p>个人偏好，编程语言选择Python。而采用Python实现HTTP请求，最好的方式就是采用<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>库了，简洁优雅，功能强大。</p>
<blockquote>
<p>测试用例与代码分离，测试用例维护方式简洁优雅，支持<code>YAML</code></p>
</blockquote>
<p>要实现测试用例与代码的分离，最好的做法就是做一个测试用例加载引擎和一个测试用例执行引擎，这也是之前在做<a href="https://github.com/debugtalk/AppiumBooster" target="_blank" rel="external"><code>AppiumBooster</code></a>框架的时候总结出来的最优雅的实现方式。当然，这里需要事先对测试用例制定一个标准的数据结构规范，作为测试用例加载引擎和测试用例执行引擎的桥梁。</p>
<p>需要说明的是，测试用例数据结构必须包含接口测试用例完备的信息要素，包括接口请求的信息内容（URL、Headers、Method等参数），以及预期的接口请求响应结果（StatusCode、ResponseHeaders、ResponseContent）。</p>
<p>这样做的好处在于，不管测试用例采用什么形式进行描述（<a href="http://pyyaml.org/" target="_blank" rel="external"><code>YAML</code></a>、JSON、CSV、Excel、XML等），也不管测试用例是否采用了业务分层的组织思想，只要在测试用例加载引擎中实现对应的转换器，都可以将业务测试用例转换为标准的测试用例数据结构。而对于测试用例执行引擎而言，它无需关注测试用例的具体描述形式，只需要从标准的测试用例数据结构中获取到测试用例信息要素，包括接口请求信息和预期接口响应信息，然后构造并发起HTTP请求，再将HTTP请求的响应结果与预期结果进行对比判断即可。</p>
<p>至于为什么明确说明支持<a href="http://pyyaml.org/" target="_blank" rel="external"><code>YAML</code></a>，这是因为个人认为这是最佳的测试用例描述方式，表达简洁不累赘，同时也能包含非常丰富的信息。当然，这只是个人喜好，如果喜欢采用别的方式，只需要扩展实现对应的转换器即可。</p>
<blockquote>
<p>测试用例描述方式具有表现力，可采用简洁的方式描述输入参数和预期输出结果</p>
</blockquote>
<p>测试用例与框架代码分离以后，对业务逻辑测试场景的描述重任就落在测试用例上了。比如我们选择采用<a href="http://pyyaml.org/" target="_blank" rel="external"><code>YAML</code></a>来描述测试用例，那么我们就应该能在<a href="http://pyyaml.org/" target="_blank" rel="external"><code>YAML</code></a>中描述各种复杂的业务场景。</p>
<p>那么怎么理解这个“表现力”呢？</p>
<p>简单的参数值传参应该都容易理解，我们举几个相对复杂但又比较常见的例子。</p>
<ul>
<li>接口请求参数中要包含当前的时间戳；</li>
<li>接口请求参数中要包含一个16位的随机字符串；</li>
<li>接口请求参数中包含签名校验，需要对多个请求参数进行拼接后取md5值；</li>
<li>接口响应头（Headers）中要包含一个<code>X-ATE-V</code>头域，并且需要判断该值是否大于100；</li>
<li>接口响应结果中包含一个字符串，需要校验字符串中是否包含10位长度的订单号；</li>
<li>接口响应结果为一个多层嵌套的json结构体，需要判断某一层的某一个元素值是否为True。</li>
</ul>
<p>可以看出，以上几个例子都是没法直接在测试用例里面描述参数值的。如果是采用Python脚本来编写测试用例还好解决，只需要通过Python函数实现即可。但是现在测试用例和框架代码分离了，我们没法在<a href="http://pyyaml.org/" target="_blank" rel="external"><code>YAML</code></a>里面执行Python函数，这该怎么办呢？</p>
<p>答案就是，定义函数转义符，实现自定义模板。</p>
<p>这种做法其实也不难理解，也算是模板语言通用的方式。例如，我们将<code>${}</code>定义为转义符，那么在<code>{}</code>内的内容就不再当做是普通的字符串，而应该转义为变量值，或者执行函数得到实际结果。当然，这个需要我们在测试用例执行引擎进行适配实现，最简单方式就是提取出<code>${}</code>中的字符串，通过<code>eval</code>计算得到表达式的值。如果要实现更复杂的功能，我们也可以将接口测试中常用的一些功能封装为一套关键字，然后在编写测试用例的时候使用这些关键字。</p>
<blockquote>
<p>接口测试用例具有可复用性，便于创建复杂测试场景</p>
</blockquote>
<p>很多情况下，系统的接口都是有业务逻辑关联的。例如，要请求调用登录接口，需要先请求获取验证码的接口，然后在登录请求中带上获取到的验证码；而要请求数据查询的接口，又要在请求参数中包含登录接口返回的session值。这个时候，我们如果针对每一个要测的业务逻辑，都单独描述要请求的接口，那么就会造成大量的重复描述，测试用例的维护也十分臃肿。</p>
<p>比较好的做法是，将每一个接口调用单独封装为一条测试用例，然后在描述业务测试场景时，选择对应的接口，按照顺序拼接为业务场景测试用例，就像搭积木一般。如果你之前读过<a href="https://github.com/debugtalk/AppiumBooster" target="_blank" rel="external"><code>AppiumBooster</code></a>的介绍，应该还会联想到，我们可以将常用的功能组成模块用例集，然后就可以在更高的层面对模块用例集进行组装，实现更复杂的测试场景。</p>
<p>不过，这里有一个非常关键的问题需要解决，就是如何在接口测试用例之前传参的问题。其实实现起来也不复杂，我们可以在接口请求响应结果中指定一个变量名，然后将接口返回关键值提取出来后赋值给那个变量；然后在其它接口请求参数中，传入这个<code>${变量名}</code>即可。</p>
<blockquote>
<p>测试执行方式简单灵活，支持单接口调用测试、批量接口调用测试、定时任务执行测试</p>
</blockquote>
<p>通过背景中的例子可以看出，需要使用接口测试工具的场景很多，除了定时地对所有接口进行自动化测试检测外，很多时候在手工测试的时候也需要采用接口测试工具进行辅助，也就是<code>半手工+半自动化</code>的模式。</p>
<p>而业务测试人员在使用测试工具的时候，遇到的最大问题在于除了需要关注业务功能本身，还需要花费很多时间去处理技术实现细节上的东西，例如签名校验这类情况，而且往往后者在重复操作中占用的时间更多。</p>
<p>这个问题的确是没法避免的，毕竟不同系统的接口千差万别，不可能存在一款工具可以自动处理所有情况。但是我们可以尝试将接口的技术细节实现和业务参数进行拆分，让业务测试人员只需要关注业务参数部分。</p>
<p>具体地，我们可以针对每一个接口配置一个模板，将其中与业务功能无关的参数以及技术细节封装起来，例如签名校验、时间戳、随机值等，而与业务功能相关的参数配置为可传参的模式。</p>
<p>这样做的好处在于，与业务功能无关的参数以及技术细节我们只需要封装配置一次，而且这个工作可以由开发人员或者测试开发人员来实现，减轻业务测试人员的压力；接口模板配置好后，测试人员只需要关注与业务相关的参数即可，结合业务测试用例，就可以在接口模板的基础上很方便地配置生成多个接口测试用例。</p>
<blockquote>
<p>测试结果统计报告简洁清晰，附带详尽日志记录，包括接口请求耗时、请求响应数据等</p>
</blockquote>
<p>测试结果统计报告，应该遵循简洁而不简单的原则。“简洁”，是因为大多数时候我们只需要在最短的时间内判断所有接口是否运行正常即可。而“不简单”，是因为当存在执行失败的测试用例时，我们期望能获得接口测试时尽可能详细的数据，包括测试时间、请求参数、响应内容、接口响应耗时等。</p>
<p>之前在读<code>locust</code>源码时，其对<a href="https://github.com/locustio/locust/blob/master/locust/clients.py" target="_blank" rel="external"><code>HTTP</code>客户端</a>的封装方式给我留下了深刻的印象。它采用的做法是，继承<code>requests.Session</code>类，在子类<code>HttpSession</code>中重写覆盖了<code>request</code>方法，然后在<code>request</code>方法中对<code>requests.Session.request</code>进行了一层封装。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">request_meta = &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment"># set up pre_request hook for attaching meta data to the request object</span></div><div class="line">request_meta[<span class="string">"method"</span>] = method</div><div class="line">request_meta[<span class="string">"start_time"</span>] = time.time()</div><div class="line"></div><div class="line">response = self._send_request_safe_mode(method, url, **kwargs)</div><div class="line"></div><div class="line"><span class="comment"># record the consumed time</span></div><div class="line">request_meta[<span class="string">"response_time"</span>] = int((time.time() - request_meta[<span class="string">"start_time"</span>]) * <span class="number">1000</span>)</div><div class="line"></div><div class="line">request_meta[<span class="string">"content_size"</span>] = int(response.headers.get(<span class="string">"content-length"</span>) <span class="keyword">or</span> <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>而<code>HttpLocust</code>的每一个虚拟用户（client）都是一个<code>HttpSession</code>实例，这样每次在执行<code>HTTP</code>请求的时候，既可充分利用<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>库的强大功能，同时也能将请求的响应时间、响应体大小等原始性能数据进行保存，实现可谓十分优雅。</p>
<p>受到该处启发，要保存接口的详细请求响应数据也可采用同样的方式。例如，要保存<code>Response</code>的<code>Headers</code>、<code>Body</code>只需要增加如下两行代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">request_meta[<span class="string">"response_headers"</span>] = response.headers</div><div class="line">request_meta[<span class="string">"response_content"</span>] = response.content</div></pre></td></tr></table></figure>
<blockquote>
<p>身兼多职，同时实现接口管理、接口自动化测试、接口性能测试（结合Locust）</p>
</blockquote>
<p>其实像接口性能测试这样的需求，不应该算到接口自动化测试框架的职责范围之内。但是在实际项目中需求就是这样，又要做接口自动化测试，又要做接口性能测试，而且还不想同时维护两套代码。</p>
<p>多亏有了<code>locust</code>性能测试框架，接口自动化和性能测试脚本还真能合二为一。</p>
<p>前面也讲了，<code>HttpLocust</code>的每一个虚拟用户（client）都是一个<code>HttpSession</code>实例，而<code>HttpSession</code>又继承自<code>requests.Session</code>类，所以<code>HttpLocust</code>的每一个虚拟用户（client）也是<code>requests.Session</code>类的实例。</p>
<p>同样的，我们在用<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>库做接口测试时，请求客户端其实也是<code>requests.Session</code>类的实例，只是我们通常用的是<code>requests</code>的简化用法。</p>
<p>以下两种用法是等价的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resp = requests.get(<span class="string">'http://debugtalk.com'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 等价于</span></div><div class="line">client = requests.Session()</div><div class="line">resp = client.get(<span class="string">'http://debugtalk.com'</span>)</div></pre></td></tr></table></figure>
<p>有了这一层关系以后，要在接口自动化测试和性能测试之间切换就很容易了。在接口测试框架内，可以通过如下方式初始化<code>HTTP</code>客户端。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, origin, kwargs, http_client_session=None)</span>:</span></div><div class="line">   self.http_client_session = http_client_session <span class="keyword">or</span> requests.Session()</div></pre></td></tr></table></figure>
<p>默认情况下，<code>http_client_session</code>是<code>requests.Session</code>的实例，用于进行接口测试；当需要进行性能测试时，只需要传入<code>locust</code>的<code>HttpSession</code>实例即可。</p>
<blockquote>
<p>具有可扩展性，便于扩展实现Web平台化</p>
</blockquote>
<p>当要将测试平台推广至更广阔的用户群体（例如产品经理、运营人员）时，对框架实现Web化就在所难免了。在Web平台上查看接口测试用例运行情况、对接口模块进行配置、对接口测试用例进行管理，的确会便捷很多。</p>
<p>不过对于接口测试框架来说，<code>Web平台</code>只能算作锦上添花的功能。我们在初期可以优先实现命令行（CLI）调用方式，规范好数据存储结构，后期再结合Web框架（如Flask）增加实现Web平台功能。</p>
<h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>以上便是我对<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>特性的详细介绍，也算是我个人对接口自动化测试<code>最佳工程实践</code>的理念阐述。</p>
<p>当前，<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external"><code>ApiTestEngine</code></a>还处于开发过程中，代码也开源托管在GitHub上，欢迎<code>Star</code>关注。</p>
<p>GitHub项目地址：<a href="https://github.com/debugtalk/ApiTestEngine" target="_blank" rel="external">https://github.com/debugtalk/ApiTestEngine</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://debugtalk.com/post/build-ideal-app-automation-test-framework/">《打造心目中理想的自动化测试框架（AppiumBooster）》</a></li>
<li><a href="http://myzhan.github.io/2016/03/04/giving-up-robotframework/" target="_blank" rel="external">《告别robotframework》</a></li>
<li><a href="https://github.com/svanoort/pyresttest/blob/master/advanced_guide.md" target="_blank" rel="external">《Advanced Guide For PyRestTest》</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;当前市面上存在的接口测试工具已经非常多，常见的如&lt;code&gt;Postman&lt;/code&gt;、&lt;code&gt;JMeter&lt;/code&gt;、&lt;code
    
    </summary>
    
    
      <category term="自动化测试" scheme="http://debugtalk.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试框架" scheme="http://debugtalk.com/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ApiTestEngine" scheme="http://debugtalk.com/tags/ApiTestEngine/"/>
    
      <category term="接口测试" scheme="http://debugtalk.com/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【科普】互联网测试岗位的工作日常</title>
    <link href="http://debugtalk.com/post/introduction-to-testing-engineer-daily-work/"/>
    <id>http://debugtalk.com/post/introduction-to-testing-engineer-daily-work/</id>
    <published>2017-06-14T16:00:00.000Z</published>
    <updated>2017-06-15T07:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期公司新来了一批实习生，公司也组织了大量的人力物力对实习生的进行培训。不得不说，公司的确在朝”大公司“的方向发展，各项制度福利也在逐步完善。以前别说是实习生了，不管是社招还是校招来的人，都是入职后就直接上岗，哪有这么多培训机会。</p>
<p>分配给我的任务是对我们质量部的岗位进行介绍，给实习生们讲解下我们测试工程师的工作日常情况。由于面向的都是新人，而且各种岗位的都有，因此也只能是科普介绍了。当时也没有准备PPT，就是提前想了几个主题点，然后就简单展开讲了下。</p>
<p>培训结束后感觉这个科普可能对于刚毕业或者还没有毕业的同学还是有一些价值的，因此就将今天讲的内容整理为文字。老司机们就不用看了，我们后续再聊。</p>
<p>——— 分割线 ———</p>
<p>大家好，我是李隆，当前在互联网事业部的质量部做测试开发岗位。在之前的培训中，大家应该知道了，当前我们质量部共分为三类岗位，分别是QA、测试和测试开发。不知道大家有没有想过，为什么要这么划分？这三类岗位的区别和联系在哪里？</p>
<p>这就要从质量部的名称说起了。在日常工作中，通常我们都是说产品、开发、测试、运维，那为什么我们不是叫做测试部，而是叫质量部呢？这是因为，站在软件工程的角度，测试只是手段，而保障项目质量才是我们的最终目的。</p>
<p>那么，”质量“这两个字要怎么理解呢？这是一个非常大的问题，我的确也没法单纯从字面上给大家解释它的完整含义。那我们不妨换个角度，先来看下日常工作中哪些情况会对项目质量造成影响，或者说当出现哪些现象时，就可以说明我们的项目质量存在问题。</p>
<ul>
<li>开发提交的代码里面有bug。这个应该是最常见的，也是大家最熟悉的质量问题了。</li>
<li>产品的需求描述不清楚，或者需求里面有隐藏的业务逻辑问题，甚至压根就没有需求文档，完全是”一句话需求“。可以想象，这种情况通常造成的后果就是开发到后期才会发现与预期需求不符，严重的甚至造成返工的后果。</li>
<li>开发人员没有写单元测试，项目没有版本规划，提测比较随意并且没有自测。这种情况通常就会造成所有人员都很忙，天天加班，但是项目质量问题越来越多。</li>
<li>运维人员操作没有规范指引，也没有风险预案机制，说不定哪天某个运维人员没睡醒，一不小心就”删库“然后”跑路“了。</li>
<li>测试人员没有测试策略，设计的测试用例仅局限于UI功能层面，难以实现核心业务逻辑的覆盖，也无法发现深层次的问题。</li>
<li>测试人员需要做大量的重复性回归测试，也没有引入自动化测试机制，造成要么没有回归测试，要么测试耗费大量人力和时间成本。</li>
</ul>
<p>还可以列出来的内容还有很多，不难看出，以上每一种情况都会造成项目质量出现问题，而且很多看似跟测试不直接相关的情况，往往造成的质量问题比单纯的代码bug更严重。而如果我们只是单纯地从软件测试的角度去考虑的话，我们会遗漏很多问题，项目整体质量也没法得到保障。相信你们这时应该会明白，质量部这个名称的真正含义了。</p>
<p>通过以上实例，可以看出质量部可以做的事情，以及必须要去做的事情非常多，但是这个范围又这么广，毕竟术业有专攻，不可能要求每个人都能做到那么多，所以我们质量部才有了岗位划分。</p>
<p>先来说下QA这个岗位，这个岗位主要是做什么的呢？还是回到前面提到的案例，当项目团队没有规范流程的时候，项目质量是很难保障的，往往都会有事倍功半的情况。当团队处于这种状态的时候，QA应该是第一个站出来，让项目组的所有人员认识到流程规范的重要性，并且牵头来制定和梳理流程，包括产品需求应该写成什么样才算规范，版本发版周期定为怎样才算合适，测试人员的用例规范，验收标准，以及运维人员应该有怎样的操作规范，等等。当规范建立起来后，QA也会参与到日常的测试工作中去，除了单纯的测试工作外，QA还需要对项目规范流程进行监督，发掘在实际工作中有哪些是不符合流程规范的，或者哪些流程规范是可以改进的，然后再协同各方人员来一起优化。可以看出，QA这个岗位可能并不是要特别精通于某项测试技术，但是TA一定是要对项目质量有非常灵敏的嗅觉，总是能及时地发现当前项目中可能会影响项目质量的”坏味道“，及时地暴露问题，并且跟进问题的解决。</p>
<p>然后再来说下测试岗位。测试这个岗位应该是大家从感觉上最直观，也是业界大众普遍认知里负责软件测试的岗位。可能有人会觉得，测试这个岗位是产品开发周期的末端，只有等到研发开发完毕，提测以后才开始工作。其实不是这样的。一个好的测试人员，应该是关注项目开发周期的整个流程的。在产品需求出来后，测试就应该要参与产品需求评审，并利用自身在业务方面的测试经验积累，充分挖掘新版本需求可能存在的业务逻辑漏洞。在开发设计技术方案的时候，测试人员也要参与到技术评审，从软件测试的角度，挖掘技术方案中可能存在的技术漏洞。评审完成后，在开发还在编码实现的时候，就需要根据当前版本需求设计测试策略，编写测试用例。等到开发提交测试以后，才是开始大家普遍认知上的测试工作。具体地，对于测试岗位来说，这本来就是一个技术性的岗位，除了需要掌握多种测试理论方法外，还需要根据系统类型的实际测试需要，熟练使用对应的测试工具。测试类型也会很多，除了最基础的功能测试外，也会根据实际情况，对Web前端进行页面兼容性测试、对app进行客户端性能专项测试（启动时间、启动内存、流畅度、包大小等），对后台服务器端进行性能测试（响应时间、吞吐量等），对系统安全进行测试，等等。</p>
<p>最后再来说下测试开发，也就是当前我所在的这个岗位。那么测试开发要做什么呢？可能我讲一个之前的经历大家就清楚了。</p>
<blockquote>
<p>我上一家公司在阿里巴巴，当时也是做测试开发岗位。刚进公司的时候，组里的同事跟我说，欢迎来到”生促（畜）组“，看到我一脸懵逼，同事解释到，生产力促进组嘛。我说，这名字也太难听了吧。同事说，这还算好的了，知道以前其它组的叫我们什么吗？促（畜）生组，促进生产力组。<br>这么一对比，”生促组“听上去的确是优雅多了。</p>
</blockquote>
<p>可以看到，不管是”生促“还是”促生“，测试开发这个岗位的核心都是围绕着如何提升生产力，也就是工作效率上面。当然，提高生产力也分为两个层面。第一个层面是提高质量部内部测试人员的测试效率，当前我们也主要还停留在这个层面。前面的例子也说道，当测试人员需要进行大量的重复性回归测试的时候，或者在日常工作中存在简单重复低效的工作内容的时候，这个时候就需要测试开发人员来辅助开发相应的工具平台，常见的包括实现接口测试自动化、UI自动化、持续集成等，将测试人员从重复性的工作解放出来，从而能有更多的时间精力投入到探索性测试当中去。第二个层面呢，也是我们后续的工作目标，那就是提高整个研发团队的工作效率。当然这可能不是测试开发岗位就能独立完成的，这也需要联合开发和运维同学，一起梳理整个研发测试运维流程，然后从技术的角度去开发实现一些工具平台，从而让整个项目团队能更高效的运作。</p>
<p>当然，虽然存在着QA、测试、测试开发的岗位划分，但是在实际工作中并不会有特别严格的界限，只是相对来说工作重心有所侧重而已。就比如说，QA和测试开发岗位也是会参与到测试工作中的，因为如果你不熟悉测试，你怎么知道测试过程中存在哪些不规范的地方，你怎么知道测试在哪些地方存在低效的痛点？同样的，测试人员要更好地理解流程和规范，也需要参与到流程规范的制订讨论工作中；而要更好地实现对系统的测试，必定需要用到一些技术手段，甚至自身具备足够的编码能力，来开展专项测试、性能测试等测试工作，从而能更好地应用技术手段来保障项目质量。</p>
<p>以上便是我对质量部各个岗位工作内容的介绍，也非常欢迎各位到质量部来轮岗。</p>
<p>其实也可以毫不夸张地说，测试岗位对于一个刚接触互联网行业的新人来说，的确是一个非常适合从整体上快速了解行业的岗位。为什么这么说？因为从前面的介绍也可以看出来，测试岗位需要参与项目的整个流程，也需要跟各种角色的人员进行沟通交流，只要用心，就能快速地得到成长，并对各个岗位能有一个较清晰的认识，这对你们后续选择职业方向和岗位的时候也是非常有帮助的。</p>
<p>——— 分割线 ———</p>
<p>最后再发点小感悟。这次也算是第一次大量接触”95后“，直观的印象，的确是一个非常活跃的群体。一方面的体现，就是参与度很强，在每个主题讲解完成后，都有大量的提问，交流十分活跃；而另一方面，就是思维活跃，虽然实习生大多都是才大三，但是从提问的问题来看，他们的知识面很广，很多问题都可以看出是经过认真思考的，而且有些问题还很有深度。</p>
<p>不得不佩服的同时，再想想自己的年龄，不禁黯然神伤，啥也不说了，搬砖去了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期公司新来了一批实习生，公司也组织了大量的人力物力对实习生的进行培训。不得不说，公司的确在朝”大公司“的方向发展，各项制度福利也在逐步完善。以前别说是实习生了，不管是社招还是校招来的人，都是入职后就直接上岗，哪有这么多培训机会。&lt;/p&gt;
&lt;p&gt;分配给我的任务是对我们质量部
    
    </summary>
    
    
      <category term="个人成长" scheme="http://debugtalk.com/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
      <category term="培训" scheme="http://debugtalk.com/tags/%E5%9F%B9%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>使用pyenv管理多个Python版本依赖环境</title>
    <link href="http://debugtalk.com/post/use-pyenv-manage-multiple-python-virtualenvs/"/>
    <id>http://debugtalk.com/post/use-pyenv-manage-multiple-python-virtualenvs/</id>
    <published>2017-03-24T16:00:00.000Z</published>
    <updated>2017-06-15T07:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从接触Python以来，一直都是采用<a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external"><code>virtualenv</code></a>和<a href="https://pypi.python.org/pypi/virtualenvwrapper" target="_blank" rel="external"><code>virtualenvwrapper</code></a>来管理不同项目的依赖环境，通过<code>workon</code>、<code>mkvirtualenv</code>等命令进行虚拟环境切换，很是愉快。</p>
<p>然而，最近想让项目能兼容更多的Python版本，例如至少同时兼容<code>Python2.7</code>和<code>Python3.3+</code>，就发现采用之前的方式行不通了。</p>
<p>最大的问题在于，在本地计算机同时安装<code>Python2.7</code>和<code>Python3</code>后，即使分别针对两个Python版本安装了<code>virtualenv</code>和<code>virtualenvwrapper</code>，也无法让两个Python版本的<code>workon</code>、<code>mkvirtualenv</code>命令同时生效。另外一方面，要想在本地计算机安装多个Python版本，会发现安装的成本都比较高，实现方式也不够优雅。</p>
<p>幸运地是，针对该痛点，已经存在一个比较成熟的方案，那就是<a href="https://github.com/pyenv/pyenv" target="_blank" rel="external"><code>pyenv</code></a>。</p>
<p>如下是官方的介绍。</p>
<blockquote>
<p>pyenv lets you easily switch between multiple versions of Python. It’s simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.</p>
<p>This project was forked from <a href="https://github.com/rbenv/rbenv" target="_blank" rel="external">rbenv</a> and <a href="https://github.com/rbenv/ruby-build" target="_blank" rel="external">ruby-build</a>, and modified for Python.</p>
</blockquote>
<p>本文就针对<code>pyenv</code>最核心的功能进行介绍。</p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>如果要讲解<code>pyenv</code>的工作原理，基本上采用一句话就可以概括，那就是：修改系统环境变量<code>PATH</code>。</p>
<p>对于系统环境变量<code>PATH</code>，相信大家都不陌生，里面包含了一串由冒号分隔的路径，例如<code>/usr/local/bin:/usr/bin:/bin</code>。每当在系统中执行一个命令时，例如<code>python</code>或<code>pip</code>，操作系统就会在<code>PATH</code>的所有路径中从左至右依次寻找对应的命令。因为是依次寻找，因此排在左边的路径具有更高的优先级。</p>
<p>而<code>pyenv</code>做的，就是在<code>PATH</code>最前面插入一个<code>$(pyenv root)/shims</code>目录。这样，<code>pyenv</code>就可以通过控制<code>shims</code>目录中的Python版本号，来灵活地切换至我们所需的Python版本。</p>
<p>如果还想了解更多细节，可以查看<a href="https://github.com/pyenv/pyenv" target="_blank" rel="external"><code>pyenv</code></a>的文档介绍及其源码实现。</p>
<h2 id="环境初始化"><a href="#环境初始化" class="headerlink" title="环境初始化"></a>环境初始化</h2><p><code>pyenv</code>的安装方式包括多种，重点推荐采用<a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="external"><code>pyenv-installer</code></a>的方式，原因主要有两点：</p>
<ul>
<li>通过<code>pyenv-installer</code>可一键安装<code>pyenv</code>全家桶，后续也可以很方便地实现一键升级；</li>
<li><code>pyenv-installer</code>的安装方式基于<code>GitHub</code>，可保证总是使用到最新版本的<code>pyenv</code>，并且<code>Python</code>版本库也是最新最全的。</li>
</ul>
<h3 id="install-amp-amp-config"><a href="#install-amp-amp-config" class="headerlink" title="install &amp;&amp; config"></a>install &amp;&amp; config</h3><p>通过如下命令安装<code>pyenv</code>全家桶。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash</div></pre></td></tr></table></figure>
<p>内容除了包含<code>pyenv</code>以外，还包含如下插件：</p>
<ul>
<li><code>pyenv-doctor</code></li>
<li><code>pyenv-installer</code></li>
<li><code>pyenv-update</code></li>
<li><code>pyenv-virtualenv</code></li>
<li><code>pyenv-which-ext</code></li>
</ul>
<p>安装完成后，<code>pyenv</code>命令还没有加进系统的环境变量，需要将如下内容加到<code>~/.zshrc</code>中，然后执行<code>source ~/.zshrc</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export PATH=$HOME/.pyenv/bin:$PATH</div><div class="line">eval &quot;$(pyenv init -)&quot;</div><div class="line">eval &quot;$(pyenv virtualenv-init -)&quot;</div></pre></td></tr></table></figure>
<p>完成以上操作后，<code>pyenv</code>就安装完成了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv -v</div><div class="line">pyenv 1.0.8</div></pre></td></tr></table></figure>
<p>如果不确定<code>pyenv</code>的环境是否安装正常，可以通过<code>pyenv doctor</code>命令对环境进行检测。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ pyenv doctor</div><div class="line">Cloning /Users/Leo/.pyenv/plugins/pyenv-doctor/bin/.....</div><div class="line">Installing python-pyenv-doctor...</div><div class="line"></div><div class="line">BUILD FAILED (OS X 10.12.3 using python-build 20160602)</div><div class="line"></div><div class="line">Last 10 log lines:</div><div class="line">checking for memory.h... yes</div><div class="line">checking for strings.h... yes</div><div class="line">checking for inttypes.h... yes</div><div class="line">checking for stdint.h... yes</div><div class="line">checking for unistd.h... yes</div><div class="line">checking openssl/ssl.h usability... no</div><div class="line">checking openssl/ssl.h presence... no</div><div class="line">checking for openssl/ssl.h... no</div><div class="line">configure: error: OpenSSL development header is not installed.</div><div class="line">make: *** No targets specified and no makefile found.  Stop.</div><div class="line">Problem(s) detected while checking system.</div></pre></td></tr></table></figure>
<p>通过检测，可以发现本地环境可能存在的问题，例如，从以上输出可以看出，本地的<code>OpenSSL development header</code>还没有安装。根据提示的问题，逐一进行修复，直到检测不再出现问题为止。</p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>通过<code>pyenv update</code>命令，可以更新<code>pyenv</code>全家桶的所有内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ pyenv update</div><div class="line">Updating /Users/Leo/.pyenv...</div><div class="line">From https://github.com/yyuu/pyenv</div><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div><div class="line">Updating /Users/Leo/.pyenv/plugins/pyenv-doctor...</div><div class="line">From https://github.com/yyuu/pyenv-doctor</div><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div><div class="line">Updating /Users/Leo/.pyenv/plugins/pyenv-installer...</div><div class="line">From https://github.com/yyuu/pyenv-installer</div><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div><div class="line">Updating /Users/Leo/.pyenv/plugins/pyenv-update...</div><div class="line">From https://github.com/yyuu/pyenv-update</div><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div><div class="line">Updating /Users/Leo/.pyenv/plugins/pyenv-virtualenv...</div><div class="line">From https://github.com/yyuu/pyenv-virtualenv</div><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div><div class="line">Updating /Users/Leo/.pyenv/plugins/pyenv-which-ext...</div><div class="line">From https://github.com/yyuu/pyenv-which-ext</div><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line">Already up-to-date.</div></pre></td></tr></table></figure>
<h2 id="pyenv的核心使用方法"><a href="#pyenv的核心使用方法" class="headerlink" title="pyenv的核心使用方法"></a>pyenv的核心使用方法</h2><p><code>pyenv</code>的主要功能如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ pyenv -h</div><div class="line">Usage: pyenv &lt;command&gt; [&lt;args&gt;]</div><div class="line"></div><div class="line">Some useful pyenv commands are:</div><div class="line">   commands    List all available pyenv commands</div><div class="line">   local       Set or show the local application-specific Python version</div><div class="line">   global      Set or show the global Python version</div><div class="line">   shell       Set or show the shell-specific Python version</div><div class="line">   install     Install a Python version using python-build</div><div class="line">   uninstall   Uninstall a specific Python version</div><div class="line">   rehash      Rehash pyenv shims (run this after installing executables)</div><div class="line">   version     Show the current Python version and its origin</div><div class="line">   versions    List all Python versions available to pyenv</div><div class="line">   which       Display the full path to an executable</div><div class="line">   whence      List all Python versions that contain the given executable</div><div class="line"></div><div class="line">See `pyenv help &lt;command&gt;&apos; for information on a specific command.</div><div class="line">For full documentation, see: https://github.com/yyuu/pyenv#readme</div></pre></td></tr></table></figure>
<h3 id="查看所有可安装的Python版本"><a href="#查看所有可安装的Python版本" class="headerlink" title="查看所有可安装的Python版本"></a>查看所有可安装的<code>Python</code>版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ pyenv install --list</div><div class="line">Available versions:</div><div class="line">  2.1.3</div><div class="line">  ...</div><div class="line">  2.7.12</div><div class="line">  2.7.13</div><div class="line">  ...</div><div class="line">  3.5.3</div><div class="line">  3.6.0</div><div class="line">  3.6-dev</div><div class="line">  3.6.1</div><div class="line">  3.7-dev</div></pre></td></tr></table></figure>
<p>需要注意的是，如果是采用<code>brew</code>命令安装的<code>pyenv</code>，可能会发现<code>Python</code>版本库中没有最新的<code>Python</code>版本。所以建议还是通过<code>GitHub</code>源码方式安装<code>pyenv</code>。</p>
<h3 id="安装指定版本的Python环境"><a href="#安装指定版本的Python环境" class="headerlink" title="安装指定版本的Python环境"></a>安装指定版本的<code>Python</code>环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pyenv install 3.6.0</div><div class="line">Downloading Python-3.6.0.tar.xz...</div><div class="line">-&gt; https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz</div><div class="line">Installing Python-3.6.0...</div><div class="line">Installed Python-3.6.0 to /Users/Leo/.pyenv/versions/3.6.0</div></pre></td></tr></table></figure>
<h3 id="查看当前系统中所有可用的Python版本"><a href="#查看当前系统中所有可用的Python版本" class="headerlink" title="查看当前系统中所有可用的Python版本"></a>查看当前系统中所有可用的<code>Python</code>版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ pyenv versions</div><div class="line">* system (set by /Users/Leo/.pyenv/version)</div><div class="line">  2.7.13</div><div class="line">  3.6.0</div></pre></td></tr></table></figure>
<h3 id="切换Python版本"><a href="#切换Python版本" class="headerlink" title="切换Python版本"></a>切换<code>Python</code>版本</h3><p><code>pyenv</code>可以从三个维度来管理<code>Python</code>环境，简称为：<code>当前系统</code>、<code>当前目录</code>、<code>当前shell</code>。这三个维度的优先级从左到右依次升高，即<code>当前系统</code>的优先级最低、<code>当前shell</code>的优先级最高。</p>
<p>如果想修改系统全局的Python环境，可以采用<code>pyenv global PYTHON_VERSION</code>命令。该命令执行后会在<code>$(pyenv root)</code>目录（默认为<code>~/.pyenv</code>）中创建一个名为<code>version</code>的文件（如果该文件已存在，则修改该文件的内容），里面记录着系统全局的Python版本号。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ pyenv global 2.7.13</div><div class="line">$ cat ~/.pyenv/version</div><div class="line">2.7.13</div><div class="line">$ pyenv version</div><div class="line">2.7.13 (<span class="built_in">set</span> by /Users/Leo/.pyenv/version)</div><div class="line"></div><div class="line">$ pyenv global 3.6.0</div><div class="line">$ cat ~/.pyenv/version</div><div class="line">3.6.0</div><div class="line">$ pyenv version</div><div class="line">3.6.0 (<span class="built_in">set</span> by /Users/Leo/.pyenv/version)</div></pre></td></tr></table></figure>
<p>通常情况下，对于特定的项目，我们可能需要切换不同的Python环境，这个时候就可以通过<code>pyenv local PYTHON_VERSION</code>命令来修改<code>当前目录</code>的Python环境。命令执行后，会在当前目录中生成一个<code>.python-version</code>文件（如果该文件已存在，则修改该文件的内容），里面记录着当前目录使用的Python版本号。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.pyenv/version</div><div class="line">2.7.13</div><div class="line">$ pyenv <span class="built_in">local</span> 3.6.0</div><div class="line">$ cat .python-version</div><div class="line">3.6.0</div><div class="line">$ cat ~/.pyenv/version</div><div class="line">2.7.13</div><div class="line">$ pyenv version</div><div class="line">3.6.0 (<span class="built_in">set</span> by /Users/Leo/MyProjects/.python-version)</div><div class="line">$ pip -V</div><div class="line">pip 9.0.1 from /Users/Leo/.pyenv/versions/3.6.0/lib/python3.6/site-packages (python 3.6)</div></pre></td></tr></table></figure>
<p>可以看出，当前目录中的<code>.python-version</code>配置优先于系统全局的<code>~/.pyenv/version</code>配置。</p>
<p>另外一种情况，通过执行<code>pyenv shell PYTHON_VERSION</code>命令，可以修改<code>当前shell</code>的Python环境。执行该命令后，会在当前<code>shell session</code>（Terminal窗口）中创建一个名为<code>PYENV_VERSION</code>的环境变量，然后在<code>当前shell</code>的任意目录中都会采用该环境变量设定的Python版本。此时，<code>当前系统</code>和<code>当前目录</code>中设定的Python版本均会被忽略。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="variable">$PYENV_VERSION</span></div><div class="line"></div><div class="line">$ pyenv shell 3.6.0</div><div class="line">$ <span class="built_in">echo</span> <span class="variable">$PYENV_VERSION</span></div><div class="line">3.6.0</div><div class="line">$ cat .python-version</div><div class="line">2.7.13</div><div class="line">$ pyenv version</div><div class="line">3.6.0 (<span class="built_in">set</span> by PYENV_VERSION environment variable)</div></pre></td></tr></table></figure>
<p>顾名思义，<code>当前shell</code>的Python环境仅在当前shell中生效，重新打开一个新的shell后，该环境也就失效了。如果想在<code>当前shell</code>中取消shell级别的Python环境，采用<code>unset</code>命令重置<code>PYENV_VERSION</code>环境变量即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ cat .python-version</div><div class="line">2.7.13</div><div class="line">$ pyenv version</div><div class="line">3.6.0 (<span class="built_in">set</span> by PYENV_VERSION environment variable)</div><div class="line"></div><div class="line">$ <span class="built_in">unset</span> PYENV_VERSION</div><div class="line">$ pyenv version</div><div class="line">2.7.13 (<span class="built_in">set</span> by /Users/Leo/MyProjects/.python-version)</div></pre></td></tr></table></figure>
<h2 id="管理多个依赖库环境"><a href="#管理多个依赖库环境" class="headerlink" title="管理多个依赖库环境"></a>管理多个依赖库环境</h2><p>经过以上操作，我们在本地计算机中就可以安装多个版本的<code>Python</code>运行环境，并可以按照实际需求进行灵活地切换。然而，很多时候在同一个<code>Python</code>版本下，我们仍然希望能根据项目进行环境分离，就跟之前我们使用<code>virtualenv</code>一样。</p>
<p>在<code>pyenv</code>中，也包含这么一个插件，<a href="https://github.com/pyenv/pyenv-virtualenv" target="_blank" rel="external"><code>pyenv-virtualenv</code></a>，可以实现同样的功能。</p>
<p>使用方式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv virtualenv PYTHON_VERSION PROJECT_NAME</div></pre></td></tr></table></figure>
<p>其中，<code>PYTHON_VERSION</code>是具体的Python版本号，例如，<code>3.6.0</code>，<code>PROJECT_NAME</code>是我们自定义的项目名称。比较好的实践方式是，在<code>PROJECT_NAME</code>也带上Python的版本号，以便于识别。</p>
<p>现假设我们有<code>XDiff</code>这么一个项目，想针对<code>Python 2.7.13</code>和<code>Python 3.6.0</code>分别创建一个虚拟环境，那就可以依次执行如下命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pyenv virtualenv 3.6.0 py36_XDiff</div><div class="line">$ pyenv virtualenv 2.7.13 py27_XDiff</div></pre></td></tr></table></figure>
<p>创建完成后，通过执行<code>pyenv virtualenvs</code>命令，就可以看到本地所有的项目环境。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pyenv virtualenvs</div><div class="line">  2.7.13/envs/py27_XDiff (created from /Users/Leo/.pyenv/versions/2.7.13)</div><div class="line">* 3.6.0/envs/py36_XDiff (created from /Users/Leo/.pyenv/versions/3.6.0)</div><div class="line">  py27_XDiff (created from /Users/Leo/.pyenv/versions/2.7.13)</div><div class="line">  py36_XDiff (created from /Users/Leo/.pyenv/versions/3.6.0)</div></pre></td></tr></table></figure>
<p>通过这种方式，在同一个Python版本下我们也可以创建多个虚拟环境，然后在各个虚拟环境中分别维护依赖库环境。</p>
<p>例如，<code>py36_XDiff</code>虚拟环境位于<code>/Users/Leo/.pyenv/versions/3.6.0/envs</code>目录下，而其依赖库位于<code>/Users/Leo/.pyenv/versions/3.6.0/lib/python3.6/site-packages</code>中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pip -V</div><div class="line">pip 9.0.1 from /Users/Leo/.pyenv/versions/3.6.0/lib/python3.6/site-packages (python 3.6)</div></pre></td></tr></table></figure>
<p>后续在项目开发过程中，我们就可以通过<code>pyenv local XXX</code>或<code>pyenv activate PROJECT_NAME</code>命令来切换项目的<code>Python</code>环境。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  MyProjects pyenv <span class="built_in">local</span> py27_XDiff</div><div class="line">(py27_XDiff) ➜  MyProjects pyenv version</div><div class="line">py27_XDiff (<span class="built_in">set</span> by /Users/Leo/MyProjects/.python-version)</div><div class="line">(py27_XDiff) ➜  MyProjects python -V</div><div class="line">Python 2.7.13</div><div class="line">(py27_XDiff) ➜  MyProjects pip -V</div><div class="line">pip 9.0.1 from /Users/Leo/.pyenv/versions/2.7.13/envs/py27_XDiff/lib/python2.7/site-packages (python 2.7)</div></pre></td></tr></table></figure>
<p>可以看出，切换环境后，<code>pip</code>命令对应的目录也随之改变，即始终对应着当前的Python虚拟环境。</p>
<p>对应的，采用<code>pyenv deactivate</code>命令退出当前项目的<code>Python</code>虚拟环境。</p>
<p>如果想移除某个项目环境，可以通过如下命令实现。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv uninstall PROJECT_NAME</div></pre></td></tr></table></figure>
<p>以上便是日常开发工作中常用的<code>pyenv</code>命令，基本可以满足绝大多数依赖库环境管理方面的需求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;从接触Python以来，一直都是采用&lt;a href=&quot;https://virtualenv.pypa.io/en/stable/&quot; targ
    
    </summary>
    
    
      <category term="Python" scheme="http://debugtalk.com/tags/Python/"/>
    
      <category term="pyenv" scheme="http://debugtalk.com/tags/pyenv/"/>
    
      <category term="virtualenv" scheme="http://debugtalk.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>【GIT技巧】清除历史提交记录中的敏感信息</title>
    <link href="http://debugtalk.com/post/clean-sensitive-data-from-git-history-commits/"/>
    <id>http://debugtalk.com/post/clean-sensitive-data-from-git-history-commits/</id>
    <published>2017-03-16T16:00:00.000Z</published>
    <updated>2017-06-15T07:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/GitHub_hacker.jpg" alt=""></p>
<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>在使用GitHub的过程中，假如某次提交代码时不小心将密码或<code>SSH-key</code>提交进了公共仓库。当然，希望这种事情永远也不会发生，但是如果真遇到了，该怎么办呢？</p>
<p>如果发现得及时，本地提交后还没有推送到GitHub远程仓库的话，这种情况还好处理，直接修改代码后通过<code>git commit --amend</code>即可。</p>
<p>但如果发现时已经推送到了GitHub远程仓库，或者已过了许久，后续有了很多新的<code>commits</code>，这种情况就会比较复杂了。</p>
<p>错误的方式是，直接在当前代码中去除敏感信息，然后再提交到代码仓库中。这样的做法只能在最新的代码中去除了敏感信息，在git历史记录中仍然保存着敏感信息。</p>
<p>当然，也可以选择直接将整个仓库删除了。不过，看着昔日精心提交的代码记录，实在是难以下手。</p>
<p>要是可以只删除敏感信息部分，而不影响到其它提交记录就好了。事实上，<code>GIT</code>的确支持这种操作。</p>
<h2 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h2><p>实现的方式有两种，一是通过<code>git filter-branch</code>命令，另一种是采用一款开源的工具，<code>BFG Repo-Cleaner</code>。前者是<code>GIT</code>官方的实现方法，后者是一款采用<code>Scala</code>编写的工具，号称比<code>git filter-branch</code>更简单、更快捷。</p>
<h3 id="git-filter-branch"><a href="#git-filter-branch" class="headerlink" title="git filter-branch"></a>git filter-branch</h3><p>先来看下<a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/" target="_blank" rel="external"><code>git filter-branch</code></a>这种方式。假设要在所有历史提交记录中删除文件<code>PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA</code>，那么就可以采用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git filter-branch --force --index-filter \</div><div class="line"><span class="string">'git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA'</span> \</div><div class="line">--prune-empty --tag-name-filter cat -- --all</div><div class="line"></div><div class="line">&gt; Rewrite 48dc599c80e20527ed902928085e7861e6b3cbe6 (266/266)</div><div class="line">&gt; Ref <span class="string">'refs/heads/master'</span> was rewritten</div></pre></td></tr></table></figure>
<p>正常情况下，通过执行上面的命令，就可以在所有历史提交记录中彻底删除指定文件。如果要进一步确定的话，可以在<code>.git</code>目录中进行全局搜索，确保已彻底清理干净。</p>
<p>然后，就可以通过如下命令将本地代码推送到<code>GitHub</code>上，并强制覆盖掉所有历史记录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --force --all</div></pre></td></tr></table></figure>
<p>可以看出，采用<code>git filter-branch</code>的操作命令十分复杂（复杂到我也不想理会每个参数的具体含义），这还只是选择粗暴地将整个文件进行删除的情况。如果不想删除文件，而是单独修改特定文件特定内容的话，操作会更加复杂，如有兴趣可查看<a href="https://git-scm.com/docs/git-filter-branch" target="_blank" rel="external"><code>git官方文档</code></a>。</p>
<h3 id="BFG-Repo-Cleaner"><a href="#BFG-Repo-Cleaner" class="headerlink" title="BFG Repo-Cleaner"></a>BFG Repo-Cleaner</h3><p>估计也是因为官方的<code>git filter-branch</code>太过复杂，于是<code>Roberto Tyley</code>开发了<a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="external"><code>BFG Repo-Cleaner</code></a>这款工具。该工具是专门针对移除历史记录的需求而产生的，这可以从其简介中看出来。</p>
<blockquote>
<p>Removes large or troublesome blobs like git-filter-branch does, but faster. And written in Scala</p>
</blockquote>
<p>使用<code>BFG Repo-Cleaner</code>之前，需要先下载<a href="https://rtyley.github.io/bfg-repo-cleaner/#download" target="_blank" rel="external"><code>BFG&#39;s jar</code></a>(requires Java 7 or above)。</p>
<p>如果想实现前面例子中同样的功能，删除文件<code>PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA</code>，可以通过如下命令实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar bfg.jar --delete-files PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA my-repo.git</div></pre></td></tr></table></figure>
<p>如果不想删除文件，而是单独修改特定文件特定内容的话，就可以通过如下命令实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar bfg.jar --replace-text replacements.txt my-repo.git</div></pre></td></tr></table></figure>
<p>在<code>replacements.txt</code>文件中，应包含所有需要替换的内容，格式如下（不包含注释内容）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PASSWORD1                       <span class="comment"># Replace with '***REMOVED***' (default)</span></div><div class="line">PASSWORD2==&gt;examplePass         <span class="comment"># replace with 'examplePass' instead</span></div><div class="line">PASSWORD3==&gt;                    <span class="comment"># replace with the empty string</span></div><div class="line">regex:password=\w+==&gt;password=  <span class="comment"># Replace, using a regex</span></div><div class="line">regex:\r(\n)==&gt;<span class="variable">$1</span>               <span class="comment"># Replace Windows newlines with Unix newlines</span></div></pre></td></tr></table></figure>
<p>通过执行上述命令，<code>BFG Repo-Cleaner</code>就会扫描代码仓库的所有历史提交记录，并按照<code>replacements.txt</code>文件中的映射进行替换操作。</p>
<p>通过对比可以看到，<code>BFG Repo-Cleaner</code>的确是更加简洁，这也是<code>GitHub</code>官方推荐的方式。不过，在<code>BFG Repo-Cleaner</code>的介绍文档中也说了，该工具的优势在于简单和快捷，从功能强大的角度来讲，它是比不上<code>git-filter-branch</code>的，有些操作也只能通过<code>git-filter-branch</code>完成。</p>
<p>如需了解<code>BFG Repo-Cleaner</code>的更多用法，可详细阅读其<a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="external">文档</a>。</p>
<h2 id="写在末尾"><a href="#写在末尾" class="headerlink" title="写在末尾"></a>写在末尾</h2><p>不要问我为啥写了这么一篇博客，让我再哭一会儿。我也真心地希望大家永远不会用到这些工具。</p>
<p>小心驶得万年船，共勉！</p>
<h2 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h2><ul>
<li><a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="external">https://rtyley.github.io/bfg-repo-cleaner/</a></li>
<li><a href="https://git-scm.com/docs/git-filter-branch" target="_blank" rel="external">https://git-scm.com/docs/git-filter-branch</a></li>
<li><a href="https://help.github.com/articles/removing-sensitive-data-from-a-repository/" target="_blank" rel="external">https://help.github.com/articles/removing-sensitive-data-from-a-repository/</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/ch05.html#_8230_and_then_some" target="_blank" rel="external">http://www-cs-students.stanford.edu/~blynn/gitmagic/ch05.html#_8230_and_then_some</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/GitHub_hacker.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;在使用GitHub的
    
    </summary>
    
    
      <category term="Git" scheme="http://debugtalk.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://debugtalk.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出开源性能测试工具Locust（脚本增强）</title>
    <link href="http://debugtalk.com/post/head-first-locust-advanced-script/"/>
    <id>http://debugtalk.com/post/head-first-locust-advanced-script/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-06-15T07:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/post/head-first-locust-user-guide/">《深入浅出开源性能测试工具Locust（使用篇）》</a>一文中，罗列了编写性能测试脚本时常用的几类脚本增强的场景，本文是对应的代码示例。</p>
<h2 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h2><p>在某些请求中，需要携带之前从Server端返回的参数，因此在构造请求时需要先从之前的Response中提取出所需的参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet, task, HttpLocust</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span><span class="params">(TaskSet)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">(html)</span>:</span></div><div class="line">        tree = etree.HTML(html)</div><div class="line">        <span class="keyword">return</span> tree.xpath(<span class="string">"//div[@class='btnbox']/input[@name='session']/@value"</span>)[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="meta">    @task(10)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(self)</span>:</span></div><div class="line">        html = self.client.get(<span class="string">'/login'</span>).text</div><div class="line">        username = <span class="string">'user@compay.com'</span></div><div class="line">        password = <span class="string">'123456'</span></div><div class="line">        session = self.get_session(html)</div><div class="line">        payload = &#123;</div><div class="line">            <span class="string">'username'</span>: username,</div><div class="line">            <span class="string">'password'</span>: password,</div><div class="line">            <span class="string">'session'</span>: session</div><div class="line">        &#125;</div><div class="line">        self.client.post(<span class="string">'/login'</span>, data=payload)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span><span class="params">(HttpLocust)</span>:</span></div><div class="line">    host = <span class="string">'http://debugtalk.com'</span></div><div class="line">    task_set = UserBehavior</div><div class="line">    min_wait = <span class="number">1000</span></div><div class="line">    max_wait = <span class="number">3000</span></div></pre></td></tr></table></figure>
<h2 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h2><h3 id="循环取数据，数据可重复使用"><a href="#循环取数据，数据可重复使用" class="headerlink" title="循环取数据，数据可重复使用"></a>循环取数据，数据可重复使用</h3><blockquote>
<p>所有并发虚拟用户共享同一份测试数据，各虚拟用户在数据列表中循环取值。<br>例如，模拟3用户并发请求网页，总共有100个URL地址，每个虚拟用户都会依次循环加载这100个URL地址；加载示例如下表所示。</p>
</blockquote>
<table>
<thead>
<tr>
<th>\</th>
<th>vuser1</th>
<th>vuser2</th>
<th>vuser3</th>
</tr>
</thead>
<tbody>
<tr>
<td>iteration1</td>
<td>url1</td>
<td>url1</td>
<td>url1</td>
</tr>
<tr>
<td>iteration2</td>
<td>url2</td>
<td>url2</td>
<td>url2</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>iteration100</td>
<td>url100</td>
<td>url100</td>
<td>url100</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet, task, HttpLocust</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span><span class="params">(TaskSet)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></div><div class="line">        self.index = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="meta">    @task</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_visit</span><span class="params">(self)</span>:</span></div><div class="line">        url = self.locust.share_data[self.index]</div><div class="line">        print(<span class="string">'visit url: %s'</span> % url)</div><div class="line">        self.index = (self.index + <span class="number">1</span>) % len(self.locust.share_data)</div><div class="line">        self.client.get(url)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span><span class="params">(HttpLocust)</span>:</span></div><div class="line">    host = <span class="string">'http://debugtalk.com'</span></div><div class="line">    task_set = UserBehavior</div><div class="line">    share_data = [<span class="string">'url1'</span>, <span class="string">'url2'</span>, <span class="string">'url3'</span>, <span class="string">'url4'</span>, <span class="string">'url5'</span>]</div><div class="line">    min_wait = <span class="number">1000</span></div><div class="line">    max_wait = <span class="number">3000</span></div></pre></td></tr></table></figure>
<h3 id="保证并发测试数据唯一性，不循环取数据"><a href="#保证并发测试数据唯一性，不循环取数据" class="headerlink" title="保证并发测试数据唯一性，不循环取数据"></a>保证并发测试数据唯一性，不循环取数据</h3><blockquote>
<p>所有并发虚拟用户共享同一份测试数据，并且保证虚拟用户使用的数据不重复。<br>例如，模拟3用户并发注册账号，总共有9个账号，要求注册账号不重复，注册完毕后结束测试；加载示例如下表所示。</p>
</blockquote>
<table>
<thead>
<tr>
<th>\</th>
<th>vuser1</th>
<th>vuser2</th>
<th>vuser3</th>
</tr>
</thead>
<tbody>
<tr>
<td>iteration1</td>
<td>account1</td>
<td>account2</td>
<td>account3</td>
</tr>
<tr>
<td>iteration2</td>
<td>account4</td>
<td>account6</td>
<td>account5</td>
</tr>
<tr>
<td>iteration3</td>
<td>account7</td>
<td>account9</td>
<td>account8</td>
</tr>
<tr>
<td>N/A</td>
<td>-</td>
<td>—</td>
<td>-</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet, task, HttpLocust</div><div class="line"><span class="keyword">import</span> queue</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span><span class="params">(TaskSet)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @task</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_register</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            data = self.locust.user_data_queue.get()</div><div class="line">        <span class="keyword">except</span> queue.Empty:</div><div class="line">            print(<span class="string">'account data run out, test ended.'</span>)</div><div class="line">            exit(<span class="number">0</span>)</div><div class="line"></div><div class="line">        print(<span class="string">'register with user: &#123;&#125;, pwd: &#123;&#125;'</span>\</div><div class="line">            .format(data[<span class="string">'username'</span>], data[<span class="string">'password'</span>]))</div><div class="line">        payload = &#123;</div><div class="line">            <span class="string">'username'</span>: data[<span class="string">'username'</span>],</div><div class="line">            <span class="string">'password'</span>: data[<span class="string">'password'</span>]</div><div class="line">        &#125;</div><div class="line">        self.client.post(<span class="string">'/register'</span>, data=payload)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span><span class="params">(HttpLocust)</span>:</span></div><div class="line">    host = <span class="string">'http://debugtalk.com'</span></div><div class="line">    task_set = UserBehavior</div><div class="line"></div><div class="line">    user_data_queue = queue.Queue()</div><div class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">        data = &#123;</div><div class="line">            <span class="string">"username"</span>: <span class="string">"test%04d"</span> % index,</div><div class="line">            <span class="string">"password"</span>: <span class="string">"pwd%04d"</span> % index,</div><div class="line">            <span class="string">"email"</span>: <span class="string">"test%04d@debugtalk.test"</span> % index,</div><div class="line">            <span class="string">"phone"</span>: <span class="string">"186%08d"</span> % index,</div><div class="line">        &#125;</div><div class="line">        user_data_queue.put_nowait(data)</div><div class="line"></div><div class="line">    min_wait = <span class="number">1000</span></div><div class="line">    max_wait = <span class="number">3000</span></div></pre></td></tr></table></figure>
<h3 id="保证并发测试数据唯一性，循环取数据"><a href="#保证并发测试数据唯一性，循环取数据" class="headerlink" title="保证并发测试数据唯一性，循环取数据"></a>保证并发测试数据唯一性，循环取数据</h3><blockquote>
<p>所有并发虚拟用户共享同一份测试数据，保证并发虚拟用户使用的数据不重复，并且数据可循环重复使用。<br>例如，模拟3用户并发登录账号，总共有9个账号，要求并发登录账号不相同，但数据可循环使用；加载示例如下表所示。</p>
</blockquote>
<table>
<thead>
<tr>
<th>\</th>
<th>vuser1</th>
<th>vuser2</th>
<th>vuser3</th>
</tr>
</thead>
<tbody>
<tr>
<td>iteration1</td>
<td>account1</td>
<td>account2</td>
<td>account3</td>
</tr>
<tr>
<td>iteration2</td>
<td>account4</td>
<td>account6</td>
<td>account5</td>
</tr>
<tr>
<td>iteration3</td>
<td>account7</td>
<td>account9</td>
<td>account8</td>
</tr>
<tr>
<td>iteration4</td>
<td>account1</td>
<td>account2</td>
<td>account3</td>
</tr>
<tr>
<td>iteration5</td>
<td>account4</td>
<td>account5</td>
<td>account6</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<p>该种场景的实现方式与上一种场景基本相同，唯一的差异在于，每次使用完数据后，需要再将数据放入队列中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet, task, HttpLocust</div><div class="line"><span class="keyword">import</span> queue</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span><span class="params">(TaskSet)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @task</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_register</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            data = self.locust.user_data_queue.get()</div><div class="line">        <span class="keyword">except</span> queue.Empty:</div><div class="line">            print(<span class="string">'account data run out, test ended.'</span>)</div><div class="line">            exit(<span class="number">0</span>)</div><div class="line"></div><div class="line">        print(<span class="string">'register with user: &#123;&#125;, pwd: &#123;&#125;'</span>\</div><div class="line">            .format(data[<span class="string">'username'</span>], data[<span class="string">'password'</span>]))</div><div class="line">        payload = &#123;</div><div class="line">            <span class="string">'username'</span>: data[<span class="string">'username'</span>],</div><div class="line">            <span class="string">'password'</span>: data[<span class="string">'password'</span>]</div><div class="line">        &#125;</div><div class="line">        self.client.post(<span class="string">'/register'</span>, data=payload)</div><div class="line">        self.locust.user_data_queue.put_nowait(data)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span><span class="params">(HttpLocust)</span>:</span></div><div class="line">    host = <span class="string">'http://debugtalk.com'</span></div><div class="line">    task_set = UserBehavior</div><div class="line"></div><div class="line">    user_data_queue = queue.Queue()</div><div class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">        data = &#123;</div><div class="line">            <span class="string">"username"</span>: <span class="string">"test%04d"</span> % index,</div><div class="line">            <span class="string">"password"</span>: <span class="string">"pwd%04d"</span> % index,</div><div class="line">            <span class="string">"email"</span>: <span class="string">"test%04d@debugtalk.test"</span> % index,</div><div class="line">            <span class="string">"phone"</span>: <span class="string">"186%08d"</span> % index,</div><div class="line">        &#125;</div><div class="line">        user_data_queue.put_nowait(data)</div><div class="line"></div><div class="line">    min_wait = <span class="number">1000</span></div><div class="line">    max_wait = <span class="number">3000</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/post/head-first-locust-user-guide/&quot;&gt;《深入浅出开源性能测试工具Locust（使用篇）》&lt;/a&gt;一文中，罗列了编写性能测试脚本时常用的几类脚本增强的场景，本文是对应的代码示例。&lt;/p&gt;
&lt;h2 id=&quot;关联&quot;&gt;&lt;a h
    
    </summary>
    
    
      <category term="性能测试" scheme="http://debugtalk.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Locust" scheme="http://debugtalk.com/tags/Locust/"/>
    
      <category term="开源项目" scheme="http://debugtalk.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出开源性能测试工具Locust（使用篇）</title>
    <link href="http://debugtalk.com/post/head-first-locust-user-guide/"/>
    <id>http://debugtalk.com/post/head-first-locust-user-guide/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-06-15T07:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/post/locustplus-talk-about-performance-test/">《【LocustPlus序】漫谈服务端性能测试》</a>中，我对服务端性能测试的基础概念和性能测试工具的基本原理进行了介绍，并且重点推荐了<code>Locust</code>这一款开源性能测试工具。然而，当前在网络上针对<code>Locust</code>的教程极少，不管是中文还是英文，基本都是介绍安装方法和简单的测试案例演示，但对于较复杂测试场景的案例演示却基本没有，因此很多测试人员都感觉难以将<code>Locust</code>应用到实际的性能测试工作当中。</p>
<p>经过一段时间的摸索，包括通读<code>Locust</code>官方文档和项目源码，并且在多个性能测试项目中对<code>Locust</code>进行应用实践，事实证明，<code>Locust</code>完全能满足日常的性能测试需求，<code>LoadRunner</code>能实现的功能<code>Locust</code>也基本都能实现。</p>
<p>本文将从<code>Locust</code>的功能特性出发，结合实例对<code>Locust</code>的使用方法进行介绍。考虑到大众普遍对<code>LoadRunner</code>比较熟悉，在讲解<code>Locust</code>时也会采用<code>LoadRunner</code>的一些概念进行类比。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>先从<code>Locust</code>的名字说起。<code>Locust</code>的原意是蝗虫，原作者之所以选择这个名字，估计也是听过这么一句俗语，“蝗虫过境，寸草不生”。我在网上找了张图片，大家可以感受下。</p>
<p><img src="/images/14875962785342.jpg" alt=""></p>
<p>而<code>Locust</code>工具生成的并发请求就跟一大群蝗虫一般，对我们的被测系统发起攻击，以此检测系统在高并发压力下是否能正常运转。</p>
<p>在<a href="/post/locustplus-talk-about-performance-test/">《【LocustPlus序】漫谈服务端性能测试》</a>中说过，服务端性能测试工具最核心的部分是压力发生器，而压力发生器的核心要点有两个，一是真实模拟用户操作，二是模拟有效并发。</p>
<p>在<code>Locust</code>测试框架中，测试场景是采用纯Python脚本进行描述的。对于最常见的<code>HTTP(S)</code>协议的系统，<code>Locust</code>采用Python的<code>requests</code>库作为客户端，使得脚本编写大大简化，富有表现力的同时且极具美感。而对于其它协议类型的系统，<code>Locust</code>也提供了接口，只要我们能采用Python编写对应的请求客户端，就能方便地采用<code>Locust</code>实现压力测试。从这个角度来说，<code>Locust</code>可以用于压测任意类型的系统。</p>
<p>在模拟有效并发方面，<code>Locust</code>的优势在于其摒弃了进程和线程，完全基于事件驱动，使用<code>gevent</code>提供的<code>非阻塞IO</code>和<code>coroutine</code>来实现网络层的并发请求，因此即使是单台压力机也能产生数千并发请求数；再加上对分布式运行的支持，理论上来说，<code>Locust</code>能在使用较少压力机的前提下支持极高并发数的测试。</p>
<h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>编写<code>Locust</code>脚本，是使用<code>Locust</code>的第一步，也是最为重要的一步。</p>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>先来看一个最简单的示例。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpLocust, TaskSet, task</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteTasks</span><span class="params">(TaskSet)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></div><div class="line">        self.client.post(<span class="string">"/login"</span>, &#123;</div><div class="line">            <span class="string">"username"</span>: <span class="string">"test"</span>,</div><div class="line">            <span class="string">"password"</span>: <span class="string">"123456"</span></div><div class="line">        &#125;)</div><div class="line"></div><div class="line"><span class="meta">    @task(2)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></div><div class="line">        self.client.get(<span class="string">"/"</span>)</div><div class="line"></div><div class="line"><span class="meta">    @task(1)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">(self)</span>:</span></div><div class="line">        self.client.get(<span class="string">"/about/"</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span><span class="params">(HttpLocust)</span>:</span></div><div class="line">    task_set = WebsiteTasks</div><div class="line">    host = <span class="string">"http://debugtalk.com"</span></div><div class="line">    min_wait = <span class="number">1000</span></div><div class="line">    max_wait = <span class="number">5000</span></div></pre></td></tr></table></figure>
<p>在这个示例中，定义了针对<code>http://debugtalk.com</code>网站的测试场景：先模拟用户登录系统，然后随机地访问首页（<code>/</code>）和关于页面（<code>/about/</code>），请求比例为<code>2:1</code>；并且，在测试过程中，两次请求的间隔时间为<code>1~5</code>秒间的随机值。</p>
<p>那么，如上Python脚本是如何表达出以上测试场景的呢？</p>
<p>从脚本中可以看出，脚本主要包含两个类，一个是<code>WebsiteUser</code>（继承自<code>HttpLocust</code>，而<code>HttpLocust</code>继承自<code>Locust</code>），另一个是<code>WebsiteTasks</code>（继承自<code>TaskSet</code>）。事实上，在<code>Locust</code>的测试脚本中，所有业务测试场景都是在<code>Locust</code>和<code>TaskSet</code>两个类的继承子类中进行描述的。</p>
<p>那如何理解<code>Locust</code>和<code>TaskSet</code>这两个类呢？</p>
<p>简单地说，<code>Locust类</code>就好比是一群蝗虫，而每一只蝗虫就是一个类的实例。相应的，<code>TaskSet类</code>就好比是蝗虫的大脑，控制着蝗虫的具体行为，即实际业务场景测试对应的任务集。</p>
<p>这个比喻可能不是很准确，接下来，我将分别对<code>Locust</code>和<code>TaskSet</code>两个类进行详细介绍。</p>
<h3 id="class-HttpLocust-Locust"><a href="#class-HttpLocust-Locust" class="headerlink" title="class HttpLocust(Locust)"></a>class HttpLocust(Locust)</h3><p>在<code>Locust类</code>中，具有一个<code>client</code>属性，它对应着虚拟用户作为客户端所具备的请求能力，也就是我们常说的请求方法。通常情况下，我们不会直接使用<code>Locust</code>类，因为其<code>client</code>属性没有绑定任何方法。因此在使用<code>Locust</code>时，需要先继承<code>Locust类</code>，然后在继承子类中的<code>client</code>属性中绑定客户端的实现类。</p>
<p>对于常见的<code>HTTP(S)</code>协议，<code>Locust</code>已经实现了<code>HttpLocust</code>类，其<code>client</code>属性绑定了<code>HttpSession</code>类，而<code>HttpSession</code>又继承自<code>requests.Session</code>。因此在测试<code>HTTP(S)</code>的<code>Locust脚本</code>中，我们可以通过<code>client</code>属性来使用<code>Python requests</code>库的所有方法，包括<code>GET/POST/HEAD/PUT/DELETE/PATCH</code>等，调用方式也与<code>requests</code>完全一致。另外，由于<code>requests.Session</code>的使用，因此<code>client</code>的方法调用之间就自动具有了状态记忆的功能。常见的场景就是，在登录系统后可以维持登录状态的<code>Session</code>，从而后续HTTP请求操作都能带上登录态。</p>
<p>而对于<code>HTTP(S)</code>以外的协议，我们同样可以使用<code>Locust</code>进行测试，只是需要我们自行实现客户端。在客户端的具体实现上，可通过注册事件的方式，在请求成功时触发<code>events.request_success</code>，在请求失败时触发<code>events.request_failure</code>即可。然后创建一个继承自<code>Locust类</code>的类，对其设置一个<code>client</code>属性并与我们实现的客户端进行绑定。后续，我们就可以像使用<code>HttpLocust类</code>一样，测试其它协议类型的系统。</p>
<p>原理就是这样简单！</p>
<p>在<code>Locust类</code>中，除了<code>client</code>属性，还有几个属性需要关注下：</p>
<ul>
<li><code>task_set</code>: 指向一个<code>TaskSet</code>类，<code>TaskSet</code>类定义了用户的任务信息，该属性为必填；</li>
<li><code>max_wait/min_wait</code>: 每个用户执行两个任务间隔时间的上下限（毫秒），具体数值在上下限中随机取值，若不指定则默认间隔时间固定为1秒；</li>
<li><code>host</code>：被测系统的host，当在终端中启动<code>locust</code>时没有指定<code>--host</code>参数时才会用到；</li>
<li><code>weight</code>：同时运行多个<code>Locust类</code>时会用到，用于控制不同类型任务的执行权重。</li>
</ul>
<p>测试开始后，每个虚拟用户（<code>Locust实例</code>）的运行逻辑都会遵循如下规律：</p>
<ol>
<li>先执行<code>WebsiteTasks</code>中的<code>on_start</code>（只执行一次），作为初始化；</li>
<li>从<code>WebsiteTasks</code>中随机挑选（如果定义了任务间的权重关系，那么就是按照权重关系随机挑选）一个任务执行；</li>
<li>根据<code>Locust类</code>中<code>min_wait</code>和<code>max_wait</code>定义的间隔时间范围（如果<code>TaskSet类</code>中也定义了<code>min_wait</code>或者<code>max_wait</code>，以<code>TaskSet</code>中的优先），在时间范围中随机取一个值，休眠等待；</li>
<li>重复<code>2~3</code>步骤，直至测试任务终止。</li>
</ol>
<h3 id="class-TaskSet"><a href="#class-TaskSet" class="headerlink" title="class TaskSet"></a>class TaskSet</h3><p>再说下<code>TaskSet类</code>。</p>
<p>性能测试工具要模拟用户的业务操作，就需要通过脚本模拟用户的行为。在前面的比喻中说到，<code>TaskSet类</code>好比蝗虫的大脑，控制着蝗虫的具体行为。</p>
<p>具体地，<code>TaskSet类</code>实现了虚拟用户所执行任务的调度算法，包括规划任务执行顺序（<code>schedule_task</code>）、挑选下一个任务（<code>execute_next_task</code>）、执行任务（<code>execute_task</code>）、休眠等待（<code>wait</code>）、中断控制（<code>interrupt</code>）等等。在此基础上，我们就可以在<code>TaskSet</code>子类中采用非常简洁的方式来描述虚拟用户的业务测试场景，对虚拟用户的所有行为（任务）进行组织和描述，并可以对不同任务的权重进行配置。</p>
<p>在<code>TaskSet</code>子类中定义任务信息时，可以采取两种方式，<code>@task装饰器</code>和<code>tasks属性</code>。</p>
<p>采用<code>@task装饰器</code>定义任务信息时，描述形式如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet, task</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span><span class="params">(TaskSet)</span>:</span></div><div class="line"><span class="meta">    @task(1)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_job1</span><span class="params">(self)</span>:</span></div><div class="line">        self.client.get(<span class="string">'/job1'</span>)</div><div class="line"></div><div class="line"><span class="meta">    @task(2)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_job2</span><span class="params">(self)</span>:</span></div><div class="line">        self.client.get(<span class="string">'/job2'</span>)</div></pre></td></tr></table></figure>
<p>采用<code>tasks属性</code>定义任务信息时，描述形式如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_job1</span><span class="params">(obj)</span>:</span></div><div class="line">    obj.client.get(<span class="string">'/job1'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_job2</span><span class="params">(obj)</span>:</span></div><div class="line">    obj.client.get(<span class="string">'/job2'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span><span class="params">(TaskSet)</span>:</span></div><div class="line">    tasks = &#123;test_job1:<span class="number">1</span>, test_job2:<span class="number">2</span>&#125;</div><div class="line">    <span class="comment"># tasks = [(test_job1,1), (test_job1,2)] # 两种方式等价</span></div></pre></td></tr></table></figure>
<p>在如上两种定义任务信息的方式中，均设置了权重属性，即执行<code>test_job2</code>的频率是<code>test_job1</code>的两倍。</p>
<p>若不指定执行任务的权重，则相当于比例为<code>1:1</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet, task</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span><span class="params">(TaskSet)</span>:</span></div><div class="line"><span class="meta">    @task</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_job1</span><span class="params">(self)</span>:</span></div><div class="line">        self.client.get(<span class="string">'/job1'</span>)</div><div class="line"></div><div class="line"><span class="meta">    @task</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_job2</span><span class="params">(self)</span>:</span></div><div class="line">        self.client.get(<span class="string">'/job2'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> TaskSet</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_job1</span><span class="params">(obj)</span>:</span></div><div class="line">    obj.client.get(<span class="string">'/job1'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_job2</span><span class="params">(obj)</span>:</span></div><div class="line">    obj.client.get(<span class="string">'/job2'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span><span class="params">(TaskSet)</span>:</span></div><div class="line">    tasks = [test_job1, test_job2]</div><div class="line">    <span class="comment"># tasks = &#123;test_job1:1, test_job2:1&#125; # 两种方式等价</span></div></pre></td></tr></table></figure>
<p>在<code>TaskSet</code>子类中除了定义任务信息，还有一个是经常用到的，那就是<code>on_start</code>函数。这个和<code>LoadRunner</code>中的<code>vuser_init</code>功能相同，在正式执行测试前执行一次，主要用于完成一些初始化的工作。例如，当测试某个搜索功能，而该搜索功能又要求必须为登录态的时候，就可以先在<code>on_start</code>中进行登录操作；前面也提到，<code>HttpLocust</code>使用到了<code>requests.Session</code>，因此后续所有任务执行过程中就都具有登录态了。</p>
<h3 id="脚本增强"><a href="#脚本增强" class="headerlink" title="脚本增强"></a>脚本增强</h3><p>掌握了<code>HttpLocust</code>和<code>TaskSet</code>，我们就基本具备了编写测试脚本的能力。此时再回过头来看前面的案例，相信大家都能很好的理解了。</p>
<p>然而，当面对较复杂的测试场景，可能有的同学还是会感觉无从下手；例如，很多时候脚本需要做关联或参数化处理，这些在<code>LoadRunner</code>中集成的功能，换到<code>Locust</code>中就不知道怎么实现了。可能也是这方面的原因，造成很多测试人员都感觉难以将Locust应用到实际的性能测试工作当中。</p>
<p>其实这也跟<code>Locust</code>的目标定位有关，<code>Locust</code>的定位就是<code>small and very hackable</code>。但是小巧并不意味着功能弱，我们完全可以通过Python脚本本身来实现各种各样的功能，如果大家有疑问，我们不妨逐项分解来看。</p>
<p>在<code>LoadRunner</code>这款功能全面应用广泛的商业性能测试工具中，脚本增强无非就涉及到四个方面：</p>
<ul>
<li>关联</li>
<li>参数化</li>
<li>检查点</li>
<li>集合点</li>
</ul>
<p>先说关联这一项。在某些请求中，需要携带之前从Server端返回的参数，因此在构造请求时需要先从之前请求的Response中提取出所需的参数，常见场景就是<code>session_id</code>。针对这种情况，<code>LoadRunner</code>虽然可能通过录制脚本进行自动关联，但是效果并不理想，在实际测试过程中也基本都是靠测试人员手动的来进行关联处理。</p>
<p>在<code>LoadRunner</code>中手动进行关联处理时，主要是通过使用注册型函数，例如<code>web_reg_save_param</code>，对前一个请求的响应结果进行解析，根据左右边界或其它特征定位到参数值并将其保存到参数变量，然后在后续请求中使用该参数。采用同样的思想，我们在<code>Locust</code>脚本中也完全可以实现同样的功能，毕竟只是Python脚本，通过官方库函数<code>re.search</code>就能实现所有需求。甚至针对html页面，我们也可以采用<code>lxml</code>库，通过<code>etree.HTML(html).xpath</code>来更优雅地实现元素定位。</p>
<p>然后再来看参数化这一项。这一项极其普遍，主要是用在测试数据方面。但通过归纳，发现其实也可以概括为三种类型。</p>
<ul>
<li>循环取数据，数据可重复使用：e.g. 模拟3用户并发请求网页，总共有100个URL地址，每个虚拟用户都会依次循环加载这100个URL地址；</li>
<li>保证并发测试数据唯一性，不循环取数据：e.g. 模拟3用户并发注册账号，总共有90个账号，要求注册账号不重复，注册完毕后结束测试；</li>
<li>保证并发测试数据唯一性，循环取数据：模拟3用户并发登录账号，总共有90个账号，要求并发登录账号不相同，但数据可循环使用。</li>
</ul>
<p>通过以上归纳，可以确信地说，以上三种类型基本上可以覆盖我们日常性能测试工作中的所有参数化场景。</p>
<p>在<code>LoadRunner</code>中是有一个集成的参数化模块，可以直接配置参数化策略。那在<code>Locust</code>要怎样实现该需求呢？</p>
<p>答案依旧很简单，使用Python的<code>list</code>和<code>queue</code>数据结构即可！具体做法是，在<code>WebsiteUser</code>定义一个数据集，然后所有虚拟用户在<code>WebsiteTasks</code>中就可以共享该数据集了。如果不要求数据唯一性，数据集选择<code>list</code>数据结构，从头到尾循环遍历即可；如果要求数据唯一性，数据集选择<code>queue</code>数据结构，取数据时进行<code>queue.get()</code>操作即可，并且这也不会循环取数据；至于涉及到需要循环取数据的情况，那也简单，每次取完数据后再将数据插入到队尾即可，<code>queue.put_nowait(data)</code>。</p>
<p>最后再说下检查点。该功能在<code>LoadRunner</code>中通常是使用<code>web_reg_find</code>这类注册函数进行检查的。在<code>Locust</code>脚本中，处理就更方便了，只需要对响应的内容关键字进行<code>assert xxx in response</code>操作即可。</p>
<p>针对如上各种脚本增强的场景，我也通过代码示例分别进行了演示。但考虑到文章中插入太多代码会影响到阅读，因此将代码示例部分剥离了出来，如有需要请点击查看<a href="/post/head-first-locust-advanced-script/">《深入浅出开源性能测试工具Locust（脚本增强）》</a>。</p>
<h2 id="Locust运行模式"><a href="#Locust运行模式" class="headerlink" title="Locust运行模式"></a>Locust运行模式</h2><p>在开始运行<code>Locust</code>脚本之前，我们先来看下<code>Locust</code>支持的运行模式。</p>
<p>运行<code>Locust</code>时，通常会使用到两种运行模式：单进程运行和多进程分布式运行。</p>
<p>单进程运行模式的意思是，<code>Locust</code>所有的虚拟并发用户均运行在单个<code>Python</code>进程中，具体从使用形式上，又分为<code>no_web</code>和<code>web</code>两种形式。该种模式由于单进程的原因，并不能完全发挥压力机所有处理器的能力，因此主要用于调试脚本和小并发压测的情况。</p>
<p>当并发压力要求较高时，就需要用到<code>Locust</code>的多进程分布式运行模式。从字面意思上看，大家可能第一反应就是多台压力机同时运行，每台压力机分担负载一部分的压力生成。的确，<code>Locust</code>支持任意多台压力机（一主多从）的分布式运行模式，但这里说到的多进程分布式运行模式还有另外一种情况，就是在同一台压力机上开启多个<code>slave</code>的情况。这是因为当前阶段大多数计算机的CPU都是多处理器（<code>multiple processor cores</code>），单进程运行模式下只能用到一个处理器的能力，而通过在一台压力机上运行多个<code>slave</code>，就能调用多个处理器的能力了。比较好的做法是，如果一台压力机有<code>N</code>个处理器内核，那么就在这台压力机上启动一个<code>master</code>，<code>N</code>个<code>slave</code>。当然，我们也可以启动<code>N</code>的倍数个<code>slave</code>，但是根据我的试验数据，效果跟<code>N</code>个差不多，因此只需要启动<code>N</code>个<code>slave</code>即可。</p>
<h2 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h2><p><code>Locust</code>脚本编写完毕后，通常不会那么顺利，在正式开始性能测试之前还需要先调试运行下。</p>
<p>不过，<code>Locust</code>脚本虽然为Python脚本，但却很难直接当做Python脚本运行起来，为什么呢？这主要还是因为<code>Locust</code>脚本中引用了<code>HttpLocust</code>和<code>TaskSet</code>这两个类，如果要想直接对其进行调用测试，会发现编写启动脚本是一个比较困难的事情。因为这个原因，刚接触<code>Locust</code>的同学可能就会觉得<code>Locust</code>脚本不好调试。</p>
<p>但这个问题也能克服，那就是借助<code>Locust</code>的单进程<code>no_web</code>运行模式。</p>
<p>在<code>Locust</code>的单进程<code>no_web</code>运行模式中，我们可以通过<code>--no_web</code>参数，指定并发数（<code>-c</code>）和总执行次数（<code>-n</code>），直接在<code>Terminal</code>中执行脚本。</p>
<p>在此基础上，当我们想要调试<code>Locust</code>脚本时，就可以在脚本中需要调试的地方通过<code>print</code>打印日志，然后将并发数和总执行次数都指定为1，执行形式如下所示。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ locust <span class="_">-f</span> locustfile.py --no_web -c 1 -n 1</div></pre></td></tr></table></figure>
<p>通过这种方式，我们就能很方便地对<code>Locust</code>脚本进行调试了。</p>
<h2 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h2><p><code>Locust</code>脚本调试通过后，就算是完成了所有准备工作，可以开始进行压力测试了。</p>
<p><code>Locust</code>是通过在<code>Terminal</code>中执行命令进行启动的，通用的参数有如下两个：</p>
<ul>
<li><code>-H, --host</code>：被测系统的<code>host</code>，若在<code>Terminal</code>中不进行指定，就需要在<code>Locust</code>子类中通过<code>host</code>参数进行指定；</li>
<li><code>-f, --locustfile</code>：指定执行的<code>Locust</code>脚本文件；</li>
</ul>
<p>除了这两个通用的参数，我们还需要根据实际测试场景，选择不同的<code>Locust</code>运行模式，而模式的指定也是通过其它参数来进行控制的。</p>
<h3 id="单进程运行"><a href="#单进程运行" class="headerlink" title="单进程运行"></a>单进程运行</h3><p><strong>no_web</strong></p>
<p>如果采用<code>no_web</code>形式，则需使用<code>--no-web</code>参数，并会用到如下几个参数。</p>
<ul>
<li><code>-c, --clients</code>：指定并发用户数；</li>
<li><code>-n, --num-request</code>：指定总执行测试；</li>
<li><code>-r, --hatch-rate</code>：指定并发加压速率，默认值位1。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ locust -H http://debugtalk.com <span class="_">-f</span> demo.py --no-web -c1 -n2</div><div class="line">[2017-02-21 21:27:26,522] Leos-MacBook-Air.local/INFO/locust.main: Starting Locust 0.8a2</div><div class="line">[2017-02-21 21:27:26,523] Leos-MacBook-Air.local/INFO/locust.runners: Hatching and swarming 1 clients at the rate 1 clients/s...</div><div class="line"> Name                                                          <span class="comment"># reqs      # fails     Avg     Min     Max  |  Median   req/s</span></div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"> Total                                                              0     0(0.00%)                                       0.00</div><div class="line"></div><div class="line">[2017-02-21 21:27:27,526] Leos-MacBook-Air.local/INFO/locust.runners: All locusts hatched: WebsiteUser: 1</div><div class="line">[2017-02-21 21:27:27,527] Leos-MacBook-Air.local/INFO/locust.runners: Resetting stats</div><div class="line"></div><div class="line"> Name                                                          <span class="comment"># reqs      # fails     Avg     Min     Max  |  Median   req/s</span></div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"> GET /about/                                                        0     0(0.00%)       0       0       0  |       0    0.00</div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"> Total                                                              0     0(0.00%)                                       0.00</div><div class="line"></div><div class="line"> Name                                                          <span class="comment"># reqs      # fails     Avg     Min     Max  |  Median   req/s</span></div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"> GET /about/                                                        1     0(0.00%)      17      17      17  |      17    0.00</div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"> Total                                                              1     0(0.00%)                                       0.00</div><div class="line"></div><div class="line">[2017-02-21 21:27:32,420] Leos-MacBook-Air.local/INFO/locust.runners: All locusts dead</div><div class="line"></div><div class="line">[2017-02-21 21:27:32,421] Leos-MacBook-Air.local/INFO/locust.main: Shutting down (<span class="built_in">exit</span> code 0), bye.</div><div class="line"> Name                                                          <span class="comment"># reqs      # fails     Avg     Min     Max  |  Median   req/s</span></div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"> GET /                                                              1     0(0.00%)      20      20      20  |      20    0.00</div><div class="line"> GET /about/                                                        1     0(0.00%)      17      17      17  |      17    0.00</div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"> Total                                                              2     0(0.00%)                                       0.00</div><div class="line"></div><div class="line">Percentage of the requests completed within given <span class="built_in">times</span></div><div class="line"> Name                                                           <span class="comment"># reqs    50%    66%    75%    80%    90%    95%    98%    99%   100%</span></div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div><div class="line"> GET /                                                               1     20     20     20     20     20     20     20     20     20</div><div class="line"> GET /about/                                                         1     17     17     17     17     17     17     17     17     17</div><div class="line">--------------------------------------------------------------------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<p><strong>web</strong></p>
<p>如果采用<code>web</code>形式，，则通常情况下无需指定其它额外参数，<code>Locust</code>默认采用<code>8089</code>端口启动<code>web</code>；如果要使用其它端口，就可以使用如下参数进行指定。</p>
<ul>
<li><code>-P, --port</code>：指定web端口，默认为<code>8089</code>.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ locust -H http://debugtalk.com <span class="_">-f</span> demo.py</div><div class="line">[2017-02-21 21:31:26,334] Leos-MacBook-Air.local/INFO/locust.main: Starting web monitor at *:8089</div><div class="line">[2017-02-21 21:31:26,334] Leos-MacBook-Air.local/INFO/locust.main: Starting Locust 0.8a2</div></pre></td></tr></table></figure>
<p>此时，<code>Locust</code>并没有开始执行测试，还需要在Web页面中配置参数后进行启动。</p>
<p>如果<code>Locust</code>运行在本机，在浏览器中访问<code>http://localhost:8089</code>即可进入<code>Locust</code>的Web管理页面；如果<code>Locust</code>运行在其它机器上，那么在浏览器中访问<code>http://locust_machine_ip:8089</code>即可。</p>
<p>在<code>Locust</code>的Web管理页面中，需要配置的参数只有两个：</p>
<ul>
<li><code>Number of users to simulate</code>: 设置并发用户数，对应中<code>no_web</code>模式的<code>-c, --clients</code>参数；</li>
<li><code>Hatch rate (users spawned/second)</code>: 启动虚拟用户的速率，对应着<code>no_web</code>模式的<code>-r, --hatch-rate</code>参数。</li>
</ul>
<p>参数配置完毕后，点击【Start swarming】即可开始测试。</p>
<h3 id="多进程分布式运行"><a href="#多进程分布式运行" class="headerlink" title="多进程分布式运行"></a>多进程分布式运行</h3><p>不管是<code>单机多进程</code>，还是<code>多机负载</code>模式，运行方式都是一样的，都是先运行一个<code>master</code>，再启动多个<code>slave</code>。</p>
<p>启动<code>master</code>时，需要使用<code>--master</code>参数；同样的，如果要使用<code>8089</code>以外的端口，还需要使用<code>-P, --port</code>参数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ locust -H http://debugtalk.com <span class="_">-f</span> demo.py --master --port=8088</div><div class="line">[2017-02-21 22:59:57,308] Leos-MacBook-Air.local/INFO/locust.main: Starting web monitor at *:8088</div><div class="line">[2017-02-21 22:59:57,310] Leos-MacBook-Air.local/INFO/locust.main: Starting Locust 0.8a2</div></pre></td></tr></table></figure>
<p><code>master</code>启动后，还需要启动<code>slave</code>才能执行测试任务。</p>
<p>启动<code>slave</code>时需要使用<code>--slave</code>参数；在<code>slave</code>中，就不需要再指定端口了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ locust -H http://debugtalk.com <span class="_">-f</span> demo.py --slave</div><div class="line">[2017-02-21 23:07:58,696] Leos-MacBook-Air.local/INFO/locust.main: Starting Locust 0.8a2</div><div class="line">[2017-02-21 23:07:58,696] Leos-MacBook-Air.local/INFO/locust.runners: Client <span class="string">'Leos-MacBook-Air.local_980ab0eec2bca517d03feb60c31d6a3a'</span> reported as</div><div class="line"> ready. Currently 2 clients ready to swarm.</div></pre></td></tr></table></figure>
<p>如果<code>slave</code>与<code>master</code>不在同一台机器上，还需要通过<code>--master-host</code>参数再指定<code>master</code>的IP地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ locust -H http://debugtalk.com <span class="_">-f</span> demo.py --slave --master-host=&lt;locust_machine_ip&gt;</div><div class="line">[2017-02-21 23:07:58,696] Leos-MacBook-Air.local/INFO/locust.main: Starting Locust 0.8a2</div><div class="line">[2017-02-21 23:07:58,696] Leos-MacBook-Air.local/INFO/locust.runners: Client <span class="string">'Leos-MacBook-Air.local_980ab0eec2bca517d03feb60c31d6a3a'</span> reported as</div><div class="line"> ready. Currently 2 clients ready to swarm.</div></pre></td></tr></table></figure>
<p><code>master</code>和<code>slave</code>都启动完毕后，就可以在浏览器中通过<code>http://locust_machine_ip:8089</code>进入<code>Locust</code>的Web管理页面了。使用方式跟单进程<code>web</code>形式完全相同，只是此时是通过多进程负载来生成并发压力，在<code>web</code>管理界面中也能看到实际的<code>slave</code>数量。</p>
<h2 id="测试结果展示"><a href="#测试结果展示" class="headerlink" title="测试结果展示"></a>测试结果展示</h2><p><code>Locust</code>在执行测试的过程中，我们可以在<code>web</code>界面中实时地看到结果运行情况。</p>
<p>相比于<code>LoadRunner</code>，<code>Locust</code>的结果展示十分简单，主要就四个指标：<code>并发数</code>、<code>RPS</code>、<code>响应时间</code>、<code>异常率</code>。但对于大多数场景来说，这几个指标已经足够了。</p>
<p><img src="/images/14877299635610.jpg" alt=""></p>
<p>在上图中，<code>RPS</code>和<code>平均响应时间</code>这两个指标显示的值都是根据最近2秒请求响应数据计算得到的统计值，我们也可以理解为瞬时值。</p>
<p>如果想看性能指标数据的走势，就可以在<code>Charts</code>栏查看。在这里，可以查看到<code>RPS</code>和<code>平均响应时间</code>在整个运行过程中的波动情况。这个功能之前在<code>Locust</code>中一直是缺失的，直到最近，这个坑才被我之前在<code>阿里移动</code>的同事（网络ID<a href="http://myzhan.github.io/" target="_blank" rel="external"><code>myzhan</code></a>）给填上了。当前该功能已经合并到<code>Locust</code>了，更新到最新版即可使用。</p>
<p><img src="/images/14877300553617.jpg" alt=""></p>
<p>除了以上数据，<code>Locust</code>还提供了整个运行过程数据的百分比统计值，例如我们常用的<code>90%响应时间</code>、<code>响应时间中位值</code>，该数据可以通过<code>Download response time distribution CSV</code>获得，数据展示效果如下所示。</p>
<p><img src="/images/14877305222231.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过前面对<code>Locust</code>全方位的讲解，相信大家对<code>Locust</code>的功能特性已经非常熟悉了，在实际项目中将<code>Locust</code>作为生产力工具应该也没啥问题了。</p>
<p>不过，任何一款工具都不是完美的，必定都会存在一些不足之处。但是好在<code>Locust</code>具有极强的可定制型，当我们遇到一些特有的需求时，可以在<code>Locust</code>上很方便地实现扩展。</p>
<p>还是前面提到的那位技术大牛（<code>myzhan</code>），他为了摆脱<code>CPython</code>的<code>GIL</code>和<code>gevent</code>的 <code>monkey_patch()</code>，将<code>Locust</code>的<code>slave</code>端采用<code>golang</code>进行了重写，采用<code>goroutine</code>取代了<code>gevent</code>。经过测试，相较于原生的<code>Python</code>实现，他的这套<code>golang</code>实现具有<code>5~10</code>倍以上的性能提升。当前，他已经将该实现开源，项目名称为<a href="https://github.com/myzhan/boomer" target="_blank" rel="external"><code>myzhan/boomer</code></a>，如果大家感兴趣，可以阅读他的博客文章进一步了解，<a href="http://myzhan.github.io/2016/03/01/write-a-load-testing-tool-in-golang/" target="_blank" rel="external">《用 golang 来编写压测工具》</a>。</p>
<p>如果我们也想在<code>Locust</code>的基础上进行二次开发，那要怎么开始呢？</p>
<p>毫无疑问，阅读<code>Locust</code>的项目源码是必不可少的第一步。可能对于很多人来说，阅读开源项目源码是一件十分困难的事情，不知道如何着手，在知乎上也看到好多关于如何阅读开源项目源码的提问。事实上，<code>Locust</code>项目的代码结构清晰，核心代码量也比较少，十分适合阅读学习。哪怕只是想体验下阅读开源项目源码，或者说想提升下自己的<code>Python</code>技能，<code>Locust</code>也是个不错的选择。</p>
<p>在下一篇文章中，我将对<code>Locust</code>源码进行解析，《深入浅出开源性能测试工具Locust（源码篇）》，敬请期待！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/post/locustplus-talk-about-performance-test/&quot;&gt;《【LocustPlus序】漫谈服务端性能测试》&lt;/a&gt;中，我对服务端性能测试的基础概念和性能测试工具的基本原理进行了介绍，并且重点推荐了&lt;code&gt;Locus
    
    </summary>
    
    
      <category term="性能测试" scheme="http://debugtalk.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Locust" scheme="http://debugtalk.com/tags/Locust/"/>
    
      <category term="开源项目" scheme="http://debugtalk.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>春节旅行之意法印象</title>
    <link href="http://debugtalk.com/post/my-impression-on-italy-and-france/"/>
    <id>http://debugtalk.com/post/my-impression-on-italy-and-france/</id>
    <published>2017-02-01T16:00:00.000Z</published>
    <updated>2017-03-11T04:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Florence1.jpg" alt=""></p>
<p>今年春节没有像往常一样回家过年，而是到欧洲旅行（意大利和法国），算是蜜月游吧。第一次到欧洲，确切地说，第一次出国，新鲜感还是蛮大的，趁着返程飞机上的空闲时间，写篇博客记录下。</p>
<p>我这次旅行全程12天，游玩的城市有罗马、梵蒂冈、佛罗伦萨、米兰和巴黎，景点以历史名胜和城市风光为主。全程自助游，行程安排比较自由宽松。当然，这篇博客并不是旅行攻略，描述的内容也不会面面俱到，只是挑了几个感触较深的点，观点可能很是片面，如有偏颇还请留言讨论。</p>
<p>先说下总体印象吧。如果说要通过几个关键词来概括这次旅行的所见所闻，特别是跟国内（一二线城市）进行对比的话，我个人的印象是：自然环境优美、生活节奏舒缓、饮食类型单一、公共设施陈旧、公共安全紧张、工程师氛围稀缺。</p>
<p><img src="/images/Florence2.jpg" alt=""></p>
<p>自然环境优美没啥好说的，之前不管是通过网络，还是和朋友的聊天交流，对欧洲的印象就是自然环境特别好。实际情况也的确是这样的。空气质量这块儿我没啥特别的感觉，因为深圳的空气本来也挺好的。见过的河水湖泊很是清澈，完全没有污染的痕迹。绿化非常赞，除了街道的树木，在城市中有很多森林公园。印象最深的就是小动物了，虽然是在城市里，但是到处都能看到鸽子、海鸥，在公园里还能看到野鸡、野鸭、天鹅，而且好玩的是这些动物基本都不怕人，靠近它们的时候也不会躲避，我还趁天鹅把头钻进水里捕食时偷偷摸了它的屁股。想想在国内，能在城市中看见只麻雀就算稀罕了，这方面真是没法比。</p>
<p>在人文环境方面，最大的感触就是欧洲的生活节奏十分舒缓。店铺通常开得挺晚的，关得也特别早，特别是在罗马和佛罗伦萨，下午六七点天黑后，就基本很少看到人了。在我等天朝IT狗的眼里，他们的工作量真是极其的不饱和啊。可能也是这方面的原因，商家普遍的服务态度都挺好的，很有耐心。有一次在梵蒂冈的礼品店里，虽然语言交流不是很顺畅，但老太太还是很有耐心的一一介绍，最后由于感觉价格比较贵，不大好意思地说不买了，老太太也完全没有表现出任何不悦，而是笑盈盈地说了句<code>Thank you, have a nice day</code>。在欧洲街道上，如果是在没有红绿灯的情况下，司机都会挥手示意让行人先过马路。刚开始的时候还有些不习惯，站在路口等汽车先走，结果司机更有耐心，执意等行人先走。哦对，在欧洲马路上，基本上没有听到汽车喇叭声，有时候没有看到身后的车辆，司机会探出头来打招呼。另外，在欧洲街头经常会看见各种行为艺术，特别是在罗马斗兽场的一条街道上，一路走去，吹拉弹唱跳，形式各异，水准颇高，真是一道靓丽的风景。看到他们总会经不住感叹，人家这才是生活啊，我等只能叫活着。</p>
<p><img src="/images/Pisa.jpg" alt=""></p>
<p>说到语言交流，这跟我之前的预期不大一样。在没出国之前，原以为欧洲的英语应该普及度很高，结果到了这边后发现并非如此，好多本地人并不会英语，即使是警察这样的公务员，会说英语的也是少数，而且口音还特别重。不过语言也真是一个神奇的东西，可能同样的场景，做英语听力理解题时无法正确答题，但是在面对面交流时，加上简单的肢体动作和眼神，基本上只要不是太复杂的场景，都难很好的完成交流。最多为了保险起见，我再用英语复述一遍我的理解，跟对方进行确认即可。哦对了，在欧洲遇到的好多人虽然不会说英语，但是貌似听懂是没啥问题，只是可能有些词汇不理解，需要变换下说法。例如，在询问能不能飞无人机时，跟他们说<code>drone</code>他们都不知道是啥意思，但是说<code>mini aircraft</code>他们就会明白了。</p>
<p>然后说下差异最大的饮食吧。跟博大精深的中餐相比，欧洲的饮食真是单一乏味。当然，像法餐这样高逼格的不在讨论范围内，价格太贵，我相信即使是本地人也不至于天天这么吃吧。在意大利和法国，当地人吃得最多的应该就是披萨和汉堡了。在我看来，意大利人真是除了披萨意面就没啥别的了。虽然披萨被做出花儿了，各种馅儿的都有，但老是这么吃还是受不了。意面更别提了，我们吃了一次就不想再吃。有一次在披萨店惊奇地发现有米饭，结果还是半生的，完全没法吃，想想也是，微波炉哪能做出米饭来。因此我们后面每到一个城市，就到处找中餐馆。中餐的价格普遍比披萨店贵两倍，面条、炒饭、盖浇饭这类快餐，普遍在7~9欧的样子，如果点菜的话，人均消费差不多要十多欧，这还是在比较克制的情况下。即使是这样，中餐馆的生意还都特别好。在罗马的一家中餐馆给我们的印象尤其深刻，我们是通过大众点评找过去的，结果到了以后发现门口贴纸告知要五点半开门。我们还以为店家不会开门了，就先在旁边的一家披萨店先吃着。过一会儿后，发现那家店门口逐渐聚集了一波中国人，到了五点半的时候，还真准时开门了。进去之后，发现基本满座了，全是中国人。一会儿后，服务员领班说，要等一阵才能点菜，因为厨师们要先吃饭。然后，所有顾客就看着一大桌厨师和服务员在那儿吃。我们也真是长见识了，原来餐馆还能这么开的，牛逼，换成在国内试试？</p>
<p><img src="/images/chocolates.jpg" alt=""></p>
<p>除了饮食，公共基础设施方面跟国内也没法比。首先是公交地铁，普遍比叫陈旧。特别是巴黎的<code>RER</code>线，简直难以相信这就是号称时尚浪漫之都的巴黎，刷票的门坏了好几个，各种电线暴露在外面垂在半空中，好多通道没有电梯，地铁车厢特别脏，地面积了厚厚的泥土和水渍，估计是好久都没有打扫过了，让我们一度以为我们到了假巴黎。然后说下欧洲的公厕，上一次要1欧，即使是在有的麦当劳店里，上厕所也是要收费的，每次想上厕所时换算下，要七块多人民币，真是尿不起啊有木有！不过公厕收费也比较好理解，因为欧洲的人力成本本来就比较高，特别是清洁工这类工种。除了硬件类的基础设施，软件类的服务跟国内相比也落后太多。在国内的时候，基本上带个手机出门就行了，吃饭、购物、叫车全电子化，但是在欧洲都基本还是用现金，大额消费可以刷信用卡，出去一趟回来兜里就好多找零的硬币。当然，虽然欧洲本土的互联网服务不咋地，但是人家能用<code>Google</code>的各项服务啊，光这一项我大天朝就完全被秒杀了。</p>
<p>在安全方面，感觉氛围比较紧张，没有在国内那么踏实。在机场、车站以及各个旅游景点，到处都是全副武装的大兵，警察也都是配枪的。本来我还打算出国后多拍下风景，特地在出国前买了一台<code>Mavic Pro</code>，结果到那儿以后看到这阵势，又在网上看到各种禁飞条令，因此也不敢造次，要是一不小心被当做恐怖分子击毙就不值了。另外，在街头随处可见流浪汉，甚至好多一家四五口一起睡在路边，估计是从其它国家过来避难的。如果政府没有救助措施的话，估计也会形成一定的安全隐患，之前也听朋友说最好晚上不要出门，抢劫、行窃比较多，还好我们没有遇到。</p>
<p>最后再说下跟我们软件工程师的相关的吧。不像在国内，上下班时满眼的笔记本电脑背包，在意大利和法国我真是一个都没看到过。我在想，这里是没有程序员的么，还是说程序员的电脑也是装在意大利皮革的手提包里了？不过，在艺术气息如此浓厚的地方，本地人应该也很难对写代码感兴趣吧。在巴黎的<code>Airbnb</code>民宿中，虽然没看到房东本人，但是从房屋装饰、陈列书籍和CD碟片来看，房东应该也是个搞绘画或雕塑的。之前听朋友说欧洲的技术工种稀缺，过去比较好找工作，当时我还颇为心动的；现在看来，是否稀缺不好说，但估计需求也比较少，即使过去，感觉从技术氛围的角度来看，也不是一个好的选择。所以去欧洲工作的想法先暂时搁置吧，后面再找机会去其它国家转转。</p>
<p>以上便是我这次欧洲意法之行的见闻和感受了，收获还是蛮大的。之前可能是一直处于天朝的大环境中，多多少少会变得有些功利和急躁，大至职业发展薪酬涨幅，小至绩效考核分数排名，很难做到不那么在意。但是当我在欧洲街头看到各类艺人专注于技艺表演时，在阿诺河旁看到白发老人沉浸于绘画写生时，我不禁在想，专注于自己喜爱的事情已经就足够幸福了，何必被世俗的眼光所左右，被眼前的蝇头小利所蒙蔽呢。虽说人生短暂，但是即使从现在开始，也还有好几十年的时光，足够自己折腾了。</p>
<p>嗯，前提是永远不要为自己设限。</p>
<blockquote>
<p>Keep learning and programming.</p>
</blockquote>
<p><img src="/images/Florence3.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Florence1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今年春节没有像往常一样回家过年，而是到欧洲旅行（意大利和法国），算是蜜月游吧。第一次到欧洲，确切地说，第一次出国，新鲜感还是蛮大的，趁着返程飞机上的空闲时间，写篇博客记录下。&lt;/
    
    </summary>
    
    
      <category term="个人成长" scheme="http://debugtalk.com/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
      <category term="旅行" scheme="http://debugtalk.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>我的2016年终总结</title>
    <link href="http://debugtalk.com/post/my-2016-summary/"/>
    <id>http://debugtalk.com/post/my-2016-summary/</id>
    <published>2016-12-30T16:00:00.000Z</published>
    <updated>2017-03-11T04:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016年于我而言，经历的事情挺多的，现在回想起来，很难相信这些都是在一年内发生的。</p>
<p>在5月份的时候，我从UC离职去了大疆，从移动互联网公司到了做无人机的硬件公司，从待了5年的广州到了深圳。很多朋友都很好奇换工作的原因，也许，是我还没有折腾够吧，再或者，是想到一个全新的环境去实践自己的一些想法吧。有种说法是，判断一个选择是否正确的方式，就是假设让你再回到之前选择的时刻，你还是否会做出同样的决定。如果让我回答这个问题，还真不好说，毕竟UC和大疆都是非常优秀的公司，只是作为成熟的上市公司和处于快速成长期的创业公司，各自有着不同的特质罢了。不过，我对现在的工作状态挺满意的，我想这就够了。</p>
<p>在技术方面，今年接触的领域挺多的。离开UC之前，主要是在Android客户端性能测试的持续集成方面，探索实践了几类专项测试，并将公司的测试平台任务成功率从不足70%提升到了95%以上。到了大疆以后，发现这边在测试这块儿基本上还处于蛮荒状态，于是便借此机会从零开始建设测试平台。刚开始接手的项目是<code>DJI+Discover</code>，于是新接触了iOS测试，从零开始做了iOS的UI自动化测试，并开源了一个基于Appium的测试框架<a href="https://github.com/debugtalk/AppiumBooster" target="_blank" rel="external"><code>AppiumBooster</code></a>；然后搞了持续集成测试平台，将自动化打包构建和iOS自动化测试串了起来。后面因为项目调整，接手了商城性能测试，重新捡起了之前的老本行服务端性能测试，不过没有使用之前精通的LoadRunner，而是选择了Locust这款开源的测试工具，并在其基础上做了一些扩展。再到后来，公司成立了互联网事业部一级部门，划分了质量部二级部门，然后我就从业务测试工作中抽调出来，专职做测试开发的工作，主要内容暂时是在Web的接口自动化测试和流程自动化测试方面。</p>
<p>除了纯粹的技术工作，今年也开始做测试岗的技术面试工作，前前后后面试了三四十人。在面试工作中，收获也挺大的，最主要的还是可以借此了解到其它公司在软件测试方面开展的情况，以及其他同行在做的事情，这些都挺有借鉴意义的。其中，有一点感触特别深，在我们这个行业，干技术的如果工作年限与实际能力不匹配，真的是挺尴尬的。虽然听上去很残忍，但是站在招聘方的角度就很好理解了，一个工作七八年的人如果技术积累跟工作了一两年的人差不多，或者是只高了一点，那么公司不管是从薪酬成本还是从员工发展潜力的角度，肯定会选择后者了。因此，既然选择了技术这条路，要想以后不经历这种尴尬，我们能做的也只有多磨练多积累了。</p>
<p>在今年，我开始用心经营<a href="http://debugtalk.com/">个人博客</a>和微信公众号（<code>DebugTalk</code>）。虽然在2013年的时候，当时也有开通过博客和公众号（52test.org），但那时玩的性质更多一些，没写几篇就搁置了。今年重新开始写博客的原因也挺简单的，就是想对自己的工作和学习进行下总结和记录。而且自身也越来越认同一个观点，最好的学习方式就是去教授别人，因为要向别人将一个问题通俗易懂地讲解清楚，自己就必须对其中的原理和因果联系有足够清晰的认识，有了这层动力，学习也就更有方向性，学习效率和效果也就上去了。再延伸一点，其实这也跟TDD的开发模式挺类似的，现在我也挺喜欢这样的开发模式，并在实际开发工作中践行TDD。</p>
<p>截止当前，今年更新的博客大概有30篇左右，主要内容还是工作中对一些技术的感悟和对学习过程的记录。从数量上看，这个量还是挺少的，而且更新频率也从每周数篇，到每周一篇，再到半月一篇，一月一篇，工作繁忙是一方面的原因，更主要的还是拖延症导致的。而且一旦丢了写博客的感觉，再提笔写起来更是难上加难。还算欣慰的是，从留言反馈来看，写的东西至少还是给一部分人带去了一些价值，并且博客在搜索引擎中也有了不错的收录。特别是有时候同事搜索解决方案结果检索到我写的文章时，还是会有一些成就感的。另外，通过公众号和博客，我也认识了好多业界同行，这也是一个很大的收获。</p>
<p>因为个人博客的原因，今年第一次接了私活儿，挣到了第一笔工资以外的收入。当时深圳一所高校的老师看到我的博客后，觉得还不错，于是联系我想让我给他和他的同事培训，他们再将培训内容用到教学中。之前也没接过私活儿，只是觉得这也是一个不错的实践机会，所以就答应了。好在实际教学过程中，他们还挺满意，我的压力也就小了许多。这里再插入一件比较有趣的事情，第一次授课后一位老师问我是研究生还是博士，我不大好意思地说我是本科。一个本科生给博士和博士后培训，这也算是一份难得的人生经历了。不过，术业有专攻嘛，理论教学和工程实践毕竟存在一定的差异。我也挺佩服他们的，能在业余休息时间主动去学习，让学生能了解到当前工程界流行的技术，这比某些照着课本念几十年的”老教授”真的不知道强了多少倍。</p>
<p>除了博客分享，今年在公司内部也进行了几场技术分享，印象比较深的有：<a href="/post/python-functional-programming-getting-started/">《Python的函数式编程–从入门到⎡放弃⎦》</a>，<a href="/post/build-ideal-app-automation-test-framework/">《从0到1搭建移动APP功能自动化测试平台（AppiumBooster）》</a>，<a href="/post/locustplus-talk-about-performance-test/">《漫谈服务端性能测试》</a>，《基于有限状态机的流程自动化测试》等。在演讲方面，自我感觉在时间控制方面还比较欠缺，一不小心就超时，这个在明年得好好改进下。</p>
<p>当然，对我个人而言，2016年最大的一件事儿就是成家了。虽然在年初的时候还完全没有想过今年会结婚的，但我还是和女朋友在2016年结束了四年的恋爱长跑，在9.19领了证，在10.3办了婚礼。当然，不是奉子成婚，请不要邪恶。在婚礼这件事情上，我们没有请婚庆主持，而是找了我们从小玩到大的好朋友，我们自己设计的流程环节，自己选的背景音乐，自己做的视频，虽然在婚礼前一晚还因为设备故障忙得焦头烂额，但是经历这么一个过程本身也是挺有意义的。</p>
<p>最后，我再简单地展望下2017年吧。</p>
<p>1、坚持写博客。至于具体指标，盯着博客阅读量和微信公众号关注人数也没啥意义，更多的还是希望能通过写博客让自己的内心静下来，同时获得自我成长。</p>
<p>2、进行一场对外技术分享，毕竟，面向公众演讲和面向同事演讲，感觉还是不一样的。也希望通过这种方式，逼迫自己更快的成长。</p>
<p>3、经得住诱惑，做好手头的工作，将公司的软件测试技术提升一个层次。这一年来收到的工作邀请也挺多的，特别是华为和腾讯，开出的薪资也很是诱人。但我还是觉得不能这么浮躁，换一个地方如果还是做同样的事情，意义也不大，还不如跟着公司一起成长。</p>
<p>4、学会生活，锻炼身体，陪伴家人，工作是长跑，讲究的是可持续发展。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年于我而言，经历的事情挺多的，现在回想起来，很难相信这些都是在一年内发生的。&lt;/p&gt;
&lt;p&gt;在5月份的时候，我从UC离职去了大疆，从移动互联网公司到了做无人机的硬件公司，从待了5年的广州到了深圳。很多朋友都很好奇换工作的原因，也许，是我还没有折腾够吧，再或者，是想到
    
    </summary>
    
    
      <category term="年终总结" scheme="http://debugtalk.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="个人成长" scheme="http://debugtalk.com/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地一键实现macOS网络代理切换</title>
    <link href="http://debugtalk.com/post/switch-macOS-web-proxy-in-elegant-way/"/>
    <id>http://debugtalk.com/post/switch-macOS-web-proxy-in-elegant-way/</id>
    <published>2016-11-23T16:00:00.000Z</published>
    <updated>2017-03-11T04:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>macOS</code>中配置Web代理时，通常的做法是在控制面板中进行操作，<code>System Preferences</code> -&gt; <code>Network</code> -&gt; <code>Advanced</code> -&gt; <code>Proxies</code>.</p>
<p><img src="/images/macOS-Web-Proxy-Setting.jpg" alt="macOS-Web-Proxy-Setting"></p>
<p>这种配置方式虽然可以实现需求，但缺点在于操作比较繁琐，特别是在需要频繁切换的情况下，效率极其低下。</p>
<p>基于该痛点，我们希望能避免重复操作，实现快速切换配置。</p>
<h2 id="Terminal中实现网络代理配置"><a href="#Terminal中实现网络代理配置" class="headerlink" title="Terminal中实现网络代理配置"></a>Terminal中实现网络代理配置</h2><p>要避免在GUI进行重复的配置操作，比较好的简化方式是在Terminal中通过命令实现同样的功能。事实上，在macOS系统中的确是存在配置网络代理的命令，该命令即是<code>networksetup</code>。</p>
<h3 id="获取系统已有的网络服务"><a href="#获取系统已有的网络服务" class="headerlink" title="获取系统已有的网络服务"></a>获取系统已有的网络服务</h3><p>首先需要明确的是，macOS系统中针对不同网络服务（<code>networkservice</code>）的配置是独立的，因此在配置Web代理时需要进行指定。</p>
<p>而要获取系统中存在哪些网络服务，可以通过如下命令查看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ networksetup -listallnetworkservices</div><div class="line">An asterisk (*) denotes that a network service is disabled.</div><div class="line"></div><div class="line">Wi-Fi</div><div class="line">iPhone USB</div><div class="line">Bluetooth PAN</div><div class="line">Thunderbolt Bridge</div></pre></td></tr></table></figure>
<p>如果计算机是通过<code>Wi-Fi</code>上网的，那么我们设置网络代理时就需要对<code>Wi-Fi</code>进行设置。</p>
<h3 id="开启Web代理"><a href="#开启Web代理" class="headerlink" title="开启Web代理"></a>开启Web代理</h3><p>通过<code>networksetup</code>命令对<code>HTTP</code>接口设置代理时，可以采用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo networksetup -setwebproxy &lt;networkservice&gt; &lt;domain&gt; &lt;port number&gt; &lt;authenticated&gt; &lt;username&gt; &lt;password&gt;</div><div class="line"><span class="comment"># e.g. sudo networksetup -setwebproxy "Wi-Fi" 127.0.0.1 8080</span></div></pre></td></tr></table></figure>
<p>执行该命令时，会开启系统的Web HTTP Proxy，并将Proxy设置为<code>127.0.0.1:8080</code>。</p>
<p>如果是对<code>HTTPS</code>接口设置代理时，命令为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ networksetup -setsecurewebproxy &lt;networkservice&gt; &lt;domain&gt; &lt;port number&gt; &lt;authenticated&gt; &lt;username&gt; &lt;password&gt;</div><div class="line"><span class="comment"># e.g. sudo networksetup -setsecurewebproxy "Wi-Fi" 127.0.0.1 8080</span></div></pre></td></tr></table></figure>
<h3 id="关闭Web代理"><a href="#关闭Web代理" class="headerlink" title="关闭Web代理"></a>关闭Web代理</h3><p>对应地，关闭<code>HTTP</code>和<code>HTTPS</code>代理的命令为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo networksetup -setwebproxystate &lt;networkservice&gt; &lt;on off&gt;</div><div class="line"><span class="comment"># e.g. sudo networksetup -setwebproxystate "Wi-Fi" off</span></div><div class="line"></div><div class="line">$ networksetup -setsecurewebproxystate &lt;networkservice&gt; &lt;on off&gt;</div><div class="line"><span class="comment"># e.g. sudo networksetup -setsecurewebproxystate "Wi-Fi" off</span></div></pre></td></tr></table></figure>
<h2 id="结合Shuttle实现一键配置"><a href="#结合Shuttle实现一键配置" class="headerlink" title="结合Shuttle实现一键配置"></a>结合Shuttle实现一键配置</h2><p>现在我们已经知道如何通过<code>networksetup</code>命令在Terminal中进行Web代理切换了，但如果每次都要重新输入命令和密码，还是会很麻烦，并没有真正地解决我们的痛点。</p>
<p>而且在实际场景中，我们通常需要同时开启或关闭HTTP、HTTPS两种协议的网络代理，这类操作如此高频，要是还能通过点击一个按钮就实现切换，那就优雅多了。</p>
<p>幸运的是，这种优雅的方式还真能实现，只需要结合使用<code>Shuttle</code>这么一款小工具。</p>
<p><a href="http://fitztrev.github.io/shuttle/" target="_blank" rel="external"><code>Shuttle</code></a>，简而言之，它可以将一串命令映射到macOS顶部菜单栏的快捷方式。我们要做的很简单，只需要将要实现的任务拼接成一条串行的命令即可，然后就可以在系统菜单栏中点击按钮运行整条命令。</p>
<p>例如，在Terminal中，要想在不手动输入<code>sudo</code>密码的情况下实现同时关闭HTTP和HTTPS的网络代理，就可以通过如下串行命令实现。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> &lt;password&gt; | sudo -S networksetup -setwebproxystate <span class="string">'Wi-Fi'</span> off &amp;&amp; sudo networksetup -setsecurewebproxystate <span class="string">'Wi-Fi'</span> off</div></pre></td></tr></table></figure>
<p>类似地，我们还可以实现同时开启HTTP和HTTPS网络代理，更有甚者，我们还可以实现在同时开启HTTP和HTTPS网络代理后，启动<code>mitmproxy</code>抓包工具。</p>
<p>这一切配置都可以在Shuttle的配置文件<code>~/.shuttle.json</code>中完成。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">"hosts": [</div><div class="line">  &#123;</div><div class="line">    "mitmproxy": [</div><div class="line">      &#123;</div><div class="line">        "name": "Open mitmproxy",</div><div class="line">        "cmd": "echo &lt;password&gt; | sudo -S networksetup -setwebproxy 'Wi-Fi' 127.0.0.1 8080 &amp;&amp; sudo networksetup -setsecurewebproxy 'Wi-Fi' 127.0.0.1 8080 &amp;&amp; workon mitmproxy &amp;&amp; mitmproxy -p 8080"</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    "HTTP(S) Proxy": [</div><div class="line">      &#123;</div><div class="line">        "name": "Turn on HTTP(S) Proxy",</div><div class="line">        "cmd": "echo &lt;password&gt; | sudo -S networksetup -setwebproxy 'Wi-Fi' 127.0.0.1 8080 &amp;&amp; sudo networksetup -setsecurewebproxy 'Wi-Fi' 127.0.0.1 8080"</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        "name": "Turn off HTTP(S) Proxy",</div><div class="line">        "cmd": "echo &lt;password&gt; | sudo -S networksetup -setwebproxystate 'Wi-Fi' off &amp;&amp; sudo networksetup -setsecurewebproxystate 'Wi-Fi' off"</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">    ],</div><div class="line">  &#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<p>配置十分简洁清晰，不用解释也能看懂。完成配置后，在<code>macOS</code>顶部菜单栏中就会出现如下效果的快捷方式。</p>
<p><img src="/images/shuttle-preview.png" alt="macOS-Web-Proxy-Setting"></p>
<p>后续，我们就可以通过快捷方式实现一键切换HTTP(S)代理配置、一键启动<code>mitmproxy</code>抓包工具了。</p>
<p>说到<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="external"><code>mitmproxy</code></a>这款开源的抓包工具，只能说相见恨晚，第一次使用它时就被惊艳到了，情不自禁地想给它点个赞！自从使用了<code>mitmproxy</code>，我现在基本上就不再使用<code>Fiddler</code>和<code>Charles</code>了，日常工作中HTTP(S)抓包任务全靠它搞定。</p>
<p>哦对了，<code>mitmproxy</code>不仅可以实现抓包任务，还可以跟<a href="https://github.com/locustio/locust" target="_blank" rel="external"><code>locust</code></a>性能测试工具紧密结合，直接将抓取的数据包生成<code>locust</code>脚本啊！</p>
<p><code>mitmproxy</code>如此强大，本文就不再多说了，后续必须得写一篇博客单独对其详细介绍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;macOS&lt;/code&gt;中配置Web代理时，通常的做法是在控制面板中进行操作，&lt;code&gt;System Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Network&lt;/code&gt; -&amp;gt; &lt;code&gt;Advanced&lt;/code&gt; -&amp;gt
    
    </summary>
    
    
      <category term="Web proxy" scheme="http://debugtalk.com/tags/Web-proxy/"/>
    
      <category term="Shuttle" scheme="http://debugtalk.com/tags/Shuttle/"/>
    
      <category term="mitmproxy" scheme="http://debugtalk.com/tags/mitmproxy/"/>
    
      <category term="Locust" scheme="http://debugtalk.com/tags/Locust/"/>
    
  </entry>
  
  <entry>
    <title>【LocustPlus序】漫谈服务端性能测试</title>
    <link href="http://debugtalk.com/post/locustplus-talk-about-performance-test/"/>
    <id>http://debugtalk.com/post/locustplus-talk-about-performance-test/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2017-03-11T04:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为工作原因，我又拾起了老本行，开始做Web性能测试。之前虽然做过三四年的性能测试，但是在博客和开源项目方面都没有什么输出，一直是一个很大的遗憾。因此，近期打算围绕服务端性能测试的话题，将自己在这方面的经历进行整理。并且，最近使用的性能测试工具Locust感觉挺不错的，只是其功能比较单薄，特别是在性能指标监控和测试报告图表方面比较缺失，因此也打算在Locust的基础上做二次开发，打造一款自己用得顺手的性能测试工具，暂且将其命名为<code>LocustPlus</code>吧。</p>
<h2 id="简述性能测试"><a href="#简述性能测试" class="headerlink" title="简述性能测试"></a>简述性能测试</h2><p>提起性能测试，可能移动APP的从业人员会感觉比较混淆，因为在客户端（Android、iOS）中也有性能测试专项，主要涉及的是APP的启动时间、内存、包大小、帧率，流量等客户端相关的指标。在本博客之前的文章中，也包含了一些客户端性能测试的内容。需要说明的是，本文所讲解的性能测试都是针对服务器端，尤指Web系统的，与移动APP的性能测试完全是不同的领域。</p>
<p>那么，什么是服务端的性能测试呢？</p>
<p>先从大家都熟悉的功能测试说起吧。例如，我们要测试一个搜索功能，那么我们测试时，就会输入搜索关键词，点击搜索按钮，然后再去查看搜索结果，看结果是否跟我们输入的搜索关键词匹配，如果匹配则说明搜索功能实现正确。</p>
<p><img src="/images/google_search.png" alt="Google Search"></p>
<p>那如何对该功能进行性能测试呢？</p>
<p>答案就是，N个人同时进行功能性操作的同时，在确保功能实现正确的前提下，考察服务端应用程序的各项性能指标，以及服务器硬件资源的使用情况。</p>
<p>当然，这个答案比较简单粗暴，但是它仍然包含了性能测试的基本特点：</p>
<ul>
<li>以功能实现正确为前提</li>
<li>通常有一定的并发用户</li>
<li>重点考察服务器端在一定并发压力下的性能指标</li>
</ul>
<p>最后，再明确下性能测试的目的。通常，对服务器端应用程序开展性能测试，是为了验证软件系统是否能够达到预期的性能指标，同时发现软件系统中存在的性能瓶颈，从而实现优化系统的目的。</p>
<h2 id="性能测试方法的核心"><a href="#性能测试方法的核心" class="headerlink" title="性能测试方法的核心"></a>性能测试方法的核心</h2><p>根据不同的测试目的，性能测试可以分为多种类型，常见的有如下几类：</p>
<ul>
<li>基准测试（Standard Testing）</li>
<li>负载测试（Load Testing）</li>
<li>压力测试（Stress Testing）</li>
<li>疲劳强度测试</li>
</ul>
<p>首先说下基准测试。基准测试指的是模拟单个用户执行业务场景时，考察系统的性能指标。严格意义上来讲，基准测试并不能算作性能测试范畴，它跟功能测试并没有太大区别。差异在于，基准测试的目的更多地是关注业务功能的正确性，或者说验证测试脚本的正确性，然后，将基准测试时采集得到的系统性能指标，作为基准测试结果，为后续并发压力测试的性能分析提供参考依据。</p>
<p>负载测试，主要指的是模拟系统在正常负载压力场景下，考察系统的性能指标。这里说的正常负载，主要是指用户对系统能承受的最大业务负载量的期望值，即预计系统最大应该支持多大用户的并发量。通过负载测试，目的是验证系统是否能满足预期的业务压力场景。</p>
<p>和负载测试的概念比较接近的是压力测试。通俗地讲，压力测试是为了发现在多大并发压力下系统的性能会变得不可接受，或者出现性能拐点（崩溃）的情况。在加压策略上，压力测试会对被测系统逐步加压，在加压的过程中考察系统性能指标的走势情况，最终找出系统在出现性能拐点时的并发用户数，也就是系统支持的最大并发用户数。</p>
<p>最后再说下疲劳强度测试。其实疲劳强度测试的加压策略跟负载测试也很接近，都是对系统模拟出系统能承受的最大业务负载量，差异在于，疲劳强度测试更关注系统在长时间运行情况下系统性能指标的变化情况，例如，系统在运行一段时间后，是否会出现事务处理失败、响应时间增长、业务吞吐量降低、CPU/内存资源增长等问题。</p>
<p>通过对比可以发现，不同的性能测试类型，其本质的差异还是在加压策略上，而采用何种加压策略，就取决于我们实际的测试目的，即期望通过性能测试发现什么问题。明白了这一点，性能测试类型的差异也就不再容易混淆了。</p>
<blockquote>
<p>结论要点1：性能测试手段的重点在于加压的方式和策略。</p>
</blockquote>
<h2 id="性能瓶颈定位的核心"><a href="#性能瓶颈定位的核心" class="headerlink" title="性能瓶颈定位的核心"></a>性能瓶颈定位的核心</h2><p>在前面频繁地提到了性能指标，那性能指标究竟有哪些，我们在性能测试的过程中需要重点关注哪些指标项呢？</p>
<p>从维度上划分，性能指标主要分为两大类，分别是业务性能指标和系统资源性能指标。</p>
<p>业务性能指标可以直观地反映被测系统的实际性能状况，常用的指标项有：</p>
<ul>
<li>并发用户数</li>
<li>事务吞吐率（TPS/RPS）</li>
<li>事务平均响应时间</li>
<li>事务成功率</li>
</ul>
<p>而系统资源性能指标，主要是反映整个系统环境的硬件资源使用情况，常用的指标包括：</p>
<ul>
<li>服务器：CPU利用率、处理器队列长度、内存利用率、内存交换页面数、磁盘IO状态、网卡带宽使用情况等；</li>
<li>数据库：数据库连接数、数据库读写响应时长、数据库读写吞吐量等；</li>
<li>网络：网络吞吐量、网络带宽、网络缓冲池大小；</li>
<li>缓存（Redis）：静态资源缓存命中率、动态数据缓存命中率、缓存吞吐量等；</li>
<li>测试设备（压力发生器）：CPU利用率、处理器队列长度、内存利用率、内存交换页面数、磁盘IO状态、网卡带宽使用情况等。</li>
</ul>
<p>对于以上指标的具体含义我就不在此进行逐一说明了，大家可以自行搜索，务必需要搞清楚每个指标的概念及其意义。可能有些指标在不同的操作系统中的名称有些差异，但是基本都会有对应的指标，其代表的意义也是相通的。例如，处理器队列长度这个指标，在Windows中的指标名称是<code>System\Processor Queue Length</code>，而在Linux系统中则需要看<code>load averages</code>。</p>
<p>可能对于最后一项（测试设备）有些人不大理解，监控被测系统环境的相关硬件资源使用情况不就好了么，为什么还要关注测试设备本身呢？这是因为测试设备在模拟高并发请求的过程中，设备本身也会存在较高的资源消耗，例如CPU、内存、网卡带宽吃满，磁盘IO读写频繁，处理器排队严重等；当出现这类情况后，测试设备本身就会出现瓶颈，无法产生预期的并发压力，从而我们测试得到的数据也就不具有可参考性了。此处暂不进行展开，后面我会再结合实际案例，通过图表和数据对此详细进行说明。</p>
<p>需要说明的是，性能指标之间通常都是有密切关联的，单纯地看某个指标往往很难定位出性能瓶颈，这需要我们对各项性能指标的含义了然于胸，然后才能在实际测试的过程中对系统性能状况综合进行分析，找出整个系统真正的瓶颈。举个简单的例子，压力测试时发现服务器端CPU利用率非常高，那这个能说明什么问题呢？是服务端应用程序的算法问题，还是服务器硬件资源配置跟不上呢？光看这一个指标并不能定位出产生问题的真正原因，而如果仅因为这一点，就决定直接去优化程序算法或者升级服务器配置，最后也很难真正地解决问题。</p>
<blockquote>
<p>结论要点2：性能瓶颈定位的重点在于性能指标的监控和分析。</p>
</blockquote>
<h2 id="引入性能测试工具"><a href="#引入性能测试工具" class="headerlink" title="引入性能测试工具"></a>引入性能测试工具</h2><p>通过前面的讲解，我们已经知道性能测试的主要手段是通过产生模拟真实业务的压力对被测系统进行加压，与此同时监控被测系统的各项性能指标，研究被测系统在不同压力情况下的表现，找出其潜在的性能瓶颈。</p>
<p>那么，如何对系统进行加压，又如何对系统的指标进行监控呢？这里，就需要引入性能测试工具了。</p>
<p>当然，我们也可以先看下在不借助性能测试工具的情况下，如何手工地对系统进行性能测试。</p>
<p>假设现在我们要对前面提到的搜索功能进行负载测试，验证在20个并发用户下搜索功能的事务平均响应时间是否在3秒以内。</p>
<p>很自然地，我们可以想到测试的必要条件有如下几点：</p>
<ul>
<li>20个测试人员，产生业务压力</li>
<li>1个指挥人员，对20个人员的协调控制，实现并发操作</li>
<li>1个结果记录人员，对每一个人员的操作耗时进行监控和记录</li>
<li>若干资源监控人员，实时查看被测系统的各项性能指标，对指标进行汇总、分析</li>
<li>1个结果统计人员，对20个用户各操作消耗的时长进行汇总，计算其平均值</li>
</ul>
<p>可以看出，要通过人工来进行性能测试，操作上极为繁琐，需要投入的资源非常多，而这还仅仅是一个非常简单的场景。设想，如果要测试10000并发，服务器有好几十台，显然，这种情况下是完全不可能通过投入人力就能解决的。这也就是性能测试工具存在的必要性和诞生的背景。</p>
<h2 id="性能测试工具的基本组成"><a href="#性能测试工具的基本组成" class="headerlink" title="性能测试工具的基本组成"></a>性能测试工具的基本组成</h2><p>当前，市面上已经有了很多性能测试工具，但不管是哪一款，基本都会包含如下几个核心的模块。</p>
<ul>
<li>压力生成器（Virtual User Generator）</li>
<li>结果采集器（Result Collector）</li>
<li>负载控制器（Controller）</li>
<li>系统资源监控器（Monitor）</li>
<li>结果分析器（Analysis）</li>
</ul>
<p>原理结构图如下所示：</p>
<p><img src="/images/perftest_tool.png" alt="Google Search"></p>
<p>对照前面手工进行性能测试的案例，不难理解，压力发生器对应的是众多测试人员，结果采集器对应的是结果记录人员，负载控制器对应的是指挥人员，资源监控器对应的是若干资源监控人员，结果分析器对应的是结果统计人员。</p>
<p>其中，压力发生器又是性能测试工具最核心的部分，它主要有两个功能，一是真实模拟用户操作，二是模拟有效并发。</p>
<p>然而，大多数性能测试工作人员可能都会忽略的是，当前市面上性能测试工具的压力发生器基本都是存在缺陷的。</p>
<p>先说下模拟真实用户操作。如果熟悉浏览器的工作原理，就会知道浏览器在加载网页的时候，是同时并发多个TCP连接去请求页面对应的HTTP资源，包括HTML、JS、图片、CSS，当前流行的浏览器普遍会并发6-10个连接。然而，性能测试工具在模拟单个用户操作的时候，基本上都是单连接串行加载页面资源。产生的差异在于，假如页面有100个资源，每个HTTP请求的响应时间约为100毫秒，那么浏览器采用6个连接并行加载网页时大概会需要1.7秒（<code>100/6*100</code>毫秒），而测试工具采用单连接串行加载就需要10秒（<code>100*100</code>毫秒），两者结果相差十分巨大。这也解释了为什么有时候我们通过性能测试工具测试得到的响应时间挺长，但是手动用浏览器加载网页时感觉挺快的原因。</p>
<p>再说下有效并发。什么叫有效并发？有效并发就是我们在测试工具中设置了1000虚拟用户数，实际在服务器端就能产生1000并发压力。然而现实情况是，很多时候由于测试设备自身出现了性能瓶颈，压力发生器产生的并发压力远小于设定值，并且通常测试工具也不会将该问题暴露给测试人员；如果测试人员忽略了这个问题，以为测试得到的结果就是在设定并发压力下的结果，那么最终分析得出的结论也就跟实际情况大相径庭了。不过，我们可以通过保障测试环境不存在瓶颈，使得实际生成的并发压力尽可能地与设定值一致；另一方面，我们也可以通过在测试过程中监控Web层（例如Nginx）的连接数和请求数，查看实际达到服务器端的并发数是否跟我们的设定值一致，以此来反推压力发生器的压力是否有效。</p>
<p>了解这些缺陷的意义在于，我们可以更清楚测试工具的原理，从而更准确地理解测试结果的真实含义。</p>
<h2 id="性能测试工具推荐"><a href="#性能测试工具推荐" class="headerlink" title="性能测试工具推荐"></a>性能测试工具推荐</h2><p>经过充分的理论铺垫，现在总算可以进入正题，开始讲解工具部分了。</p>
<p>在性能测试工具方面，我重点向大家推荐<code>Locust</code>这款开源工具。目前阶段，该款工具在国内的知名度还很低，大多数测试人员可能之前都没有接触过。为了便于理解，我先将<code>Locust</code>与LoadRunner、Jmeter这类大众耳熟能详的性能测试工具进行简单对比。</p>
<table>
<thead>
<tr>
<th style="text-align:left">\</th>
<th>LoadRunner</th>
<th>Jmeter</th>
<th>Locust</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">授权方式</td>
<td>商业收费</td>
<td>开源免费</td>
<td>开源免费</td>
</tr>
<tr>
<td style="text-align:left">开发语言</td>
<td>C/Java</td>
<td>Java</td>
<td>Python</td>
</tr>
<tr>
<td style="text-align:left">测试脚本形式</td>
<td>C/Java</td>
<td>GUI</td>
<td>Python</td>
</tr>
<tr>
<td style="text-align:left">并发机制</td>
<td>进程/线程</td>
<td>线程</td>
<td>协程</td>
</tr>
<tr>
<td style="text-align:left">单机并发能力</td>
<td>低</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td style="text-align:left">分布式压力</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td style="text-align:left">资源监控</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td style="text-align:left">报告与分析</td>
<td>完善</td>
<td>简单图表</td>
<td>简单图表</td>
</tr>
<tr>
<td style="text-align:left">支持二次开发</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
</tr>
</tbody>
</table>
<p>通过对比，大家可能会疑惑，<code>Locust</code>也不怎么样嘛，资源监控也不支持，报告分析能力也这么弱，那为啥还要选择它呢？</p>
<p>授权方式这个就不说了。虽然LoadRunner是商业软件，价格极其昂贵，但是国内盗版横行，别说个人，就算是大型互联网公司，用正版的也没几个。</p>
<p>从功能特性的角度来讲，LoadRunner是最全面的，用户群体也是最多的，相应的学习资料也最为丰富。个人建议如果是新接触性能测试，可以先熟悉LoadRunner，借此了解性能测试工具各个模块的概念和功能，在此基础上再转到别的测试工具，也都比较好上手了。不过，LoadRunner只能在Windows平台使用，并且并发效率比较低，单台压力机难以产生较高的并发能力，这也是现在我弃用该款工具的主要原因。</p>
<p>同样地，Jmeter的并发机制也是基于线程，并发效率存在同样的问题；另外，Jmeter在脚本编写和描述方面是基于GUI操作，个人感觉操作比较繁琐（这个因人而异），因此不是很喜欢。</p>
<p>那么，我重点推荐的<code>Locust</code>有啥特别的地方呢？</p>
<p>如果从整体功能上来看的话，<code>Locust</code>的功能的确比较单薄。不过，作为性能测试工具最核心的压力发生器部分，却是非常不错的。抛开官方文档的介绍，个人觉得最赞的有两点。</p>
<p>首先是模拟用户操作，也就是测试脚本描述方面。Locust采用Pure Python脚本描述，并且HTTP请求完全基于<a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external"><code>Requests</code></a>库。用过<code>Requests</code>的都知道，这个库非常简洁易用，但功能十分强大，很多其它编程语言的HTTP库都借鉴了它的思想和模式，如果将其评选为最好用的HTTP库之一（不限语言），应该也不会有太大的争议。除了HTTP(S)协议，Locust也可以测试其它任意协议的系统，只需要采用Python调用对应的库进行请求描述即可。</p>
<p>另外一点就是并发机制了。Locust的并发机制摒弃了进程和线程，采用协程（<a href="http://xlambda.com/gevent-tutorial/" target="_blank" rel="external"><code>gevent</code></a>）的机制。采用多线程来模拟多用户时，线程数会随着并发数的增加而增加，而线程之间的切换是需要占用资源的，IO的阻塞和线程的sleep会不可避免的导致并发效率下降；正因如此，LoadRunner和Jmeter这类采用进程和线程的测试工具，都很难在单机上模拟出较高的并发压力。而协程和线程的区别在于，协程避免了系统级资源调度，由此大幅提高了性能。正常情况下，单台普通配置的测试机可以生产数千并发压力，这是LoadRunner和Jmeter都无法实现的。</p>
<p>有了一个不错的引擎，外表装饰简陋点也都是可以接受的了。不过虽然Locust功能单薄，特别是在性能指标监控和测试报告图表方面比较缺失，但是Locust的代码结构清晰，核心代码量也只有几百行，可扩展性也非常不错。换言之，Locust的可玩性（<code>hackable</code>）极强，对于一个想深入挖掘性能测试工具原理的人来说，<code>Locust</code>非常适合。</p>
<p>好了，Locust的介绍暂且到这儿，后续我会再对Locust的使用方法和二次开发进行详细介绍，也算是弥补官方文档的不足吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为工作原因，我又拾起了老本行，开始做Web性能测试。之前虽然做过三四年的性能测试，但是在博客和开源项目方面都没有什么输出，一直是一个很大的遗憾。因此，近期打算围绕服务端性能测试的话题，将自己在这方面的经历进行整理。并且，最近使用的性能测试工具Locust感觉挺不错的，
    
    </summary>
    
    
      <category term="性能测试" scheme="http://debugtalk.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Locust" scheme="http://debugtalk.com/tags/Locust/"/>
    
  </entry>
  
  <entry>
    <title>打造心目中理想的自动化测试框架（AppiumBooster）</title>
    <link href="http://debugtalk.com/post/build-ideal-app-automation-test-framework/"/>
    <id>http://debugtalk.com/post/build-ideal-app-automation-test-framework/</id>
    <published>2016-09-06T16:00:00.000Z</published>
    <updated>2017-03-11T04:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做过自动化测试的人应该都会有这样一种体会，要写个自动化demo测试用例很容易，但是要真正将自动化测试落地，对成百上千的自动化测试用例实现较好的可复用性和可维护性就很难了。</p>
<p>基于这一痛点，我开发了<a href="https://github.com/debugtalk/AppiumBooster" target="_blank" rel="external"><code>AppiumBooster</code></a>框架。顾名思义，<code>AppiumBooster</code>基于<code>Appium</code>实现，但更简单和易于使用；测试人员不用接触任何代码，就可以直接采用简洁优雅的方式来编写和维护自动化测试用例。</p>
<p>原型开发完毕后，我将其应用在当前所在团队的项目上，并在使用的过程中，按照自己心目中理想的自动化测试框架的模样对其进行迭代优化，最终打磨成了一个自己还算用得顺手的自动化测试框架。</p>
<p>本文便是对<code>AppiumBooster</code>的核心特性及其设计思想进行介绍。在内容组织上，本文的各个部分相对独立，大家可直接选择自己感兴趣的部分进行阅读。</p>
<h2 id="UI交互基础"><a href="#UI交互基础" class="headerlink" title="UI交互基础"></a>UI交互基础</h2><p>UI交互是自动化测试的基础，主要分为三部分内容：定位控件、操作控件、检测结果。</p>
<h3 id="控件定位"><a href="#控件定位" class="headerlink" title="控件定位"></a>控件定位</h3><p>定位控件时，统一采用元素ID进行定位。这里的ID包括<code>accessibility_id</code>或<code>accessibility_label</code>，需要在iOS工程项目中预先进行设置。</p>
<p>另外，考虑到控件可能出现延迟加载的情况，定位控件时统一执行<code>wait</code>操作；定位成功后会立即返回控件对象，定位失败时会进行等待并不断尝试定位，直到超时（30秒）后抛出异常。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wait &#123; id control_id &#125;</div></pre></td></tr></table></figure>
<p>源码路径：<a href="https://github.com/debugtalk/AppiumBooster/blob/master/lib/pages/control.rb" target="_blank" rel="external"><code>AppiumBooster/lib/pages/control.rb</code></a></p>
<h3 id="控件操作"><a href="#控件操作" class="headerlink" title="控件操作"></a>控件操作</h3><p>根据实践证明，UI的控件操作基本主要就是点击、输入和滑动，这三个操作基本上可以覆盖绝大多数场景。</p>
<ul>
<li><code>scrollToDisplay</code>: 根据指定控件的坐标位置，对屏幕进行<code>上/下/左/右</code>滑动操作，直至将指定控件展示在屏幕中</li>
<li><code>click</code>: 通过控件ID定位到指定控件，并对指定控件进行<code>click</code>操作；若指定控件不在当前屏幕中，则先执行<code>scrollToDisplay</code>，再执行<code>click</code>操作</li>
<li><code>type(text)</code>: 在指定控件中输入字符串；若指定控件不在当前屏幕中，则先执行<code>scrollToDisplay</code>，再执行输入操作</li>
<li><code>tapByCoordinate</code>: 先执行<code>scrollToDisplay</code>，确保指定控件在当前屏幕中；获取指定控件的坐标值，然后对坐标进行<code>tap</code>操作</li>
<li><code>scroll(direction)</code>: 对屏幕进行指定方向的滑动</li>
</ul>
<p>源码路径：<a href="https://github.com/debugtalk/AppiumBooster/blob/master/lib/pages/actions.rb" target="_blank" rel="external"><code>AppiumBooster/lib/pages/actions.rb</code></a></p>
<h3 id="预期结果检查"><a href="#预期结果检查" class="headerlink" title="预期结果检查"></a>预期结果检查</h3><p>每次执行一步操作后，需要对执行结果进行判断，以此来确定测试用例的各个步骤是否执行成功。</p>
<p>当前，<code>AppiumBooster</code>采用控件的ID作为检查对象，并统一封装到<code>check_elements(control_ids)</code>方法中。</p>
<p>在实际使用过程中，需要先确定当前步骤执行完成后的跳转页面的特征控件，即当前步骤执行前不存在该控件，但执行成功后的页面中具有该控件。然后在操作步骤描述的<code>expectation</code>属性中指定特征控件的ID。</p>
<p>具体地，在指定控件ID的时候还可以配合使用操作符（<code>!</code>,<code>||</code>,<code>&amp;&amp;</code>），以此实现多种复杂场景的检测。典型的预期结果描述形式如下：</p>
<ul>
<li><code>A</code>: 预期控件A存在；</li>
<li><code>!A</code>: 预期控件A不存在；</li>
<li><code>A||B</code>: 预期控件A或控件B至少存在一个；</li>
<li><code>A&amp;&amp;B</code>: 预期控件A和控件B同时存在；</li>
<li><code>A&amp;&amp;!B</code>: 预期控件A存在，但控件B不存在；</li>
<li><code>!A&amp;&amp;!B</code>: 预期控件A和控件B都不存在。</li>
</ul>
<p>源码路径：<a href="https://github.com/debugtalk/AppiumBooster/blob/master/lib/pages/inner_screen.rb" target="_blank" rel="external"><code>AppiumBooster/lib/pages/inner_screen.rb</code></a></p>
<h2 id="测试用例引擎（YAML）"><a href="#测试用例引擎（YAML）" class="headerlink" title="测试用例引擎（YAML）"></a>测试用例引擎（YAML）</h2><p>对于自动化测试而言，自动化测试用例的组织与管理是最为重要的部分，直接关系到自动化测试用例的可复用性和可维护性。</p>
<p>经过综合考虑，<code>AppiumBooster</code>从三个层面来描述测试用例，从低到高分别是<code>step</code>、<code>feature</code>和<code>testcase</code>；描述方式推荐使用<code>YAML</code>格式。</p>
<h3 id="steps（测试步骤描述）"><a href="#steps（测试步骤描述）" class="headerlink" title="steps（测试步骤描述）"></a>steps（测试步骤描述）</h3><p>首先是对于单一操作步骤的描述。</p>
<p>从UI层面来看，每一个操作步骤都可以归纳为三个方面：定位控件、操作控件和检查结果。</p>
<p><code>AppiumBooster</code>的做法是，将App根据功能模块进行拆分，每一个模块单独创建一个<code>YAML</code>文件，并保存在<code>steps</code>目录下。然后，在每个模块中以控件为单位，分别进行定义。</p>
<p>现以如下示例进行详细说明。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">AccountSteps:</span></div><div class="line">  enter Login page:</div><div class="line"><span class="attr">    control_id:</span> tablecellMyAccountLogin</div><div class="line"><span class="attr">    control_action:</span> click</div><div class="line"><span class="attr">    expectation:</span> btnForgetPassword</div><div class="line"></div><div class="line">  input test EmailAddress:</div><div class="line"><span class="attr">    control_id:</span> txtfieldEmailAddress</div><div class="line"><span class="attr">    control_action:</span> type</div><div class="line"><span class="attr">    data:</span> leo.lee@debugtalk.com</div><div class="line"><span class="attr">    expectation:</span> sectxtfieldPassword</div><div class="line"></div><div class="line">  check if coupon popup window exists(optional):</div><div class="line"><span class="attr">    control_id:</span> inner_screen</div><div class="line"><span class="attr">    control_action:</span> has_control</div><div class="line"><span class="attr">    data:</span> btnViewMyCoupons</div><div class="line"><span class="attr">    expectation:</span> btnClose</div><div class="line"><span class="attr">    optional:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>其中，<code>AccountSteps</code>是steps模块名称，用于区分不同的steps模块，方便在<code>features</code>模块中进行引用。</p>
<p>描述单个步骤时，有三项是必不可少的：步骤名称、控件ID（<code>control_id</code>）和控件操作方式（<code>control_action</code>）。当控件操作方式为输入（<code>type</code>）时，则还需指定<code>data</code>属性，即输入内容。</p>
<p>在检查步骤执行结果方面，可通过在<code>expectation</code>属性中指定控件ID进行实现，前面在<code>预期结果检查</code>一节中已经详细介绍了使用方法。该属性可以置空或不进行填写，相当于不对当前步骤进行检测。</p>
<p>另外还有一个<code>optional</code>属性，对步骤指定该属性并设置为true时，当前步骤的执行结果不影响整个测试用例。</p>
<h3 id="features（功能点描述）"><a href="#features（功能点描述）" class="headerlink" title="features（功能点描述）"></a>features（功能点描述）</h3><p>各个模块的单一操作步骤定义完毕后，虽然可以直接将多个步骤进行组合形成对测试场景的描述，即测试用例，但是操作起来会过于局限细节；特别是当测试用例较多时，可维护性是一个很大的问题。</p>
<p><code>AppiumBooster</code>的做法是，将App根据功能模块进行拆分，每一个模块单独创建一个<code>YAML</code>文件，并保存在<code>features</code>目录下。然后，在每个模块中以功能点为单位，通过对steps模块中定义好的操作步骤进行引用并组合，即可实现对功能点的描述。</p>
<p>以<code>系统登录</code>功能为例，功能点的描述可采用如下形式。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">AccountFeatures:</span></div><div class="line">  login with valid test account:</div><div class="line"><span class="bullet">    -</span> AccountSteps | enter My Account page</div><div class="line"><span class="bullet">    -</span> AccountSteps | enter Login page</div><div class="line"><span class="bullet">    -</span> AccountSteps | input test EmailAddress</div><div class="line"><span class="bullet">    -</span> AccountSteps | input test Password</div><div class="line"><span class="bullet">    -</span> AccountSteps | login</div><div class="line"><span class="bullet">    -</span> AccountSteps | close coupon popup window(optional)</div><div class="line"></div><div class="line">  login with valid production account:</div><div class="line"><span class="bullet">    -</span> AccountSteps | enter My Account page</div><div class="line"><span class="bullet">    -</span> AccountSteps | enter Login page</div><div class="line"><span class="bullet">    -</span> AccountSteps | input production EmailAddress</div><div class="line"><span class="bullet">    -</span> AccountSteps | input production Password</div><div class="line"><span class="bullet">    -</span> AccountSteps | login</div><div class="line"><span class="bullet">    -</span> AccountSteps | close coupon popup window(optional)</div><div class="line"></div><div class="line"><span class="attr">  logout:</span></div><div class="line"><span class="bullet">    -</span> AccountSteps | enter My Account page</div><div class="line"><span class="bullet">    -</span> SettingsSteps | enter Settings page</div><div class="line"><span class="bullet">    -</span> AccountSteps | logout</div></pre></td></tr></table></figure>
<p>其中，<code>AccountFeatures</code>是features模块名称，用于区分不同的features模块，方便在<code>testcase</code>中进行引用。</p>
<p>在引用steps模块的操作步骤时，需要同时指定steps模块名称和操作步骤的名称，并以<code>|</code>进行分隔。</p>
<h3 id="testcases（测试用例描述）"><a href="#testcases（测试用例描述）" class="headerlink" title="testcases（测试用例描述）"></a>testcases（测试用例描述）</h3><p>在功能点描述的基础上，<code>AppiumBooster</code>就可以在第三个层面，简单清晰地描述测试用例了。</p>
<p>具体做法很简单，针对每个测试用例创建一个<code>YAML</code>文件，并保存在<code>testcases</code>目录下。然后，通过对features模块中定义好的功能点描述进行引用并组合，即可实现对测试用例的描述。</p>
<p>同样的，在引用features模块的功能点时，也需要同时指定features模块名称和功能点的名称，并以<code>|</code>进行分隔。</p>
<p>如下示例便是实现了在商城中购买商品的整个流程，包括切换国家、登录、选择商品、添加购物车、下单完成支付等功能点。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line">Buy Phantom <span class="number">4</span>:</div><div class="line"><span class="bullet">  -</span> SettingsFeatures | initialize first startup</div><div class="line"><span class="bullet">  -</span> SettingsFeatures | Change Country to China</div><div class="line"><span class="bullet">  -</span> AccountFeatures | login with valid account</div><div class="line"><span class="bullet">  -</span> AccountFeatures | Change Shipping Address to China</div><div class="line"><span class="bullet">  -</span> StoreFeatures | add phantom <span class="number">4</span> to cart</div><div class="line"><span class="bullet">  -</span> StoreFeatures | finish order</div><div class="line"><span class="bullet">  -</span> AccountFeatures | logout</div></pre></td></tr></table></figure>
<p>另外，在某些测试场景中可能需要重复进行某一个功能点的操作。虽然可以将需要重复的步骤多写几次，但会显得比较累赘，特别是重复次数较多时更是麻烦。</p>
<p><code>AppiumBooster</code>的做法是，在测试用例的步骤中可指定执行次数，并以<code>|</code>进行分隔，如下例所示。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line">Send random text messages:</div><div class="line"><span class="bullet">  -</span> SettingsFeatures | initialize first startup</div><div class="line"><span class="bullet">  -</span> AccountFeatures | login with valid test account</div><div class="line"><span class="bullet">  -</span> MessageFeatures | enter follower user message page</div><div class="line"><span class="bullet">  -</span> MessageFeatures | send random text message | <span class="number">100</span></div></pre></td></tr></table></figure>
<h2 id="测试用例引擎（CSV）"><a href="#测试用例引擎（CSV）" class="headerlink" title="测试用例引擎（CSV）"></a>测试用例引擎（CSV）</h2><p>基本上，<code>YAML</code>测试用例引擎已经可以很好地满足组织和管理自动化测试用例的需求。</p>
<p>但考虑到部分用户会偏向于使用表格的形式，因为表格看上去更直观一些，<code>AppiumBooster</code>同时还支持<code>CSV</code>格式的测试用例引擎。</p>
<h3 id="testcases（测试用例描述）-1"><a href="#testcases（测试用例描述）-1" class="headerlink" title="testcases（测试用例描述）"></a>testcases（测试用例描述）</h3><p>采用表格来编写测试用例时，只需要在任意表格工具，包括Microsoft Excel、iWork Numbers、WPS等，按照如下形式对测试用例进行描述。</p>
<p><img src="/images/AppiumBooster_CSV_Testcase_example.jpg" alt="AppiumBooster CSV Testcase example"></p>
<p>然后，将表格内容另存为<code>CSV</code>格式的文件，并放置于<code>testcases</code>目录中即可。</p>
<p>可以看出，<code>CSV</code>格式的测试用例和<code>YAML</code>格式的测试用例是等价的，两者包含的信息内容完全相同。</p>
<p>在具体实现上，<code>AppiumBooster</code>在执行测试用例之前，也会将两个测试用例引擎的测试用例描述转换为相同的数据结构，然后再进行统一的操作。</p>
<p>统一转换后的数据结构如下所示：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"testcase_name"</span>: <span class="string">"Login and Logout"</span>,</div><div class="line">  <span class="attr">"features_suite"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"feature_name"</span>: <span class="string">"login with valid account"</span>,</div><div class="line">      <span class="attr">"feature_steps"</span>: [</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"btnMenuMyAccount"</span>, <span class="attr">"control_action"</span>: <span class="string">"click"</span>, <span class="attr">"expectation"</span>: <span class="string">"tablecellMyAccountSystemSettings"</span>, <span class="attr">"step_desc"</span>: <span class="string">"enter My Account page"</span>&#125;,</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"tablecellMyAccountLogin"</span>, <span class="attr">"control_action"</span>: <span class="string">"click"</span>, <span class="attr">"expectation"</span>: <span class="string">"btnForgetPassword"</span>, <span class="attr">"step_desc"</span>: <span class="string">"enter Login page"</span>&#125;,</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"txtfieldEmailAddress"</span>, <span class="attr">"control_action"</span>: <span class="string">"type"</span>, <span class="attr">"data"</span>: <span class="string">"leo.lee@debugtalk.com"</span>, <span class="attr">"expectation"</span>: <span class="string">"sectxtfieldPassword"</span>, <span class="attr">"step_desc"</span>: <span class="string">"input EmailAddress"</span>&#125;,</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"sectxtfieldPassword"</span>, <span class="attr">"control_action"</span>: <span class="string">"type"</span>, <span class="attr">"data"</span>: <span class="number">12345678</span>, <span class="attr">"expectation"</span>: <span class="string">"btnLogin"</span>, <span class="attr">"step_desc"</span>: <span class="string">"input Password"</span>&#125;,</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"btnLogin"</span>, <span class="attr">"control_action"</span>: <span class="string">"click"</span>, <span class="attr">"expectation"</span>: <span class="string">"tablecellMyMessage"</span>, <span class="attr">"step_desc"</span>: <span class="string">"login"</span>&#125;,</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"btnClose"</span>, <span class="attr">"control_action"</span>: <span class="string">"click"</span>, <span class="attr">"expectation"</span>: nil, <span class="attr">"optional"</span>: <span class="literal">true</span>, <span class="attr">"step_desc"</span>: <span class="string">"close coupon popup window(optional)"</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"feature_name"</span>: <span class="string">"logout"</span>,</div><div class="line">      <span class="attr">"feature_steps"</span>: [</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"btnMenuMyAccount"</span>, <span class="attr">"control_action"</span>: <span class="string">"click"</span>, <span class="attr">"expectation"</span>: <span class="string">"tablecellMyAccountSystemSettings"</span>, <span class="attr">"step_desc"</span>: <span class="string">"enter My Account page"</span>&#125;,</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"tablecellMyAccountSystemSettings"</span>, <span class="attr">"control_action"</span>: <span class="string">"click"</span>, <span class="attr">"expectation"</span>: <span class="string">"txtCountryDistrict"</span>, <span class="attr">"step_desc"</span>: <span class="string">"enter Settings page"</span>&#125;,</div><div class="line">        &#123;<span class="attr">"control_id"</span>: <span class="string">"btnLogout"</span>, <span class="attr">"control_action"</span>: <span class="string">"click"</span>, <span class="attr">"expectation"</span>: <span class="string">"uiviewMyAccount"</span>, <span class="attr">"step_desc"</span>: <span class="string">"logout"</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试用例转换器（yaml2csv）"><a href="#测试用例转换器（yaml2csv）" class="headerlink" title="测试用例转换器（yaml2csv）"></a>测试用例转换器（<code>yaml2csv</code>）</h3><p>既然<code>CSV</code>格式的测试用例和<code>YAML</code>格式的测试用例是等价的，那么两者之间的转换也就容易实现了。</p>
<p>当前，<code>AppiumBooster</code>支持将<code>YAML</code>格式的测试用例转换为<code>CSV</code>格式的测试用例，只需要执行一条命令即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby start.rb -c <span class="string">"yaml2csv"</span> <span class="_">-f</span> ios/testcases/login_and_logout.yml</div></pre></td></tr></table></figure>
<h2 id="过程记录及结果存储"><a href="#过程记录及结果存储" class="headerlink" title="过程记录及结果存储"></a>过程记录及结果存储</h2><p>在自动化测试执行过程中，应尽量对测试用例执行过程进行记录，方便后续对问题根据定位和追溯。</p>
<h3 id="过程记录方式"><a href="#过程记录方式" class="headerlink" title="过程记录方式"></a>过程记录方式</h3><p>当前，<code>AppiumBooster</code>已实现的记录形式有如下三种：</p>
<ul>
<li>logger模块：可指定日志级别对测试过程进行记录</li>
<li>截图功能：测试用例运行过程中，在每个步骤执行完成后进行截图</li>
<li>DOM source：测试用例运行过程中，在每个步骤执行完成后保存当前页面的DOM内容</li>
</ul>
<h3 id="测试结果存储"><a href="#测试结果存储" class="headerlink" title="测试结果存储"></a>测试结果存储</h3><p>由于<code>Appium</code>分为Server端和Client端，因此<code>AppiumBooster</code>在记录日志的时候也将日志分为了三份：</p>
<ul>
<li><code>appium_server.log</code>: Appium Server端的日志，这部分日志是由<code>Appium框架</code>打印的</li>
<li><code>appium_booster.log</code>: 包括测试环境初始化和测试用例执行记录，这部分日志是由<code>AppiumBooster</code>中采用logger模块打印的</li>
<li><code>client_server.log</code>: 同时记录<code>AppiumBooster</code>和<code>Appium框架</code>的日志，相当于<code>appium_server.log</code>和<code>appium_booster.log</code>的并集，优点在于可以清晰地看到测试用例执行过程中Client端和Server端的通讯交互过程</li>
</ul>
<p>另外，当测试用例执行失败时，<code>AppiumBooster</code>会将执行失败的步骤截图和日志提取出来，单独保存到<code>errors</code>文件夹中，方便问题追溯。</p>
<p>具体地，每次执行测试前，<code>AppiumBooster</code>会在指定的<code>results</code>目录下创建一个以当前时间（<code>%Y-%m-%d_%H:%M:%S</code>）命名的文件夹，存储结构如下所示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">2016-08-28_16:28:48</div><div class="line">├── appium_server.log</div><div class="line">├── appium_booster.log</div><div class="line">├── client_server.log</div><div class="line">├── errors</div><div class="line">│   ├── 16_31_29_btnLogin.click.dom</div><div class="line">│   ├── 16_31_29_btnLogin.click.png</div><div class="line">│   ├── 16_32_03_btnMenuMyAccount.click.dom</div><div class="line">│   └── 16_32_03_btnMenuMyAccount.click.png</div><div class="line">├── screenshots</div><div class="line">│   ├── 16_30_34_tablecellMyAccountLogin.click.png</div><div class="line">│   ├── 16_30_41_txtfieldEmailAddress.type_leo.lee@debugtalk.com.png</div><div class="line">│   ├── 16_30_48_sectxtfieldPassword.type_123456.png</div><div class="line">│   ├── 16_31_29_btnLogin.click.png</div><div class="line">│   └── 16_32_03_btnMenuMyAccount.click.png</div><div class="line">└── xmls</div><div class="line">    ├── 16_30_34_tablecellMyAccountLogin.click.dom</div><div class="line">    ├── 16_30_41_txtfieldEmailAddress.type_leo.lee@debugtalk.com.dom</div><div class="line">    ├── 16_30_48_sectxtfieldPassword.type_123456.dom</div><div class="line">    ├── 16_31_29_btnLogin.click.dom</div><div class="line">    └── 16_32_03_btnMenuMyAccount.click.dom</div></pre></td></tr></table></figure>
<p>对于每一个测试步骤的截图和DOM，存储文件命名格式为<code>%H_%M_%S_ControlID.ControlAction</code>。采用这种命名方式有两个好处：</p>
<ul>
<li>文件通过时间排序，对应着测试用例执行的步骤顺序</li>
<li>可以在截图或DOM中直观地看到每一步操作指令对应的执行结果</li>
</ul>
<h2 id="环境初始化"><a href="#环境初始化" class="headerlink" title="环境初始化"></a>环境初始化</h2><h3 id="Appium-Server"><a href="#Appium-Server" class="headerlink" title="Appium Server"></a>Appium Server</h3><p>在执行自动化测试时，某些情况下可能会造成<code>Appium Server</code>出现异常情况（e.g. 500 error），并影响到下一次测试的执行。</p>
<p>为了避免这类情况，<code>AppiumBooster</code>在每次执行测试前，会强制性地对<code>Appium Server</code>进行重启。方式也比较简单暴力，运行测试之前先检查系统是否有<code>bin/appium</code>的进程在运行，如果有，则先kill掉该进程，然后再启动<code>Appium Server</code>。</p>
<p>需要说明的是，由于<code>Appium Server</code>的启动需要一定时间，为了防止运行<code>Appium Client</code>时<code>Appium Server</code>还未初始化完毕，因此启动<code>Appium Server</code>后最好能等待一段时间（e.g. sleep 10s）。</p>
<h3 id="iOS-Android模拟器"><a href="#iOS-Android模拟器" class="headerlink" title="iOS/Android模拟器"></a><code>iOS/Android</code>模拟器</h3><p>在模拟器中运行一段时间后，也会存在缓存数据和文件，可能会对下一次测试造成影响。</p>
<p>为了避免这类情况，<code>AppiumBooster</code>在每次执行测试前，会先删除已存在的模拟器，然后再用指定的模拟器配置创建新的模拟器。</p>
<p>对于iOS模拟器，<code>AppiumBooster</code>通过调用<code>xcrun simctl</code>命令的方式来对模拟器进行操作，基本原理如下所示。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># delete iOS simulator: xcrun simctl delete device_id</span></div><div class="line">$ xcrun simctl delete F2F53866-50A5-4E0F-B164-5AC1702AD1BD</div><div class="line"><span class="comment"># create iOS simulator: xcrun simctl create device_type device_type_id runtime_id</span></div><div class="line">$ xcrun simctl create <span class="string">'iPhone 5'</span> <span class="string">'com.apple.CoreSimulator.SimDeviceType.iPhone-5'</span> <span class="string">'com.apple.CoreSimulator.SimRuntime.iOS-9-3'</span></div></pre></td></tr></table></figure>
<p>其中，<code>device_id</code>/<code>device_type_id</code>/<code>runtime_id</code>这些属性值可以通过执行<code>xcrun simctl list</code>命令获取得到。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ xcrun simctl list</div><div class="line">== Device Types ==</div><div class="line">iPhone 5s (com.apple.CoreSimulator.SimDeviceType.iPhone-5s)</div><div class="line">iPhone 6 (com.apple.CoreSimulator.SimDeviceType.iPhone-6)</div><div class="line">== Runtimes ==</div><div class="line">iOS 8.4 (8.4 - 12H141) (com.apple.CoreSimulator.SimRuntime.iOS-8-4)</div><div class="line">iOS 9.3 (9.3 - 13E230) (com.apple.CoreSimulator.SimRuntime.iOS-9-3)</div><div class="line">== Devices ==</div><div class="line">-- iOS 8.4 --</div><div class="line">    iPhone 5s (E1BD9CC5-8E95-408F-849C-B0C6A44D669A) (Shutdown)</div><div class="line">-- iOS 9.3 --</div><div class="line">    iPhone 5s (BAFEFBE1-3ADB-45C4-9C4E-E3791D260524) (Shutdown)</div><div class="line">    iPhone 6 (F23B3F85-7B65-4999-9F1C-80111783F5A5) (Shutdown)</div><div class="line">== Device Pairs ==</div></pre></td></tr></table></figure>
<h2 id="增强特性"><a href="#增强特性" class="headerlink" title="增强特性"></a>增强特性</h2><p>除了以上基础特性，<code>AppiumBooster</code>还支持一些辅助特性，可以增强测试框架的使用体验。</p>
<h3 id="Data参数化"><a href="#Data参数化" class="headerlink" title="Data参数化"></a>Data参数化</h3><p>在某些场景下，测试用例执行时需要动态获取数值。例如，注册账号的测试用例中，每次执行测试用例时需要保证用户名为未注册的，常见的做法就是在注册用户名中包含时间戳。</p>
<p><code>AppiumBooster</code>的做法是，可以在测试步骤的<code>data</code>字段中，传入Ruby表达式，格式为<code>${ruby_expression}</code>。在执行测试用例时，会先对<code>ruby_expression</code>进行<code>eval</code>计算，然后用计算得到的值作为实际参数。</p>
<p>回到刚才的注册账号测试用例，填写用户名的步骤就可以按照如下形式指定参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input test EmailAddress:</div><div class="line">  control_id: txtfieldEmailAddress</div><div class="line">  control_action: type</div><div class="line">  data: $&#123;Time.now.to_i&#125;@debugtalk.com</div><div class="line">  expectation: sectxtfieldPassword</div></pre></td></tr></table></figure>
<p>实际执行测试用例时，<code>data</code>就会参数化为<code>1471318368@debugtalk.com</code>的形式。</p>
<h3 id="全局参数配置"><a href="#全局参数配置" class="headerlink" title="全局参数配置"></a>全局参数配置</h3><p>对于某些配置参数，例如系统的登录账号密码等，虽然可以直接填写到测试用例的<code>steps</code>中，但是终究不够灵活。特别是当存在多个测试用例引用同一个参数时，涉及到参数改动时就需要同时修改多个地方。</p>
<p>更好的做法是，将此类参数提取出来，在统一的地方进行配置。在<code>AppiumBooster</code>中，可以在<code>config.yml</code>文件中配置全局参数。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">TestEnvAccount:</span></div><div class="line"><span class="attr">  UserName:</span> test@debugtalk.com</div><div class="line"><span class="attr">  Password:</span> <span class="number">123456</span></div><div class="line"></div><div class="line"><span class="attr">ProductionEnvAccount:</span></div><div class="line"><span class="attr">  UserName:</span> production@debugtalk.com</div><div class="line"><span class="attr">  Password:</span> <span class="number">12345678</span></div></pre></td></tr></table></figure>
<p>然后，在测试用例的<code>steps</code>就可以采用如下形式对全局参数进行引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">AccountSteps:</div><div class="line">  input test EmailAddress:</div><div class="line">    control_id: txtfieldEmailAddress</div><div class="line">    control_action: type</div><div class="line">    data: $&#123;config.TestEnvAccount.UserName&#125;</div><div class="line">    expectation: sectxtfieldPassword</div><div class="line"></div><div class="line">  input test Password:</div><div class="line">    control_id: sectxtfieldPassword</div><div class="line">    control_action: type</div><div class="line">    data: $&#123;config.TestEnvAccount.Password&#125;</div><div class="line">    expectation: btnLogin</div></pre></td></tr></table></figure>
<h3 id="optional选项"><a href="#optional选项" class="headerlink" title="optional选项"></a>optional选项</h3><p>在执行测试用例时，有时候可能会存在这样的场景：某个步骤作为非必要步骤，当其执行失败时，我们并不想将测试用例判定为不通过。</p>
<p>基于该场景，在测试用例设计表格中增加了<code>optional</code>参数。该参数值默认不用填写。但如果在某个步骤对应的optional栏填写了true值后，那么该步骤就会作为非必要步骤，其执行结果不会影响整个用例的执行结果。</p>
<p>例如，在电商类APP中，某些账号有优惠券，登录系统后，会弹出优惠券的提示框；而有的账号没有优惠券，登录后就不会有这样的弹框。那么关闭优惠券弹框的步骤就可以将其<code>optional</code>参数设置为true。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">AccountSteps:</span></div><div class="line">  close coupon popup window(optional):</div><div class="line"><span class="attr">    control_id:</span> btnClose</div><div class="line"><span class="attr">    control_action:</span> click</div><div class="line"><span class="attr">    expectation:</span> !btnViewMyCoupons</div><div class="line"><span class="attr">    optional:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><p><code>AppiumBooster</code>通过在命令行中进行调用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ruby start.rb -h</div><div class="line">Usage: start.rb [options]</div><div class="line">    -p, --app_path &lt;value&gt;           Specify app path</div><div class="line">    -t, --app_<span class="built_in">type</span> &lt;value&gt;           Specify app <span class="built_in">type</span>, ios or android</div><div class="line">    <span class="_">-f</span>, --testcase_file &lt;value&gt;      Specify testcase file(s)</div><div class="line">    <span class="_">-d</span>, --output_folder &lt;value&gt;      Specify output folder</div><div class="line">    -c, --convert_<span class="built_in">type</span> &lt;value&gt;       Specify testcase converter, yaml2csv or csv2yaml</div><div class="line">        --disable_output_color       Disable output color</div></pre></td></tr></table></figure>
<h3 id="执行测试用例"><a href="#执行测试用例" class="headerlink" title="执行测试用例"></a>执行测试用例</h3><p>指定执行测试用例时支持多种方式，常见的几种使用方式示例如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="variable">$&#123;AppiumBooster&#125;</span></div><div class="line"><span class="comment"># 执行指定的测试用例文件（绝对路径）</span></div><div class="line">$ ruby run.rb -p <span class="string">"ios/app/test.zip"</span> <span class="_">-f</span> <span class="string">"/Users/Leo/MyProjects/AppiumBooster/ios/testcases/login.yml"</span></div><div class="line"></div><div class="line"><span class="comment"># 执行指定的测试用例文件（相对路径）</span></div><div class="line">$ ruby run.rb -p <span class="string">"ios/app/test.zip"</span> <span class="_">-f</span> <span class="string">"ios/testcases/login.yml"</span></div><div class="line"></div><div class="line"><span class="comment"># 执行所有yaml格式的测试用例文件</span></div><div class="line">$ ruby run.rb -p <span class="string">"ios/app/test.zip"</span> <span class="_">-f</span> <span class="string">"ios/testcases/*.yml"</span></div><div class="line"></div><div class="line"><span class="comment"># 执行ios目录下所有csv格式的测试用例文件</span></div><div class="line">$ ruby run.rb -p <span class="string">"ios/app/test.zip"</span> -t <span class="string">"ios"</span> <span class="_">-f</span> <span class="string">"*.csv"</span></div></pre></td></tr></table></figure>
<h3 id="测试用例转换"><a href="#测试用例转换" class="headerlink" title="测试用例转换"></a>测试用例转换</h3><p>将YAML格式的测试用例转换为CSV格式的测试用例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby start.rb -c <span class="string">"yaml2csv"</span> <span class="_">-f</span> ios/testcases/login_and_logout.yml</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>什么才算是心目中理想的自动化测试框架？我也没有确切的答案。</p>
<blockquote>
<p>为什么要登山？<br>因为山在那里。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;做过自动化测试的人应该都会有这样一种体会，要写个自动化demo测试用例很容易，但是要真正将自动化测试落地，对成百上千的自动化测试用例实现较好
    
    </summary>
    
    
      <category term="AutomationTest" scheme="http://debugtalk.com/tags/AutomationTest/"/>
    
      <category term="Appium" scheme="http://debugtalk.com/tags/Appium/"/>
    
      <category term="AppiumBooster" scheme="http://debugtalk.com/tags/AppiumBooster/"/>
    
      <category term="UI Test" scheme="http://debugtalk.com/tags/UI-Test/"/>
    
  </entry>
  
</feed>
